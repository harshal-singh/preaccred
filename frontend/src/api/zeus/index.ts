/* eslint-disable */

import { AllTypesProps, ReturnTypes, Ops } from './const';
// import fetch, { Response } from 'node-fetch';
import WebSocket from 'ws';
export const HOST = 'http://localhost:8081/v1/graphql';

export const HEADERS = {};
export const apiSubscription = (options: chainOptions) => (query: string) => {
  try {
    const queryString = options[0] + '?query=' + encodeURIComponent(query);
    const wsString = queryString.replace('http', 'ws');
    const host = (options.length > 1 && options[1]?.websocket?.[0]) || wsString;
    const webSocketOptions = options[1]?.websocket || [host];
    const ws = new WebSocket(...webSocketOptions);
    return {
      ws,
      on: (e: (args: any) => void) => {
        ws.onmessage = (event: any) => {
          if (event.data) {
            const parsed = JSON.parse(event.data);
            const data = parsed.data;
            return e(data);
          }
        };
      },
      off: (e: (args: any) => void) => {
        ws.onclose = e;
      },
      error: (e: (args: any) => void) => {
        ws.onerror = e;
      },
      open: (e: () => void) => {
        ws.onopen = e;
      },
    };
  } catch {
    throw new Error('No websockets implemented');
  }
};
const handleFetchResponse = (response: Response): Promise<GraphQLResponse> => {
  if (!response.ok) {
    return new Promise((_, reject) => {
      response
        .text()
        .then((text) => {
          try {
            reject(JSON.parse(text));
          } catch (err) {
            reject(text);
          }
        })
        .catch(reject);
    });
  }
  return response.json() as Promise<GraphQLResponse>;
};

export const apiFetch =
  (options: fetchOptions) =>
  (query: string, variables: Record<string, unknown> = {}) => {
    const fetchOptions = options[1] || {};
    if (fetchOptions.method && fetchOptions.method === 'GET') {
      return fetch(
        `${options[0]}?query=${encodeURIComponent(query)}`,
        fetchOptions,
      )
        .then(handleFetchResponse)
        .then((response: GraphQLResponse) => {
          if (response.errors) {
            throw new GraphQLError(response);
          }
          return response.data;
        });
    }
    return fetch(`${options[0]}`, {
      body: JSON.stringify({ query, variables }),
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      ...fetchOptions,
    })
      .then(handleFetchResponse)
      .then((response: GraphQLResponse) => {
        if (response.errors) {
          throw new GraphQLError(response);
        }
        return response.data;
      });
  };

export const InternalsBuildQuery = ({
  ops,
  props,
  returns,
  options,
  scalars,
}: {
  props: AllTypesPropsType;
  returns: ReturnTypesType;
  ops: Operations;
  options?: OperationOptions;
  scalars?: ScalarDefinition;
}) => {
  const ibb = (
    k: string,
    o: InputValueType | VType,
    p = '',
    root = true,
    vars: Array<{ name: string; graphQLType: string }> = [],
  ): string => {
    const keyForPath = purifyGraphQLKey(k);
    const newPath = [p, keyForPath].join(SEPARATOR);
    if (!o) {
      return '';
    }
    if (typeof o === 'boolean' || typeof o === 'number') {
      return k;
    }
    if (typeof o === 'string') {
      return `${k} ${o}`;
    }
    if (Array.isArray(o)) {
      const args = InternalArgsBuilt({
        props,
        returns,
        ops,
        scalars,
        vars,
      })(o[0], newPath);
      return `${ibb(args ? `${k}(${args})` : k, o[1], p, false, vars)}`;
    }
    if (k === '__alias') {
      return Object.entries(o)
        .map(([alias, objectUnderAlias]) => {
          if (
            typeof objectUnderAlias !== 'object' ||
            Array.isArray(objectUnderAlias)
          ) {
            throw new Error(
              'Invalid alias it should be __alias:{ YOUR_ALIAS_NAME: { OPERATION_NAME: { ...selectors }}}',
            );
          }
          const operationName = Object.keys(objectUnderAlias)[0];
          const operation = objectUnderAlias[operationName];
          return ibb(`${alias}:${operationName}`, operation, p, false, vars);
        })
        .join('\n');
    }
    const hasOperationName =
      root && options?.operationName ? ' ' + options.operationName : '';
    const keyForDirectives = o.__directives ?? '';
    const query = `{${Object.entries(o)
      .filter(([k]) => k !== '__directives')
      .map((e) =>
        ibb(...e, [p, `field<>${keyForPath}`].join(SEPARATOR), false, vars),
      )
      .join('\n')}}`;
    if (!root) {
      return `${k} ${keyForDirectives}${hasOperationName} ${query}`;
    }
    const varsString = vars
      .map((v) => `${v.name}: ${v.graphQLType}`)
      .join(', ');
    return `${k} ${keyForDirectives}${hasOperationName}${
      varsString ? `(${varsString})` : ''
    } ${query}`;
  };
  return ibb;
};

export const Thunder =
  (fn: FetchFunction) =>
  <
    O extends keyof typeof Ops,
    SCLR extends ScalarDefinition,
    R extends keyof ValueTypes = GenericOperation<O>,
  >(
    operation: O,
    graphqlOptions?: ThunderGraphQLOptions<SCLR>,
  ) =>
  <Z extends ValueTypes[R]>(
    o: (Z & ValueTypes[R]) | ValueTypes[R],
    ops?: OperationOptions & { variables?: Record<string, unknown> },
  ) =>
    fn(
      Zeus(operation, o, {
        operationOptions: ops,
        scalars: graphqlOptions?.scalars,
      }),
      ops?.variables,
    ).then((data) => {
      if (graphqlOptions?.scalars) {
        return decodeScalarsInResponse({
          response: data,
          initialOp: operation,
          initialZeusQuery: o as VType,
          returns: ReturnTypes,
          scalars: graphqlOptions.scalars,
          ops: Ops,
        });
      }
      return data;
    }) as Promise<InputType<GraphQLTypes[R], Z, SCLR>>;

export const Chain = (...options: chainOptions) => Thunder(apiFetch(options));

export const SubscriptionThunder =
  (fn: SubscriptionFunction) =>
  <
    O extends keyof typeof Ops,
    SCLR extends ScalarDefinition,
    R extends keyof ValueTypes = GenericOperation<O>,
  >(
    operation: O,
    graphqlOptions?: ThunderGraphQLOptions<SCLR>,
  ) =>
  <Z extends ValueTypes[R]>(
    o: (Z & ValueTypes[R]) | ValueTypes[R],
    ops?: OperationOptions & { variables?: ExtractVariables<Z> },
  ) => {
    const returnedFunction = fn(
      Zeus(operation, o, {
        operationOptions: ops,
        scalars: graphqlOptions?.scalars,
      }),
    ) as SubscriptionToGraphQL<Z, GraphQLTypes[R], SCLR>;
    if (returnedFunction?.on && graphqlOptions?.scalars) {
      const wrapped = returnedFunction.on;
      returnedFunction.on = (
        fnToCall: (args: InputType<GraphQLTypes[R], Z, SCLR>) => void,
      ) =>
        wrapped((data: InputType<GraphQLTypes[R], Z, SCLR>) => {
          if (graphqlOptions?.scalars) {
            return fnToCall(
              decodeScalarsInResponse({
                response: data,
                initialOp: operation,
                initialZeusQuery: o as VType,
                returns: ReturnTypes,
                scalars: graphqlOptions.scalars,
                ops: Ops,
              }),
            );
          }
          return fnToCall(data);
        });
    }
    return returnedFunction;
  };

export const Subscription = (...options: chainOptions) =>
  SubscriptionThunder(apiSubscription(options));
export const Zeus = <
  Z extends ValueTypes[R],
  O extends keyof typeof Ops,
  R extends keyof ValueTypes = GenericOperation<O>,
>(
  operation: O,
  o: (Z & ValueTypes[R]) | ValueTypes[R],
  ops?: {
    operationOptions?: OperationOptions;
    scalars?: ScalarDefinition;
  },
) =>
  InternalsBuildQuery({
    props: AllTypesProps,
    returns: ReturnTypes,
    ops: Ops,
    options: ops?.operationOptions,
    scalars: ops?.scalars,
  })(operation, o as VType);

export const ZeusSelect = <T>() => ((t: unknown) => t) as SelectionFunction<T>;

export const Selector = <T extends keyof ValueTypes>(key: T) =>
  key && ZeusSelect<ValueTypes[T]>();

export const TypeFromSelector = <T extends keyof ValueTypes>(key: T) =>
  key && ZeusSelect<ValueTypes[T]>();
export const Gql = Chain(HOST, {
  headers: {
    'Content-Type': 'application/json',
    ...HEADERS,
  },
});

export const ZeusScalars = ZeusSelect<ScalarCoders>();

export const decodeScalarsInResponse = <O extends Operations>({
  response,
  scalars,
  returns,
  ops,
  initialZeusQuery,
  initialOp,
}: {
  ops: O;
  response: any;
  returns: ReturnTypesType;
  scalars?: Record<string, ScalarResolver | undefined>;
  initialOp: keyof O;
  initialZeusQuery: InputValueType | VType;
}) => {
  if (!scalars) {
    return response;
  }
  const builder = PrepareScalarPaths({
    ops,
    returns,
  });

  const scalarPaths = builder(
    initialOp as string,
    ops[initialOp],
    initialZeusQuery,
  );
  if (scalarPaths) {
    const r = traverseResponse({ scalarPaths, resolvers: scalars })(
      initialOp as string,
      response,
      [ops[initialOp]],
    );
    return r;
  }
  return response;
};

export const traverseResponse = ({
  resolvers,
  scalarPaths,
}: {
  scalarPaths: { [x: string]: `scalar.${string}` };
  resolvers: {
    [x: string]: ScalarResolver | undefined;
  };
}) => {
  const ibb = (
    k: string,
    o: InputValueType | VType,
    p: string[] = [],
  ): unknown => {
    if (Array.isArray(o)) {
      return o.map((eachO) => ibb(k, eachO, p));
    }
    if (o == null) {
      return o;
    }
    const scalarPathString = p.join(SEPARATOR);
    const currentScalarString = scalarPaths[scalarPathString];
    if (currentScalarString) {
      const currentDecoder =
        resolvers[currentScalarString.split('.')[1]]?.decode;
      if (currentDecoder) {
        return currentDecoder(o);
      }
    }
    if (
      typeof o === 'boolean' ||
      typeof o === 'number' ||
      typeof o === 'string' ||
      !o
    ) {
      return o;
    }
    const entries = Object.entries(o).map(
      ([k, v]) => [k, ibb(k, v, [...p, purifyGraphQLKey(k)])] as const,
    );
    const objectFromEntries = entries.reduce<Record<string, unknown>>(
      (a, [k, v]) => {
        a[k] = v;
        return a;
      },
      {},
    );
    return objectFromEntries;
  };
  return ibb;
};

export type AllTypesPropsType = {
  [x: string]:
    | undefined
    | `scalar.${string}`
    | 'enum'
    | {
        [x: string]:
          | undefined
          | string
          | {
              [x: string]: string | undefined;
            };
      };
};

export type ReturnTypesType = {
  [x: string]:
    | {
        [x: string]: string | undefined;
      }
    | `scalar.${string}`
    | undefined;
};
export type InputValueType = {
  [x: string]:
    | undefined
    | boolean
    | string
    | number
    | [any, undefined | boolean | InputValueType]
    | InputValueType;
};
export type VType =
  | undefined
  | boolean
  | string
  | number
  | [any, undefined | boolean | InputValueType]
  | InputValueType;

export type PlainType = boolean | number | string | null | undefined;
export type ZeusArgsType =
  | PlainType
  | {
      [x: string]: ZeusArgsType;
    }
  | Array<ZeusArgsType>;

export type Operations = Record<string, string>;

export type VariableDefinition = {
  [x: string]: unknown;
};

export const SEPARATOR = '|';

export type fetchOptions = Parameters<typeof fetch>;
type websocketOptions = typeof WebSocket extends new (
  ...args: infer R
) => WebSocket
  ? R
  : never;
export type chainOptions =
  | [fetchOptions[0], fetchOptions[1] & { websocket?: websocketOptions }]
  | [fetchOptions[0]];
export type FetchFunction = (
  query: string,
  variables?: Record<string, unknown>,
) => Promise<any>;
export type SubscriptionFunction = (query: string) => any;
type NotUndefined<T> = T extends undefined ? never : T;
export type ResolverType<F> = NotUndefined<
  F extends [infer ARGS, any] ? ARGS : undefined
>;

export type OperationOptions = {
  operationName?: string;
};

export type ScalarCoder = Record<string, (s: unknown) => string>;

export interface GraphQLResponse {
  data?: Record<string, any>;
  errors?: Array<{
    message: string;
  }>;
}
export class GraphQLError extends Error {
  constructor(public response: GraphQLResponse) {
    super('');
    console.error(response);
  }
  toString() {
    return 'GraphQL Response Error';
  }
}
export type GenericOperation<O> = O extends keyof typeof Ops
  ? (typeof Ops)[O]
  : never;
export type ThunderGraphQLOptions<SCLR extends ScalarDefinition> = {
  scalars?: SCLR | ScalarCoders;
};

const ExtractScalar = (
  mappedParts: string[],
  returns: ReturnTypesType,
): `scalar.${string}` | undefined => {
  if (mappedParts.length === 0) {
    return;
  }
  const oKey = mappedParts[0];
  const returnP1 = returns[oKey];
  if (typeof returnP1 === 'object') {
    const returnP2 = returnP1[mappedParts[1]];
    if (returnP2) {
      return ExtractScalar([returnP2, ...mappedParts.slice(2)], returns);
    }
    return undefined;
  }
  return returnP1 as `scalar.${string}` | undefined;
};

export const PrepareScalarPaths = ({
  ops,
  returns,
}: {
  returns: ReturnTypesType;
  ops: Operations;
}) => {
  const ibb = (
    k: string,
    originalKey: string,
    o: InputValueType | VType,
    p: string[] = [],
    pOriginals: string[] = [],
    root = true,
  ): { [x: string]: `scalar.${string}` } | undefined => {
    if (!o) {
      return;
    }
    if (
      typeof o === 'boolean' ||
      typeof o === 'number' ||
      typeof o === 'string'
    ) {
      const extractionArray = [...pOriginals, originalKey];
      const isScalar = ExtractScalar(extractionArray, returns);
      if (isScalar?.startsWith('scalar')) {
        const partOfTree = {
          [[...p, k].join(SEPARATOR)]: isScalar,
        };
        return partOfTree;
      }
      return {};
    }
    if (Array.isArray(o)) {
      return ibb(k, k, o[1], p, pOriginals, false);
    }
    if (k === '__alias') {
      return Object.entries(o)
        .map(([alias, objectUnderAlias]) => {
          if (
            typeof objectUnderAlias !== 'object' ||
            Array.isArray(objectUnderAlias)
          ) {
            throw new Error(
              'Invalid alias it should be __alias:{ YOUR_ALIAS_NAME: { OPERATION_NAME: { ...selectors }}}',
            );
          }
          const operationName = Object.keys(objectUnderAlias)[0];
          const operation = objectUnderAlias[operationName];
          return ibb(alias, operationName, operation, p, pOriginals, false);
        })
        .reduce((a, b) => ({
          ...a,
          ...b,
        }));
    }
    const keyName = root ? ops[k] : k;
    return Object.entries(o)
      .filter(([k]) => k !== '__directives')
      .map(([k, v]) => {
        // Inline fragments shouldn't be added to the path as they aren't a field
        const isInlineFragment = originalKey.match(/^...\s*on/) != null;
        return ibb(
          k,
          k,
          v,
          isInlineFragment ? p : [...p, purifyGraphQLKey(keyName || k)],
          isInlineFragment
            ? pOriginals
            : [...pOriginals, purifyGraphQLKey(originalKey)],
          false,
        );
      })
      .reduce((a, b) => ({
        ...a,
        ...b,
      }));
  };
  return ibb;
};

export const purifyGraphQLKey = (k: string) =>
  k.replace(/\([^)]*\)/g, '').replace(/^[^:]*\:/g, '');

const mapPart = (p: string) => {
  const [isArg, isField] = p.split('<>');
  if (isField) {
    return {
      v: isField,
      __type: 'field',
    } as const;
  }
  return {
    v: isArg,
    __type: 'arg',
  } as const;
};

type Part = ReturnType<typeof mapPart>;

export const ResolveFromPath = (
  props: AllTypesPropsType,
  returns: ReturnTypesType,
  ops: Operations,
) => {
  const ResolvePropsType = (mappedParts: Part[]) => {
    const oKey = ops[mappedParts[0].v];
    const propsP1 = oKey ? props[oKey] : props[mappedParts[0].v];
    if (propsP1 === 'enum' && mappedParts.length === 1) {
      return 'enum';
    }
    if (
      typeof propsP1 === 'string' &&
      propsP1.startsWith('scalar.') &&
      mappedParts.length === 1
    ) {
      return propsP1;
    }
    if (typeof propsP1 === 'object') {
      if (mappedParts.length < 2) {
        return 'not';
      }
      const propsP2 = propsP1[mappedParts[1].v];
      if (typeof propsP2 === 'string') {
        return rpp(
          `${propsP2}${SEPARATOR}${mappedParts
            .slice(2)
            .map((mp) => mp.v)
            .join(SEPARATOR)}`,
        );
      }
      if (typeof propsP2 === 'object') {
        if (mappedParts.length < 3) {
          return 'not';
        }
        const propsP3 = propsP2[mappedParts[2].v];
        if (propsP3 && mappedParts[2].__type === 'arg') {
          return rpp(
            `${propsP3}${SEPARATOR}${mappedParts
              .slice(3)
              .map((mp) => mp.v)
              .join(SEPARATOR)}`,
          );
        }
      }
    }
  };
  const ResolveReturnType = (mappedParts: Part[]) => {
    if (mappedParts.length === 0) {
      return 'not';
    }
    const oKey = ops[mappedParts[0].v];
    const returnP1 = oKey ? returns[oKey] : returns[mappedParts[0].v];
    if (typeof returnP1 === 'object') {
      if (mappedParts.length < 2) return 'not';
      const returnP2 = returnP1[mappedParts[1].v];
      if (returnP2) {
        return rpp(
          `${returnP2}${SEPARATOR}${mappedParts
            .slice(2)
            .map((mp) => mp.v)
            .join(SEPARATOR)}`,
        );
      }
    }
  };
  const rpp = (path: string): 'enum' | 'not' | `scalar.${string}` => {
    const parts = path.split(SEPARATOR).filter((l) => l.length > 0);
    const mappedParts = parts.map(mapPart);
    const propsP1 = ResolvePropsType(mappedParts);
    if (propsP1) {
      return propsP1;
    }
    const returnP1 = ResolveReturnType(mappedParts);
    if (returnP1) {
      return returnP1;
    }
    return 'not';
  };
  return rpp;
};

export const InternalArgsBuilt = ({
  props,
  ops,
  returns,
  scalars,
  vars,
}: {
  props: AllTypesPropsType;
  returns: ReturnTypesType;
  ops: Operations;
  scalars?: ScalarDefinition;
  vars: Array<{ name: string; graphQLType: string }>;
}) => {
  const arb = (a: ZeusArgsType, p = '', root = true): string => {
    if (typeof a === 'string') {
      if (a.startsWith(START_VAR_NAME)) {
        const [varName, graphQLType] = a
          .replace(START_VAR_NAME, '$')
          .split(GRAPHQL_TYPE_SEPARATOR);
        const v = vars.find((v) => v.name === varName);
        if (!v) {
          vars.push({
            name: varName,
            graphQLType,
          });
        } else {
          if (v.graphQLType !== graphQLType) {
            throw new Error(
              `Invalid variable exists with two different GraphQL Types, "${v.graphQLType}" and ${graphQLType}`,
            );
          }
        }
        return varName;
      }
    }
    const checkType = ResolveFromPath(props, returns, ops)(p);
    if (checkType.startsWith('scalar.')) {
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const [_, ...splittedScalar] = checkType.split('.');
      const scalarKey = splittedScalar.join('.');
      return (scalars?.[scalarKey]?.encode?.(a) as string) || JSON.stringify(a);
    }
    if (Array.isArray(a)) {
      return `[${a.map((arr) => arb(arr, p, false)).join(', ')}]`;
    }
    if (typeof a === 'string') {
      if (checkType === 'enum') {
        return a;
      }
      return `${JSON.stringify(a)}`;
    }
    if (typeof a === 'object') {
      if (a === null) {
        return `null`;
      }
      const returnedObjectString = Object.entries(a)
        .filter(([, v]) => typeof v !== 'undefined')
        .map(([k, v]) => `${k}: ${arb(v, [p, k].join(SEPARATOR), false)}`)
        .join(',\n');
      if (!root) {
        return `{${returnedObjectString}}`;
      }
      return returnedObjectString;
    }
    return `${a}`;
  };
  return arb;
};

export const resolverFor = <
  X,
  T extends keyof ResolverInputTypes,
  Z extends keyof ResolverInputTypes[T],
>(
  type: T,
  field: Z,
  fn: (
    args: Required<ResolverInputTypes[T]>[Z] extends [infer Input, any]
      ? Input
      : any,
    source: any,
  ) => Z extends keyof ModelTypes[T]
    ? ModelTypes[T][Z] | Promise<ModelTypes[T][Z]> | X
    : never,
) => fn as (args?: any, source?: any) => ReturnType<typeof fn>;

export type UnwrapPromise<T> = T extends Promise<infer R> ? R : T;
export type ZeusState<T extends (...args: any[]) => Promise<any>> = NonNullable<
  UnwrapPromise<ReturnType<T>>
>;
export type ZeusHook<
  T extends (
    ...args: any[]
  ) => Record<string, (...args: any[]) => Promise<any>>,
  N extends keyof ReturnType<T>,
> = ZeusState<ReturnType<T>[N]>;

export type WithTypeNameValue<T> = T & {
  __typename?: boolean;
  __directives?: string;
};
export type AliasType<T> = WithTypeNameValue<T> & {
  __alias?: Record<string, WithTypeNameValue<T>>;
};
type DeepAnify<T> = {
  [P in keyof T]?: any;
};
type IsPayLoad<T> = T extends [any, infer PayLoad] ? PayLoad : T;
export type ScalarDefinition = Record<string, ScalarResolver>;

type IsScalar<S, SCLR extends ScalarDefinition> = S extends 'scalar' & {
  name: infer T;
}
  ? T extends keyof SCLR
    ? SCLR[T]['decode'] extends (s: unknown) => unknown
      ? ReturnType<SCLR[T]['decode']>
      : unknown
    : unknown
  : S;
type IsArray<T, U, SCLR extends ScalarDefinition> = T extends Array<infer R>
  ? InputType<R, U, SCLR>[]
  : InputType<T, U, SCLR>;
type FlattenArray<T> = T extends Array<infer R> ? R : T;
type BaseZeusResolver = boolean | 1 | string | Variable<any, string>;

type IsInterfaced<
  SRC extends DeepAnify<DST>,
  DST,
  SCLR extends ScalarDefinition,
> = FlattenArray<SRC> extends ZEUS_INTERFACES | ZEUS_UNIONS
  ? {
      [P in keyof SRC]: SRC[P] extends '__union' & infer R
        ? P extends keyof DST
          ? IsArray<
              R,
              '__typename' extends keyof DST
                ? DST[P] & { __typename: true }
                : DST[P],
              SCLR
            >
          : IsArray<
              R,
              '__typename' extends keyof DST
                ? { __typename: true }
                : Record<string, never>,
              SCLR
            >
        : never;
    }[keyof SRC] & {
      [P in keyof Omit<
        Pick<
          SRC,
          {
            [P in keyof DST]: SRC[P] extends '__union' & infer R ? never : P;
          }[keyof DST]
        >,
        '__typename'
      >]: IsPayLoad<DST[P]> extends BaseZeusResolver
        ? IsScalar<SRC[P], SCLR>
        : IsArray<SRC[P], DST[P], SCLR>;
    }
  : {
      [P in keyof Pick<SRC, keyof DST>]: IsPayLoad<
        DST[P]
      > extends BaseZeusResolver
        ? IsScalar<SRC[P], SCLR>
        : IsArray<SRC[P], DST[P], SCLR>;
    };

export type MapType<
  SRC,
  DST,
  SCLR extends ScalarDefinition,
> = SRC extends DeepAnify<DST> ? IsInterfaced<SRC, DST, SCLR> : never;
// eslint-disable-next-line @typescript-eslint/ban-types
export type InputType<
  SRC,
  DST,
  SCLR extends ScalarDefinition = {},
> = IsPayLoad<DST> extends { __alias: infer R }
  ? {
      [P in keyof R]: MapType<SRC, R[P], SCLR>[keyof MapType<SRC, R[P], SCLR>];
    } & MapType<SRC, Omit<IsPayLoad<DST>, '__alias'>, SCLR>
  : MapType<SRC, IsPayLoad<DST>, SCLR>;
export type SubscriptionToGraphQL<Z, T, SCLR extends ScalarDefinition> = {
  ws: WebSocket;
  on: (fn: (args: InputType<T, Z, SCLR>) => void) => void;
  off: (
    fn: (e: {
      data?: InputType<T, Z, SCLR>;
      code?: number;
      reason?: string;
      message?: string;
    }) => void,
  ) => void;
  error: (
    fn: (e: { data?: InputType<T, Z, SCLR>; errors?: string[] }) => void,
  ) => void;
  open: () => void;
};

// eslint-disable-next-line @typescript-eslint/ban-types
export type FromSelector<
  SELECTOR,
  NAME extends keyof GraphQLTypes,
  SCLR extends ScalarDefinition = {},
> = InputType<GraphQLTypes[NAME], SELECTOR, SCLR>;

export type ScalarResolver = {
  encode?: (s: unknown) => string;
  decode?: (s: unknown) => unknown;
};

export type SelectionFunction<V> = <T>(t: T | V) => T;

type BuiltInVariableTypes = {
  ['String']: string;
  ['Int']: number;
  ['Float']: number;
  ['ID']: unknown;
  ['Boolean']: boolean;
};
type AllVariableTypes = keyof BuiltInVariableTypes | keyof ZEUS_VARIABLES;
type VariableRequired<T extends string> =
  | `${T}!`
  | T
  | `[${T}]`
  | `[${T}]!`
  | `[${T}!]`
  | `[${T}!]!`;
type VR<T extends string> = VariableRequired<VariableRequired<T>>;

export type GraphQLVariableType = VR<AllVariableTypes>;

type ExtractVariableTypeString<T extends string> = T extends VR<infer R1>
  ? R1 extends VR<infer R2>
    ? R2 extends VR<infer R3>
      ? R3 extends VR<infer R4>
        ? R4 extends VR<infer R5>
          ? R5
          : R4
        : R3
      : R2
    : R1
  : T;

type DecomposeType<T, Type> = T extends `[${infer R}]`
  ? Array<DecomposeType<R, Type>> | undefined
  : T extends `${infer R}!`
    ? NonNullable<DecomposeType<R, Type>>
    : Type | undefined;

type ExtractTypeFromGraphQLType<T extends string> =
  T extends keyof ZEUS_VARIABLES
    ? ZEUS_VARIABLES[T]
    : T extends keyof BuiltInVariableTypes
      ? BuiltInVariableTypes[T]
      : any;

export type GetVariableType<T extends string> = DecomposeType<
  T,
  ExtractTypeFromGraphQLType<ExtractVariableTypeString<T>>
>;

type UndefinedKeys<T> = {
  [K in keyof T]-?: T[K] extends NonNullable<T[K]> ? never : K;
}[keyof T];

type WithNullableKeys<T> = Pick<T, UndefinedKeys<T>>;
type WithNonNullableKeys<T> = Omit<T, UndefinedKeys<T>>;

type OptionalKeys<T> = {
  [P in keyof T]?: T[P];
};

export type WithOptionalNullables<T> = OptionalKeys<WithNullableKeys<T>> &
  WithNonNullableKeys<T>;

export type Variable<T extends GraphQLVariableType, Name extends string> = {
  ' __zeus_name': Name;
  ' __zeus_type': T;
};

export type ExtractVariablesDeep<Query> = Query extends Variable<
  infer VType,
  infer VName
>
  ? { [key in VName]: GetVariableType<VType> }
  : Query extends string | number | boolean | Array<string | number | boolean>
    ? // eslint-disable-next-line @typescript-eslint/ban-types
      {}
    : UnionToIntersection<
        {
          [K in keyof Query]: WithOptionalNullables<
            ExtractVariablesDeep<Query[K]>
          >;
        }[keyof Query]
      >;

export type ExtractVariables<Query> = Query extends Variable<
  infer VType,
  infer VName
>
  ? { [key in VName]: GetVariableType<VType> }
  : Query extends [infer Inputs, infer Outputs]
    ? ExtractVariablesDeep<Inputs> & ExtractVariables<Outputs>
    : Query extends string | number | boolean | Array<string | number | boolean>
      ? // eslint-disable-next-line @typescript-eslint/ban-types
        {}
      : UnionToIntersection<
          {
            [K in keyof Query]: WithOptionalNullables<
              ExtractVariables<Query[K]>
            >;
          }[keyof Query]
        >;

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I,
) => void
  ? I
  : never;

export const START_VAR_NAME = `$ZEUS_VAR`;
export const GRAPHQL_TYPE_SEPARATOR = `__$GRAPHQL__`;

export const $ = <Type extends GraphQLVariableType, Name extends string>(
  name: Name,
  graphqlType: Type,
) => {
  return (START_VAR_NAME +
    name +
    GRAPHQL_TYPE_SEPARATOR +
    graphqlType) as unknown as Variable<Type, Name>;
};
type ZEUS_INTERFACES = never;
export type ScalarCoders = {
  bigint?: ScalarResolver;
  timestamp?: ScalarResolver;
  timestamptz?: ScalarResolver;
  uuid?: ScalarResolver;
};
type ZEUS_UNIONS = never;

export type ValueTypes = {
  /** columns and relationships of "Application" */
  ['Application']: AliasType<{
    applicationIntegrations?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['ApplicationIntegration_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['ApplicationIntegration_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['ApplicationIntegration_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ApplicationIntegration'],
    ];
    applicationIntegrations_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['ApplicationIntegration_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['ApplicationIntegration_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['ApplicationIntegration_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ApplicationIntegration_aggregate'],
    ];
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    objects?: boolean | `@${string}`;
    packages?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['PackageApplication_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['PackageApplication_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['PackageApplication_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['PackageApplication'],
    ];
    packages_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['PackageApplication_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['PackageApplication_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['PackageApplication_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['PackageApplication_aggregate'],
    ];
    roles?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "ApplicationIntegration" */
  ['ApplicationIntegration']: AliasType<{
    /** An object relationship */
    application?: ValueTypes['Application'];
    applicationId?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    menuName?: boolean | `@${string}`;
    menuURL?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    subMenus?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "ApplicationIntegration" */
  ['ApplicationIntegration_aggregate']: AliasType<{
    aggregate?: ValueTypes['ApplicationIntegration_aggregate_fields'];
    nodes?: ValueTypes['ApplicationIntegration'];
    __typename?: boolean | `@${string}`;
  }>;
  ['ApplicationIntegration_aggregate_bool_exp']: {
    count?:
      | ValueTypes['ApplicationIntegration_aggregate_bool_exp_count']
      | undefined
      | null
      | Variable<any, string>;
  };
  ['ApplicationIntegration_aggregate_bool_exp_count']: {
    arguments?:
      | Array<ValueTypes['ApplicationIntegration_select_column']>
      | undefined
      | null
      | Variable<any, string>;
    distinct?: boolean | undefined | null | Variable<any, string>;
    filter?:
      | ValueTypes['ApplicationIntegration_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    predicate: ValueTypes['Int_comparison_exp'] | Variable<any, string>;
  };
  /** aggregate fields of "ApplicationIntegration" */
  ['ApplicationIntegration_aggregate_fields']: AliasType<{
    avg?: ValueTypes['ApplicationIntegration_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ValueTypes['ApplicationIntegration_select_column']>
          | undefined
          | null
          | Variable<any, string>;
        distinct?: boolean | undefined | null | Variable<any, string>;
      },
      boolean | `@${string}`,
    ];
    max?: ValueTypes['ApplicationIntegration_max_fields'];
    min?: ValueTypes['ApplicationIntegration_min_fields'];
    stddev?: ValueTypes['ApplicationIntegration_stddev_fields'];
    stddev_pop?: ValueTypes['ApplicationIntegration_stddev_pop_fields'];
    stddev_samp?: ValueTypes['ApplicationIntegration_stddev_samp_fields'];
    sum?: ValueTypes['ApplicationIntegration_sum_fields'];
    var_pop?: ValueTypes['ApplicationIntegration_var_pop_fields'];
    var_samp?: ValueTypes['ApplicationIntegration_var_samp_fields'];
    variance?: ValueTypes['ApplicationIntegration_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** order by aggregate values of table "ApplicationIntegration" */
  ['ApplicationIntegration_aggregate_order_by']: {
    avg?:
      | ValueTypes['ApplicationIntegration_avg_order_by']
      | undefined
      | null
      | Variable<any, string>;
    count?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    max?:
      | ValueTypes['ApplicationIntegration_max_order_by']
      | undefined
      | null
      | Variable<any, string>;
    min?:
      | ValueTypes['ApplicationIntegration_min_order_by']
      | undefined
      | null
      | Variable<any, string>;
    stddev?:
      | ValueTypes['ApplicationIntegration_stddev_order_by']
      | undefined
      | null
      | Variable<any, string>;
    stddev_pop?:
      | ValueTypes['ApplicationIntegration_stddev_pop_order_by']
      | undefined
      | null
      | Variable<any, string>;
    stddev_samp?:
      | ValueTypes['ApplicationIntegration_stddev_samp_order_by']
      | undefined
      | null
      | Variable<any, string>;
    sum?:
      | ValueTypes['ApplicationIntegration_sum_order_by']
      | undefined
      | null
      | Variable<any, string>;
    var_pop?:
      | ValueTypes['ApplicationIntegration_var_pop_order_by']
      | undefined
      | null
      | Variable<any, string>;
    var_samp?:
      | ValueTypes['ApplicationIntegration_var_samp_order_by']
      | undefined
      | null
      | Variable<any, string>;
    variance?:
      | ValueTypes['ApplicationIntegration_variance_order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** input type for inserting array relation for remote table "ApplicationIntegration" */
  ['ApplicationIntegration_arr_rel_insert_input']: {
    data:
      | Array<ValueTypes['ApplicationIntegration_insert_input']>
      | Variable<any, string>;
    /** upsert condition */
    on_conflict?:
      | ValueTypes['ApplicationIntegration_on_conflict']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate avg on columns */
  ['ApplicationIntegration_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by avg() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_avg_order_by']: {
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Boolean expression to filter rows from the table "ApplicationIntegration". All fields are combined with a logical 'AND'. */
  ['ApplicationIntegration_bool_exp']: {
    _and?:
      | Array<ValueTypes['ApplicationIntegration_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    _not?:
      | ValueTypes['ApplicationIntegration_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    _or?:
      | Array<ValueTypes['ApplicationIntegration_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    application?:
      | ValueTypes['Application_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    applicationId?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['bigint_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    id?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    menuName?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    menuURL?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    name?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    subMenus?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** unique or primary key constraints on table "ApplicationIntegration" */
  ['ApplicationIntegration_constraint']: ApplicationIntegration_constraint;
  /** input type for incrementing numeric columns in table "ApplicationIntegration" */
  ['ApplicationIntegration_inc_input']: {
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
  };
  /** input type for inserting data into table "ApplicationIntegration" */
  ['ApplicationIntegration_insert_input']: {
    application?:
      | ValueTypes['Application_obj_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
    applicationId?: string | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    menuName?: string | undefined | null | Variable<any, string>;
    menuURL?: string | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    subMenus?: string | undefined | null | Variable<any, string>;
  };
  /** aggregate max on columns */
  ['ApplicationIntegration_max_fields']: AliasType<{
    applicationId?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    menuName?: boolean | `@${string}`;
    menuURL?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    subMenus?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by max() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_max_order_by']: {
    applicationId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    menuName?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    menuURL?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    name?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    subMenus?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate min on columns */
  ['ApplicationIntegration_min_fields']: AliasType<{
    applicationId?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    menuName?: boolean | `@${string}`;
    menuURL?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    subMenus?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by min() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_min_order_by']: {
    applicationId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    menuName?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    menuURL?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    name?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    subMenus?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** response of any mutation on the table "ApplicationIntegration" */
  ['ApplicationIntegration_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['ApplicationIntegration'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "ApplicationIntegration" */
  ['ApplicationIntegration_on_conflict']: {
    constraint:
      | ValueTypes['ApplicationIntegration_constraint']
      | Variable<any, string>;
    update_columns:
      | Array<ValueTypes['ApplicationIntegration_update_column']>
      | Variable<any, string>;
    where?:
      | ValueTypes['ApplicationIntegration_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Ordering options when selecting data from "ApplicationIntegration". */
  ['ApplicationIntegration_order_by']: {
    application?:
      | ValueTypes['Application_order_by']
      | undefined
      | null
      | Variable<any, string>;
    applicationId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    menuName?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    menuURL?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    name?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    subMenus?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** primary key columns input for table: ApplicationIntegration */
  ['ApplicationIntegration_pk_columns_input']: {
    id: ValueTypes['uuid'] | Variable<any, string>;
  };
  /** select columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_select_column']: ApplicationIntegration_select_column;
  /** input type for updating data in table "ApplicationIntegration" */
  ['ApplicationIntegration_set_input']: {
    applicationId?: string | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    menuName?: string | undefined | null | Variable<any, string>;
    menuURL?: string | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    subMenus?: string | undefined | null | Variable<any, string>;
  };
  /** aggregate stddev on columns */
  ['ApplicationIntegration_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by stddev() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_stddev_order_by']: {
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate stddev_pop on columns */
  ['ApplicationIntegration_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by stddev_pop() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_stddev_pop_order_by']: {
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate stddev_samp on columns */
  ['ApplicationIntegration_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by stddev_samp() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_stddev_samp_order_by']: {
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Streaming cursor of the table "ApplicationIntegration" */
  ['ApplicationIntegration_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value:
      | ValueTypes['ApplicationIntegration_stream_cursor_value_input']
      | Variable<any, string>;
    /** cursor ordering */
    ordering?:
      | ValueTypes['cursor_ordering']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Initial value of the column from where the streaming should start */
  ['ApplicationIntegration_stream_cursor_value_input']: {
    applicationId?: string | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    menuName?: string | undefined | null | Variable<any, string>;
    menuURL?: string | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    subMenus?: string | undefined | null | Variable<any, string>;
  };
  /** aggregate sum on columns */
  ['ApplicationIntegration_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by sum() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_sum_order_by']: {
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** update columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_update_column']: ApplicationIntegration_update_column;
  ['ApplicationIntegration_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?:
      | ValueTypes['ApplicationIntegration_inc_input']
      | undefined
      | null
      | Variable<any, string>;
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ValueTypes['ApplicationIntegration_set_input']
      | undefined
      | null
      | Variable<any, string>;
    /** filter the rows which have to be updated */
    where:
      | ValueTypes['ApplicationIntegration_bool_exp']
      | Variable<any, string>;
  };
  /** aggregate var_pop on columns */
  ['ApplicationIntegration_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by var_pop() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_var_pop_order_by']: {
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate var_samp on columns */
  ['ApplicationIntegration_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by var_samp() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_var_samp_order_by']: {
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate variance on columns */
  ['ApplicationIntegration_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by variance() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_variance_order_by']: {
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregated selection of "Application" */
  ['Application_aggregate']: AliasType<{
    aggregate?: ValueTypes['Application_aggregate_fields'];
    nodes?: ValueTypes['Application'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "Application" */
  ['Application_aggregate_fields']: AliasType<{
    avg?: ValueTypes['Application_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ValueTypes['Application_select_column']>
          | undefined
          | null
          | Variable<any, string>;
        distinct?: boolean | undefined | null | Variable<any, string>;
      },
      boolean | `@${string}`,
    ];
    max?: ValueTypes['Application_max_fields'];
    min?: ValueTypes['Application_min_fields'];
    stddev?: ValueTypes['Application_stddev_fields'];
    stddev_pop?: ValueTypes['Application_stddev_pop_fields'];
    stddev_samp?: ValueTypes['Application_stddev_samp_fields'];
    sum?: ValueTypes['Application_sum_fields'];
    var_pop?: ValueTypes['Application_var_pop_fields'];
    var_samp?: ValueTypes['Application_var_samp_fields'];
    variance?: ValueTypes['Application_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate avg on columns */
  ['Application_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "Application". All fields are combined with a logical 'AND'. */
  ['Application_bool_exp']: {
    _and?:
      | Array<ValueTypes['Application_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    _not?:
      | ValueTypes['Application_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    _or?:
      | Array<ValueTypes['Application_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    applicationIntegrations?:
      | ValueTypes['ApplicationIntegration_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    applicationIntegrations_aggregate?:
      | ValueTypes['ApplicationIntegration_aggregate_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['bigint_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    id?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    name?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    objects?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    packages?:
      | ValueTypes['PackageApplication_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    packages_aggregate?:
      | ValueTypes['PackageApplication_aggregate_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    roles?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** unique or primary key constraints on table "Application" */
  ['Application_constraint']: Application_constraint;
  /** input type for incrementing numeric columns in table "Application" */
  ['Application_inc_input']: {
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
  };
  /** input type for inserting data into table "Application" */
  ['Application_insert_input']: {
    applicationIntegrations?:
      | ValueTypes['ApplicationIntegration_arr_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: string | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    objects?: string | undefined | null | Variable<any, string>;
    packages?:
      | ValueTypes['PackageApplication_arr_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
    roles?: string | undefined | null | Variable<any, string>;
  };
  /** aggregate max on columns */
  ['Application_max_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    objects?: boolean | `@${string}`;
    roles?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['Application_min_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    objects?: boolean | `@${string}`;
    roles?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "Application" */
  ['Application_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['Application'];
    __typename?: boolean | `@${string}`;
  }>;
  /** input type for inserting object relation for remote table "Application" */
  ['Application_obj_rel_insert_input']: {
    data: ValueTypes['Application_insert_input'] | Variable<any, string>;
    /** upsert condition */
    on_conflict?:
      | ValueTypes['Application_on_conflict']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** on_conflict condition type for table "Application" */
  ['Application_on_conflict']: {
    constraint: ValueTypes['Application_constraint'] | Variable<any, string>;
    update_columns:
      | Array<ValueTypes['Application_update_column']>
      | Variable<any, string>;
    where?:
      | ValueTypes['Application_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Ordering options when selecting data from "Application". */
  ['Application_order_by']: {
    applicationIntegrations_aggregate?:
      | ValueTypes['ApplicationIntegration_aggregate_order_by']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    name?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    objects?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    packages_aggregate?:
      | ValueTypes['PackageApplication_aggregate_order_by']
      | undefined
      | null
      | Variable<any, string>;
    roles?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
  };
  /** primary key columns input for table: Application */
  ['Application_pk_columns_input']: {
    id: string | Variable<any, string>;
  };
  /** select columns of table "Application" */
  ['Application_select_column']: Application_select_column;
  /** input type for updating data in table "Application" */
  ['Application_set_input']: {
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: string | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    objects?: string | undefined | null | Variable<any, string>;
    roles?: string | undefined | null | Variable<any, string>;
  };
  /** aggregate stddev on columns */
  ['Application_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_pop on columns */
  ['Application_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_samp on columns */
  ['Application_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Streaming cursor of the table "Application" */
  ['Application_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value:
      | ValueTypes['Application_stream_cursor_value_input']
      | Variable<any, string>;
    /** cursor ordering */
    ordering?:
      | ValueTypes['cursor_ordering']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Initial value of the column from where the streaming should start */
  ['Application_stream_cursor_value_input']: {
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: string | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    objects?: string | undefined | null | Variable<any, string>;
    roles?: string | undefined | null | Variable<any, string>;
  };
  /** aggregate sum on columns */
  ['Application_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** update columns of table "Application" */
  ['Application_update_column']: Application_update_column;
  ['Application_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?:
      | ValueTypes['Application_inc_input']
      | undefined
      | null
      | Variable<any, string>;
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ValueTypes['Application_set_input']
      | undefined
      | null
      | Variable<any, string>;
    /** filter the rows which have to be updated */
    where: ValueTypes['Application_bool_exp'] | Variable<any, string>;
  };
  /** aggregate var_pop on columns */
  ['Application_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate var_samp on columns */
  ['Application_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate variance on columns */
  ['Application_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
  ['Boolean_comparison_exp']: {
    _eq?: boolean | undefined | null | Variable<any, string>;
    _gt?: boolean | undefined | null | Variable<any, string>;
    _gte?: boolean | undefined | null | Variable<any, string>;
    _in?: Array<boolean> | undefined | null | Variable<any, string>;
    _is_null?: boolean | undefined | null | Variable<any, string>;
    _lt?: boolean | undefined | null | Variable<any, string>;
    _lte?: boolean | undefined | null | Variable<any, string>;
    _neq?: boolean | undefined | null | Variable<any, string>;
    _nin?: Array<boolean> | undefined | null | Variable<any, string>;
  };
  /** columns and relationships of "CaseSeverity" */
  ['CaseSeverity']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "CaseSeverity" */
  ['CaseSeverity_aggregate']: AliasType<{
    aggregate?: ValueTypes['CaseSeverity_aggregate_fields'];
    nodes?: ValueTypes['CaseSeverity'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "CaseSeverity" */
  ['CaseSeverity_aggregate_fields']: AliasType<{
    avg?: ValueTypes['CaseSeverity_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ValueTypes['CaseSeverity_select_column']>
          | undefined
          | null
          | Variable<any, string>;
        distinct?: boolean | undefined | null | Variable<any, string>;
      },
      boolean | `@${string}`,
    ];
    max?: ValueTypes['CaseSeverity_max_fields'];
    min?: ValueTypes['CaseSeverity_min_fields'];
    stddev?: ValueTypes['CaseSeverity_stddev_fields'];
    stddev_pop?: ValueTypes['CaseSeverity_stddev_pop_fields'];
    stddev_samp?: ValueTypes['CaseSeverity_stddev_samp_fields'];
    sum?: ValueTypes['CaseSeverity_sum_fields'];
    var_pop?: ValueTypes['CaseSeverity_var_pop_fields'];
    var_samp?: ValueTypes['CaseSeverity_var_samp_fields'];
    variance?: ValueTypes['CaseSeverity_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate avg on columns */
  ['CaseSeverity_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "CaseSeverity". All fields are combined with a logical 'AND'. */
  ['CaseSeverity_bool_exp']: {
    _and?:
      | Array<ValueTypes['CaseSeverity_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    _not?:
      | ValueTypes['CaseSeverity_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    _or?:
      | Array<ValueTypes['CaseSeverity_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    createdAt?:
      | ValueTypes['timestamptz_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    createdById?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['bigint_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    id?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    name?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** unique or primary key constraints on table "CaseSeverity" */
  ['CaseSeverity_constraint']: CaseSeverity_constraint;
  /** input type for incrementing numeric columns in table "CaseSeverity" */
  ['CaseSeverity_inc_input']: {
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
  };
  /** input type for inserting data into table "CaseSeverity" */
  ['CaseSeverity_insert_input']: {
    createdAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** aggregate max on columns */
  ['CaseSeverity_max_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['CaseSeverity_min_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "CaseSeverity" */
  ['CaseSeverity_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['CaseSeverity'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "CaseSeverity" */
  ['CaseSeverity_on_conflict']: {
    constraint: ValueTypes['CaseSeverity_constraint'] | Variable<any, string>;
    update_columns:
      | Array<ValueTypes['CaseSeverity_update_column']>
      | Variable<any, string>;
    where?:
      | ValueTypes['CaseSeverity_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Ordering options when selecting data from "CaseSeverity". */
  ['CaseSeverity_order_by']: {
    createdAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    createdById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    name?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    status?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    tenantId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** primary key columns input for table: CaseSeverity */
  ['CaseSeverity_pk_columns_input']: {
    id: ValueTypes['uuid'] | Variable<any, string>;
  };
  /** select columns of table "CaseSeverity" */
  ['CaseSeverity_select_column']: CaseSeverity_select_column;
  /** input type for updating data in table "CaseSeverity" */
  ['CaseSeverity_set_input']: {
    createdAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** aggregate stddev on columns */
  ['CaseSeverity_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_pop on columns */
  ['CaseSeverity_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_samp on columns */
  ['CaseSeverity_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Streaming cursor of the table "CaseSeverity" */
  ['CaseSeverity_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value:
      | ValueTypes['CaseSeverity_stream_cursor_value_input']
      | Variable<any, string>;
    /** cursor ordering */
    ordering?:
      | ValueTypes['cursor_ordering']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Initial value of the column from where the streaming should start */
  ['CaseSeverity_stream_cursor_value_input']: {
    createdAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** aggregate sum on columns */
  ['CaseSeverity_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** update columns of table "CaseSeverity" */
  ['CaseSeverity_update_column']: CaseSeverity_update_column;
  ['CaseSeverity_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?:
      | ValueTypes['CaseSeverity_inc_input']
      | undefined
      | null
      | Variable<any, string>;
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ValueTypes['CaseSeverity_set_input']
      | undefined
      | null
      | Variable<any, string>;
    /** filter the rows which have to be updated */
    where: ValueTypes['CaseSeverity_bool_exp'] | Variable<any, string>;
  };
  /** aggregate var_pop on columns */
  ['CaseSeverity_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate var_samp on columns */
  ['CaseSeverity_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate variance on columns */
  ['CaseSeverity_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "ClosureReason" */
  ['ClosureReason']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "ClosureReason" */
  ['ClosureReason_aggregate']: AliasType<{
    aggregate?: ValueTypes['ClosureReason_aggregate_fields'];
    nodes?: ValueTypes['ClosureReason'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "ClosureReason" */
  ['ClosureReason_aggregate_fields']: AliasType<{
    avg?: ValueTypes['ClosureReason_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ValueTypes['ClosureReason_select_column']>
          | undefined
          | null
          | Variable<any, string>;
        distinct?: boolean | undefined | null | Variable<any, string>;
      },
      boolean | `@${string}`,
    ];
    max?: ValueTypes['ClosureReason_max_fields'];
    min?: ValueTypes['ClosureReason_min_fields'];
    stddev?: ValueTypes['ClosureReason_stddev_fields'];
    stddev_pop?: ValueTypes['ClosureReason_stddev_pop_fields'];
    stddev_samp?: ValueTypes['ClosureReason_stddev_samp_fields'];
    sum?: ValueTypes['ClosureReason_sum_fields'];
    var_pop?: ValueTypes['ClosureReason_var_pop_fields'];
    var_samp?: ValueTypes['ClosureReason_var_samp_fields'];
    variance?: ValueTypes['ClosureReason_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate avg on columns */
  ['ClosureReason_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "ClosureReason". All fields are combined with a logical 'AND'. */
  ['ClosureReason_bool_exp']: {
    _and?:
      | Array<ValueTypes['ClosureReason_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    _not?:
      | ValueTypes['ClosureReason_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    _or?:
      | Array<ValueTypes['ClosureReason_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    createdAt?:
      | ValueTypes['timestamptz_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    createdById?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['bigint_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    id?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    name?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** unique or primary key constraints on table "ClosureReason" */
  ['ClosureReason_constraint']: ClosureReason_constraint;
  /** input type for incrementing numeric columns in table "ClosureReason" */
  ['ClosureReason_inc_input']: {
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
  };
  /** input type for inserting data into table "ClosureReason" */
  ['ClosureReason_insert_input']: {
    createdAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** aggregate max on columns */
  ['ClosureReason_max_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['ClosureReason_min_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "ClosureReason" */
  ['ClosureReason_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['ClosureReason'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "ClosureReason" */
  ['ClosureReason_on_conflict']: {
    constraint: ValueTypes['ClosureReason_constraint'] | Variable<any, string>;
    update_columns:
      | Array<ValueTypes['ClosureReason_update_column']>
      | Variable<any, string>;
    where?:
      | ValueTypes['ClosureReason_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Ordering options when selecting data from "ClosureReason". */
  ['ClosureReason_order_by']: {
    createdAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    createdById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    name?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    status?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    tenantId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** primary key columns input for table: ClosureReason */
  ['ClosureReason_pk_columns_input']: {
    id: ValueTypes['uuid'] | Variable<any, string>;
  };
  /** select columns of table "ClosureReason" */
  ['ClosureReason_select_column']: ClosureReason_select_column;
  /** input type for updating data in table "ClosureReason" */
  ['ClosureReason_set_input']: {
    createdAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** aggregate stddev on columns */
  ['ClosureReason_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_pop on columns */
  ['ClosureReason_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_samp on columns */
  ['ClosureReason_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Streaming cursor of the table "ClosureReason" */
  ['ClosureReason_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value:
      | ValueTypes['ClosureReason_stream_cursor_value_input']
      | Variable<any, string>;
    /** cursor ordering */
    ordering?:
      | ValueTypes['cursor_ordering']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Initial value of the column from where the streaming should start */
  ['ClosureReason_stream_cursor_value_input']: {
    createdAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** aggregate sum on columns */
  ['ClosureReason_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** update columns of table "ClosureReason" */
  ['ClosureReason_update_column']: ClosureReason_update_column;
  ['ClosureReason_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?:
      | ValueTypes['ClosureReason_inc_input']
      | undefined
      | null
      | Variable<any, string>;
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ValueTypes['ClosureReason_set_input']
      | undefined
      | null
      | Variable<any, string>;
    /** filter the rows which have to be updated */
    where: ValueTypes['ClosureReason_bool_exp'] | Variable<any, string>;
  };
  /** aggregate var_pop on columns */
  ['ClosureReason_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate var_samp on columns */
  ['ClosureReason_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate variance on columns */
  ['ClosureReason_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "Currency" */
  ['Currency']: AliasType<{
    code?: boolean | `@${string}`;
    country?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    exchangeRate?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "Currency" */
  ['Currency_aggregate']: AliasType<{
    aggregate?: ValueTypes['Currency_aggregate_fields'];
    nodes?: ValueTypes['Currency'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "Currency" */
  ['Currency_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?:
          | Array<ValueTypes['Currency_select_column']>
          | undefined
          | null
          | Variable<any, string>;
        distinct?: boolean | undefined | null | Variable<any, string>;
      },
      boolean | `@${string}`,
    ];
    max?: ValueTypes['Currency_max_fields'];
    min?: ValueTypes['Currency_min_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "Currency". All fields are combined with a logical 'AND'. */
  ['Currency_bool_exp']: {
    _and?:
      | Array<ValueTypes['Currency_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    _not?:
      | ValueTypes['Currency_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    _or?:
      | Array<ValueTypes['Currency_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    code?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    country?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    createdAt?:
      | ValueTypes['timestamp_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    exchangeRate?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    id?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    name?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamp_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** unique or primary key constraints on table "Currency" */
  ['Currency_constraint']: Currency_constraint;
  /** input type for inserting data into table "Currency" */
  ['Currency_insert_input']: {
    code?: string | undefined | null | Variable<any, string>;
    country?: string | undefined | null | Variable<any, string>;
    createdAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
    exchangeRate?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate max on columns */
  ['Currency_max_fields']: AliasType<{
    code?: boolean | `@${string}`;
    country?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    exchangeRate?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['Currency_min_fields']: AliasType<{
    code?: boolean | `@${string}`;
    country?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    exchangeRate?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "Currency" */
  ['Currency_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['Currency'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "Currency" */
  ['Currency_on_conflict']: {
    constraint: ValueTypes['Currency_constraint'] | Variable<any, string>;
    update_columns:
      | Array<ValueTypes['Currency_update_column']>
      | Variable<any, string>;
    where?:
      | ValueTypes['Currency_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Ordering options when selecting data from "Currency". */
  ['Currency_order_by']: {
    code?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    country?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    createdAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    exchangeRate?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    name?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    status?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    tenantId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** primary key columns input for table: Currency */
  ['Currency_pk_columns_input']: {
    id: ValueTypes['uuid'] | Variable<any, string>;
  };
  /** select columns of table "Currency" */
  ['Currency_select_column']: Currency_select_column;
  /** input type for updating data in table "Currency" */
  ['Currency_set_input']: {
    code?: string | undefined | null | Variable<any, string>;
    country?: string | undefined | null | Variable<any, string>;
    createdAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
    exchangeRate?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Streaming cursor of the table "Currency" */
  ['Currency_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value:
      | ValueTypes['Currency_stream_cursor_value_input']
      | Variable<any, string>;
    /** cursor ordering */
    ordering?:
      | ValueTypes['cursor_ordering']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Initial value of the column from where the streaming should start */
  ['Currency_stream_cursor_value_input']: {
    code?: string | undefined | null | Variable<any, string>;
    country?: string | undefined | null | Variable<any, string>;
    createdAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
    exchangeRate?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** update columns of table "Currency" */
  ['Currency_update_column']: Currency_update_column;
  ['Currency_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ValueTypes['Currency_set_input']
      | undefined
      | null
      | Variable<any, string>;
    /** filter the rows which have to be updated */
    where: ValueTypes['Currency_bool_exp'] | Variable<any, string>;
  };
  /** columns and relationships of "CustomRole" */
  ['CustomRole']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "CustomRole" */
  ['CustomRole_aggregate']: AliasType<{
    aggregate?: ValueTypes['CustomRole_aggregate_fields'];
    nodes?: ValueTypes['CustomRole'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "CustomRole" */
  ['CustomRole_aggregate_fields']: AliasType<{
    avg?: ValueTypes['CustomRole_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ValueTypes['CustomRole_select_column']>
          | undefined
          | null
          | Variable<any, string>;
        distinct?: boolean | undefined | null | Variable<any, string>;
      },
      boolean | `@${string}`,
    ];
    max?: ValueTypes['CustomRole_max_fields'];
    min?: ValueTypes['CustomRole_min_fields'];
    stddev?: ValueTypes['CustomRole_stddev_fields'];
    stddev_pop?: ValueTypes['CustomRole_stddev_pop_fields'];
    stddev_samp?: ValueTypes['CustomRole_stddev_samp_fields'];
    sum?: ValueTypes['CustomRole_sum_fields'];
    var_pop?: ValueTypes['CustomRole_var_pop_fields'];
    var_samp?: ValueTypes['CustomRole_var_samp_fields'];
    variance?: ValueTypes['CustomRole_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate avg on columns */
  ['CustomRole_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "CustomRole". All fields are combined with a logical 'AND'. */
  ['CustomRole_bool_exp']: {
    _and?:
      | Array<ValueTypes['CustomRole_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    _not?:
      | ValueTypes['CustomRole_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    _or?:
      | Array<ValueTypes['CustomRole_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    createdAt?:
      | ValueTypes['timestamptz_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    createdById?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['bigint_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    id?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    name?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** unique or primary key constraints on table "CustomRole" */
  ['CustomRole_constraint']: CustomRole_constraint;
  /** input type for incrementing numeric columns in table "CustomRole" */
  ['CustomRole_inc_input']: {
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
  };
  /** input type for inserting data into table "CustomRole" */
  ['CustomRole_insert_input']: {
    createdAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** aggregate max on columns */
  ['CustomRole_max_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['CustomRole_min_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "CustomRole" */
  ['CustomRole_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['CustomRole'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "CustomRole" */
  ['CustomRole_on_conflict']: {
    constraint: ValueTypes['CustomRole_constraint'] | Variable<any, string>;
    update_columns:
      | Array<ValueTypes['CustomRole_update_column']>
      | Variable<any, string>;
    where?:
      | ValueTypes['CustomRole_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Ordering options when selecting data from "CustomRole". */
  ['CustomRole_order_by']: {
    createdAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    createdById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    name?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    status?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    tenantId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** primary key columns input for table: CustomRole */
  ['CustomRole_pk_columns_input']: {
    id: ValueTypes['uuid'] | Variable<any, string>;
  };
  /** select columns of table "CustomRole" */
  ['CustomRole_select_column']: CustomRole_select_column;
  /** input type for updating data in table "CustomRole" */
  ['CustomRole_set_input']: {
    createdAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** aggregate stddev on columns */
  ['CustomRole_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_pop on columns */
  ['CustomRole_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_samp on columns */
  ['CustomRole_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Streaming cursor of the table "CustomRole" */
  ['CustomRole_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value:
      | ValueTypes['CustomRole_stream_cursor_value_input']
      | Variable<any, string>;
    /** cursor ordering */
    ordering?:
      | ValueTypes['cursor_ordering']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Initial value of the column from where the streaming should start */
  ['CustomRole_stream_cursor_value_input']: {
    createdAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** aggregate sum on columns */
  ['CustomRole_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** update columns of table "CustomRole" */
  ['CustomRole_update_column']: CustomRole_update_column;
  ['CustomRole_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?:
      | ValueTypes['CustomRole_inc_input']
      | undefined
      | null
      | Variable<any, string>;
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ValueTypes['CustomRole_set_input']
      | undefined
      | null
      | Variable<any, string>;
    /** filter the rows which have to be updated */
    where: ValueTypes['CustomRole_bool_exp'] | Variable<any, string>;
  };
  /** aggregate var_pop on columns */
  ['CustomRole_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate var_samp on columns */
  ['CustomRole_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate variance on columns */
  ['CustomRole_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "Group" */
  ['Group']: AliasType<{
    createdBy?: boolean | `@${string}`;
    created_at?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    lastModifiedBy?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    role?: boolean | `@${string}`;
    roles?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['GroupRole_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['GroupRole_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['GroupRole_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['GroupRole'],
    ];
    roles_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['GroupRole_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['GroupRole_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['GroupRole_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['GroupRole_aggregate'],
    ];
    status?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updated_at?: boolean | `@${string}`;
    users?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['UserGroup_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['UserGroup_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['UserGroup_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserGroup'],
    ];
    users_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['UserGroup_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['UserGroup_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['UserGroup_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserGroup_aggregate'],
    ];
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "GroupRole" */
  ['GroupRole']: AliasType<{
    /** An object relationship */
    group?: ValueTypes['Group'];
    groupId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    /** An object relationship */
    role?: ValueTypes['Role'];
    roleId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "GroupRole" */
  ['GroupRole_aggregate']: AliasType<{
    aggregate?: ValueTypes['GroupRole_aggregate_fields'];
    nodes?: ValueTypes['GroupRole'];
    __typename?: boolean | `@${string}`;
  }>;
  ['GroupRole_aggregate_bool_exp']: {
    count?:
      | ValueTypes['GroupRole_aggregate_bool_exp_count']
      | undefined
      | null
      | Variable<any, string>;
  };
  ['GroupRole_aggregate_bool_exp_count']: {
    arguments?:
      | Array<ValueTypes['GroupRole_select_column']>
      | undefined
      | null
      | Variable<any, string>;
    distinct?: boolean | undefined | null | Variable<any, string>;
    filter?:
      | ValueTypes['GroupRole_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    predicate: ValueTypes['Int_comparison_exp'] | Variable<any, string>;
  };
  /** aggregate fields of "GroupRole" */
  ['GroupRole_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?:
          | Array<ValueTypes['GroupRole_select_column']>
          | undefined
          | null
          | Variable<any, string>;
        distinct?: boolean | undefined | null | Variable<any, string>;
      },
      boolean | `@${string}`,
    ];
    max?: ValueTypes['GroupRole_max_fields'];
    min?: ValueTypes['GroupRole_min_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** order by aggregate values of table "GroupRole" */
  ['GroupRole_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    max?:
      | ValueTypes['GroupRole_max_order_by']
      | undefined
      | null
      | Variable<any, string>;
    min?:
      | ValueTypes['GroupRole_min_order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** input type for inserting array relation for remote table "GroupRole" */
  ['GroupRole_arr_rel_insert_input']: {
    data: Array<ValueTypes['GroupRole_insert_input']> | Variable<any, string>;
    /** upsert condition */
    on_conflict?:
      | ValueTypes['GroupRole_on_conflict']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Boolean expression to filter rows from the table "GroupRole". All fields are combined with a logical 'AND'. */
  ['GroupRole_bool_exp']: {
    _and?:
      | Array<ValueTypes['GroupRole_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    _not?:
      | ValueTypes['GroupRole_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    _or?:
      | Array<ValueTypes['GroupRole_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    group?:
      | ValueTypes['Group_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    groupId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    id?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    role?:
      | ValueTypes['Role_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    roleId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** unique or primary key constraints on table "GroupRole" */
  ['GroupRole_constraint']: GroupRole_constraint;
  /** input type for inserting data into table "GroupRole" */
  ['GroupRole_insert_input']: {
    group?:
      | ValueTypes['Group_obj_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
    groupId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    role?:
      | ValueTypes['Role_obj_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
    roleId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** aggregate max on columns */
  ['GroupRole_max_fields']: AliasType<{
    groupId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    roleId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by max() on columns of table "GroupRole" */
  ['GroupRole_max_order_by']: {
    groupId?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    roleId?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
  };
  /** aggregate min on columns */
  ['GroupRole_min_fields']: AliasType<{
    groupId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    roleId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by min() on columns of table "GroupRole" */
  ['GroupRole_min_order_by']: {
    groupId?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    roleId?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
  };
  /** response of any mutation on the table "GroupRole" */
  ['GroupRole_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['GroupRole'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "GroupRole" */
  ['GroupRole_on_conflict']: {
    constraint: ValueTypes['GroupRole_constraint'] | Variable<any, string>;
    update_columns:
      | Array<ValueTypes['GroupRole_update_column']>
      | Variable<any, string>;
    where?:
      | ValueTypes['GroupRole_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Ordering options when selecting data from "GroupRole". */
  ['GroupRole_order_by']: {
    group?:
      | ValueTypes['Group_order_by']
      | undefined
      | null
      | Variable<any, string>;
    groupId?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    role?:
      | ValueTypes['Role_order_by']
      | undefined
      | null
      | Variable<any, string>;
    roleId?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
  };
  /** primary key columns input for table: GroupRole */
  ['GroupRole_pk_columns_input']: {
    id: ValueTypes['uuid'] | Variable<any, string>;
  };
  /** select columns of table "GroupRole" */
  ['GroupRole_select_column']: GroupRole_select_column;
  /** input type for updating data in table "GroupRole" */
  ['GroupRole_set_input']: {
    groupId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    roleId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** Streaming cursor of the table "GroupRole" */
  ['GroupRole_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value:
      | ValueTypes['GroupRole_stream_cursor_value_input']
      | Variable<any, string>;
    /** cursor ordering */
    ordering?:
      | ValueTypes['cursor_ordering']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Initial value of the column from where the streaming should start */
  ['GroupRole_stream_cursor_value_input']: {
    groupId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    roleId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** update columns of table "GroupRole" */
  ['GroupRole_update_column']: GroupRole_update_column;
  ['GroupRole_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ValueTypes['GroupRole_set_input']
      | undefined
      | null
      | Variable<any, string>;
    /** filter the rows which have to be updated */
    where: ValueTypes['GroupRole_bool_exp'] | Variable<any, string>;
  };
  /** aggregated selection of "Group" */
  ['Group_aggregate']: AliasType<{
    aggregate?: ValueTypes['Group_aggregate_fields'];
    nodes?: ValueTypes['Group'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "Group" */
  ['Group_aggregate_fields']: AliasType<{
    avg?: ValueTypes['Group_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ValueTypes['Group_select_column']>
          | undefined
          | null
          | Variable<any, string>;
        distinct?: boolean | undefined | null | Variable<any, string>;
      },
      boolean | `@${string}`,
    ];
    max?: ValueTypes['Group_max_fields'];
    min?: ValueTypes['Group_min_fields'];
    stddev?: ValueTypes['Group_stddev_fields'];
    stddev_pop?: ValueTypes['Group_stddev_pop_fields'];
    stddev_samp?: ValueTypes['Group_stddev_samp_fields'];
    sum?: ValueTypes['Group_sum_fields'];
    var_pop?: ValueTypes['Group_var_pop_fields'];
    var_samp?: ValueTypes['Group_var_samp_fields'];
    variance?: ValueTypes['Group_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate avg on columns */
  ['Group_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "Group". All fields are combined with a logical 'AND'. */
  ['Group_bool_exp']: {
    _and?:
      | Array<ValueTypes['Group_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    _not?:
      | ValueTypes['Group_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    _or?:
      | Array<ValueTypes['Group_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    createdBy?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    created_at?:
      | ValueTypes['timestamptz_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['bigint_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    id?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    lastModifiedBy?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    name?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    role?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    roles?:
      | ValueTypes['GroupRole_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    roles_aggregate?:
      | ValueTypes['GroupRole_aggregate_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    updated_at?:
      | ValueTypes['timestamptz_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    users?:
      | ValueTypes['UserGroup_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    users_aggregate?:
      | ValueTypes['UserGroup_aggregate_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** unique or primary key constraints on table "Group" */
  ['Group_constraint']: Group_constraint;
  /** input type for incrementing numeric columns in table "Group" */
  ['Group_inc_input']: {
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
  };
  /** input type for inserting data into table "Group" */
  ['Group_insert_input']: {
    createdBy?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    created_at?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    lastModifiedBy?:
      | ValueTypes['uuid']
      | undefined
      | null
      | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    role?: string | undefined | null | Variable<any, string>;
    roles?:
      | ValueTypes['GroupRole_arr_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updated_at?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    users?:
      | ValueTypes['UserGroup_arr_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate max on columns */
  ['Group_max_fields']: AliasType<{
    createdBy?: boolean | `@${string}`;
    created_at?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    lastModifiedBy?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    role?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updated_at?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['Group_min_fields']: AliasType<{
    createdBy?: boolean | `@${string}`;
    created_at?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    lastModifiedBy?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    role?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updated_at?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "Group" */
  ['Group_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['Group'];
    __typename?: boolean | `@${string}`;
  }>;
  /** input type for inserting object relation for remote table "Group" */
  ['Group_obj_rel_insert_input']: {
    data: ValueTypes['Group_insert_input'] | Variable<any, string>;
    /** upsert condition */
    on_conflict?:
      | ValueTypes['Group_on_conflict']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** on_conflict condition type for table "Group" */
  ['Group_on_conflict']: {
    constraint: ValueTypes['Group_constraint'] | Variable<any, string>;
    update_columns:
      | Array<ValueTypes['Group_update_column']>
      | Variable<any, string>;
    where?:
      | ValueTypes['Group_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Ordering options when selecting data from "Group". */
  ['Group_order_by']: {
    createdBy?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    created_at?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    lastModifiedBy?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    name?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    role?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    roles_aggregate?:
      | ValueTypes['GroupRole_aggregate_order_by']
      | undefined
      | null
      | Variable<any, string>;
    status?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    tenantId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updated_at?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    users_aggregate?:
      | ValueTypes['UserGroup_aggregate_order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** primary key columns input for table: Group */
  ['Group_pk_columns_input']: {
    id: ValueTypes['uuid'] | Variable<any, string>;
  };
  /** select columns of table "Group" */
  ['Group_select_column']: Group_select_column;
  /** input type for updating data in table "Group" */
  ['Group_set_input']: {
    createdBy?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    created_at?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    lastModifiedBy?:
      | ValueTypes['uuid']
      | undefined
      | null
      | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    role?: string | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updated_at?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate stddev on columns */
  ['Group_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_pop on columns */
  ['Group_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_samp on columns */
  ['Group_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Streaming cursor of the table "Group" */
  ['Group_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value:
      | ValueTypes['Group_stream_cursor_value_input']
      | Variable<any, string>;
    /** cursor ordering */
    ordering?:
      | ValueTypes['cursor_ordering']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Initial value of the column from where the streaming should start */
  ['Group_stream_cursor_value_input']: {
    createdBy?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    created_at?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    lastModifiedBy?:
      | ValueTypes['uuid']
      | undefined
      | null
      | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    role?: string | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updated_at?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate sum on columns */
  ['Group_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** update columns of table "Group" */
  ['Group_update_column']: Group_update_column;
  ['Group_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?:
      | ValueTypes['Group_inc_input']
      | undefined
      | null
      | Variable<any, string>;
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ValueTypes['Group_set_input']
      | undefined
      | null
      | Variable<any, string>;
    /** filter the rows which have to be updated */
    where: ValueTypes['Group_bool_exp'] | Variable<any, string>;
  };
  /** aggregate var_pop on columns */
  ['Group_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate var_samp on columns */
  ['Group_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate variance on columns */
  ['Group_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "Industry" */
  ['Industry']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "Industry" */
  ['Industry_aggregate']: AliasType<{
    aggregate?: ValueTypes['Industry_aggregate_fields'];
    nodes?: ValueTypes['Industry'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "Industry" */
  ['Industry_aggregate_fields']: AliasType<{
    avg?: ValueTypes['Industry_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ValueTypes['Industry_select_column']>
          | undefined
          | null
          | Variable<any, string>;
        distinct?: boolean | undefined | null | Variable<any, string>;
      },
      boolean | `@${string}`,
    ];
    max?: ValueTypes['Industry_max_fields'];
    min?: ValueTypes['Industry_min_fields'];
    stddev?: ValueTypes['Industry_stddev_fields'];
    stddev_pop?: ValueTypes['Industry_stddev_pop_fields'];
    stddev_samp?: ValueTypes['Industry_stddev_samp_fields'];
    sum?: ValueTypes['Industry_sum_fields'];
    var_pop?: ValueTypes['Industry_var_pop_fields'];
    var_samp?: ValueTypes['Industry_var_samp_fields'];
    variance?: ValueTypes['Industry_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate avg on columns */
  ['Industry_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "Industry". All fields are combined with a logical 'AND'. */
  ['Industry_bool_exp']: {
    _and?:
      | Array<ValueTypes['Industry_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    _not?:
      | ValueTypes['Industry_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    _or?:
      | Array<ValueTypes['Industry_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    createdAt?:
      | ValueTypes['timestamptz_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    createdById?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['bigint_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    id?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    name?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** unique or primary key constraints on table "Industry" */
  ['Industry_constraint']: Industry_constraint;
  /** input type for incrementing numeric columns in table "Industry" */
  ['Industry_inc_input']: {
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
  };
  /** input type for inserting data into table "Industry" */
  ['Industry_insert_input']: {
    createdAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** aggregate max on columns */
  ['Industry_max_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['Industry_min_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "Industry" */
  ['Industry_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['Industry'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "Industry" */
  ['Industry_on_conflict']: {
    constraint: ValueTypes['Industry_constraint'] | Variable<any, string>;
    update_columns:
      | Array<ValueTypes['Industry_update_column']>
      | Variable<any, string>;
    where?:
      | ValueTypes['Industry_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Ordering options when selecting data from "Industry". */
  ['Industry_order_by']: {
    createdAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    createdById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    name?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    status?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    tenantId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** primary key columns input for table: Industry */
  ['Industry_pk_columns_input']: {
    id: ValueTypes['uuid'] | Variable<any, string>;
  };
  /** select columns of table "Industry" */
  ['Industry_select_column']: Industry_select_column;
  /** input type for updating data in table "Industry" */
  ['Industry_set_input']: {
    createdAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** aggregate stddev on columns */
  ['Industry_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_pop on columns */
  ['Industry_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_samp on columns */
  ['Industry_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Streaming cursor of the table "Industry" */
  ['Industry_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value:
      | ValueTypes['Industry_stream_cursor_value_input']
      | Variable<any, string>;
    /** cursor ordering */
    ordering?:
      | ValueTypes['cursor_ordering']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Initial value of the column from where the streaming should start */
  ['Industry_stream_cursor_value_input']: {
    createdAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** aggregate sum on columns */
  ['Industry_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** update columns of table "Industry" */
  ['Industry_update_column']: Industry_update_column;
  ['Industry_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?:
      | ValueTypes['Industry_inc_input']
      | undefined
      | null
      | Variable<any, string>;
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ValueTypes['Industry_set_input']
      | undefined
      | null
      | Variable<any, string>;
    /** filter the rows which have to be updated */
    where: ValueTypes['Industry_bool_exp'] | Variable<any, string>;
  };
  /** aggregate var_pop on columns */
  ['Industry_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate var_samp on columns */
  ['Industry_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate variance on columns */
  ['Industry_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
  ['Int_comparison_exp']: {
    _eq?: number | undefined | null | Variable<any, string>;
    _gt?: number | undefined | null | Variable<any, string>;
    _gte?: number | undefined | null | Variable<any, string>;
    _in?: Array<number> | undefined | null | Variable<any, string>;
    _is_null?: boolean | undefined | null | Variable<any, string>;
    _lt?: number | undefined | null | Variable<any, string>;
    _lte?: number | undefined | null | Variable<any, string>;
    _neq?: number | undefined | null | Variable<any, string>;
    _nin?: Array<number> | undefined | null | Variable<any, string>;
  };
  /** columns and relationships of "IssueCategory" */
  ['IssueCategory']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "IssueCategory" */
  ['IssueCategory_aggregate']: AliasType<{
    aggregate?: ValueTypes['IssueCategory_aggregate_fields'];
    nodes?: ValueTypes['IssueCategory'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "IssueCategory" */
  ['IssueCategory_aggregate_fields']: AliasType<{
    avg?: ValueTypes['IssueCategory_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ValueTypes['IssueCategory_select_column']>
          | undefined
          | null
          | Variable<any, string>;
        distinct?: boolean | undefined | null | Variable<any, string>;
      },
      boolean | `@${string}`,
    ];
    max?: ValueTypes['IssueCategory_max_fields'];
    min?: ValueTypes['IssueCategory_min_fields'];
    stddev?: ValueTypes['IssueCategory_stddev_fields'];
    stddev_pop?: ValueTypes['IssueCategory_stddev_pop_fields'];
    stddev_samp?: ValueTypes['IssueCategory_stddev_samp_fields'];
    sum?: ValueTypes['IssueCategory_sum_fields'];
    var_pop?: ValueTypes['IssueCategory_var_pop_fields'];
    var_samp?: ValueTypes['IssueCategory_var_samp_fields'];
    variance?: ValueTypes['IssueCategory_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate avg on columns */
  ['IssueCategory_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "IssueCategory". All fields are combined with a logical 'AND'. */
  ['IssueCategory_bool_exp']: {
    _and?:
      | Array<ValueTypes['IssueCategory_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    _not?:
      | ValueTypes['IssueCategory_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    _or?:
      | Array<ValueTypes['IssueCategory_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    createdAt?:
      | ValueTypes['timestamptz_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    createdById?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['bigint_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    id?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    name?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** unique or primary key constraints on table "IssueCategory" */
  ['IssueCategory_constraint']: IssueCategory_constraint;
  /** input type for incrementing numeric columns in table "IssueCategory" */
  ['IssueCategory_inc_input']: {
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
  };
  /** input type for inserting data into table "IssueCategory" */
  ['IssueCategory_insert_input']: {
    createdAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** aggregate max on columns */
  ['IssueCategory_max_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['IssueCategory_min_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "IssueCategory" */
  ['IssueCategory_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['IssueCategory'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "IssueCategory" */
  ['IssueCategory_on_conflict']: {
    constraint: ValueTypes['IssueCategory_constraint'] | Variable<any, string>;
    update_columns:
      | Array<ValueTypes['IssueCategory_update_column']>
      | Variable<any, string>;
    where?:
      | ValueTypes['IssueCategory_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Ordering options when selecting data from "IssueCategory". */
  ['IssueCategory_order_by']: {
    createdAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    createdById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    name?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    status?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    tenantId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** primary key columns input for table: IssueCategory */
  ['IssueCategory_pk_columns_input']: {
    id: ValueTypes['uuid'] | Variable<any, string>;
  };
  /** select columns of table "IssueCategory" */
  ['IssueCategory_select_column']: IssueCategory_select_column;
  /** input type for updating data in table "IssueCategory" */
  ['IssueCategory_set_input']: {
    createdAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** aggregate stddev on columns */
  ['IssueCategory_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_pop on columns */
  ['IssueCategory_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_samp on columns */
  ['IssueCategory_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Streaming cursor of the table "IssueCategory" */
  ['IssueCategory_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value:
      | ValueTypes['IssueCategory_stream_cursor_value_input']
      | Variable<any, string>;
    /** cursor ordering */
    ordering?:
      | ValueTypes['cursor_ordering']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Initial value of the column from where the streaming should start */
  ['IssueCategory_stream_cursor_value_input']: {
    createdAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** aggregate sum on columns */
  ['IssueCategory_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** update columns of table "IssueCategory" */
  ['IssueCategory_update_column']: IssueCategory_update_column;
  ['IssueCategory_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?:
      | ValueTypes['IssueCategory_inc_input']
      | undefined
      | null
      | Variable<any, string>;
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ValueTypes['IssueCategory_set_input']
      | undefined
      | null
      | Variable<any, string>;
    /** filter the rows which have to be updated */
    where: ValueTypes['IssueCategory_bool_exp'] | Variable<any, string>;
  };
  /** aggregate var_pop on columns */
  ['IssueCategory_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate var_samp on columns */
  ['IssueCategory_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate variance on columns */
  ['IssueCategory_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "Object" */
  ['Object']: AliasType<{
    /** An object relationship */
    application?: ValueTypes['Application'];
    applicationId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "Object" */
  ['Object_aggregate']: AliasType<{
    aggregate?: ValueTypes['Object_aggregate_fields'];
    nodes?: ValueTypes['Object'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "Object" */
  ['Object_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?:
          | Array<ValueTypes['Object_select_column']>
          | undefined
          | null
          | Variable<any, string>;
        distinct?: boolean | undefined | null | Variable<any, string>;
      },
      boolean | `@${string}`,
    ];
    max?: ValueTypes['Object_max_fields'];
    min?: ValueTypes['Object_min_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "Object". All fields are combined with a logical 'AND'. */
  ['Object_bool_exp']: {
    _and?:
      | Array<ValueTypes['Object_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    _not?:
      | ValueTypes['Object_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    _or?:
      | Array<ValueTypes['Object_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    application?:
      | ValueTypes['Application_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    applicationId?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    id?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    name?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** unique or primary key constraints on table "Object" */
  ['Object_constraint']: Object_constraint;
  /** input type for inserting data into table "Object" */
  ['Object_insert_input']: {
    application?:
      | ValueTypes['Application_obj_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
    applicationId?: string | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
  };
  /** aggregate max on columns */
  ['Object_max_fields']: AliasType<{
    applicationId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['Object_min_fields']: AliasType<{
    applicationId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "Object" */
  ['Object_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['Object'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "Object" */
  ['Object_on_conflict']: {
    constraint: ValueTypes['Object_constraint'] | Variable<any, string>;
    update_columns:
      | Array<ValueTypes['Object_update_column']>
      | Variable<any, string>;
    where?:
      | ValueTypes['Object_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Ordering options when selecting data from "Object". */
  ['Object_order_by']: {
    application?:
      | ValueTypes['Application_order_by']
      | undefined
      | null
      | Variable<any, string>;
    applicationId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    name?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
  };
  /** primary key columns input for table: Object */
  ['Object_pk_columns_input']: {
    id: ValueTypes['uuid'] | Variable<any, string>;
  };
  /** select columns of table "Object" */
  ['Object_select_column']: Object_select_column;
  /** input type for updating data in table "Object" */
  ['Object_set_input']: {
    applicationId?: string | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
  };
  /** Streaming cursor of the table "Object" */
  ['Object_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value:
      | ValueTypes['Object_stream_cursor_value_input']
      | Variable<any, string>;
    /** cursor ordering */
    ordering?:
      | ValueTypes['cursor_ordering']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Initial value of the column from where the streaming should start */
  ['Object_stream_cursor_value_input']: {
    applicationId?: string | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
  };
  /** update columns of table "Object" */
  ['Object_update_column']: Object_update_column;
  ['Object_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ValueTypes['Object_set_input']
      | undefined
      | null
      | Variable<any, string>;
    /** filter the rows which have to be updated */
    where: ValueTypes['Object_bool_exp'] | Variable<any, string>;
  };
  /** columns and relationships of "Organization" */
  ['Organization']: AliasType<{
    address?: boolean | `@${string}`;
    city?: boolean | `@${string}`;
    country?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    domain?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    industry?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    postalCode?: boolean | `@${string}`;
    state?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    type?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    websiteUrl?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "Organization" */
  ['Organization_aggregate']: AliasType<{
    aggregate?: ValueTypes['Organization_aggregate_fields'];
    nodes?: ValueTypes['Organization'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "Organization" */
  ['Organization_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?:
          | Array<ValueTypes['Organization_select_column']>
          | undefined
          | null
          | Variable<any, string>;
        distinct?: boolean | undefined | null | Variable<any, string>;
      },
      boolean | `@${string}`,
    ];
    max?: ValueTypes['Organization_max_fields'];
    min?: ValueTypes['Organization_min_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "Organization". All fields are combined with a logical 'AND'. */
  ['Organization_bool_exp']: {
    _and?:
      | Array<ValueTypes['Organization_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    _not?:
      | ValueTypes['Organization_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    _or?:
      | Array<ValueTypes['Organization_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    address?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    city?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    country?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    createdAt?:
      | ValueTypes['timestamp_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    domain?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    id?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    industry?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    name?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    postalCode?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    state?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    type?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamp_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    websiteUrl?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** unique or primary key constraints on table "Organization" */
  ['Organization_constraint']: Organization_constraint;
  /** input type for inserting data into table "Organization" */
  ['Organization_insert_input']: {
    address?: string | undefined | null | Variable<any, string>;
    city?: string | undefined | null | Variable<any, string>;
    country?: string | undefined | null | Variable<any, string>;
    createdAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
    domain?: string | undefined | null | Variable<any, string>;
    id?: string | undefined | null | Variable<any, string>;
    industry?: string | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    postalCode?: string | undefined | null | Variable<any, string>;
    state?: string | undefined | null | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    type?: string | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
    websiteUrl?: string | undefined | null | Variable<any, string>;
  };
  /** aggregate max on columns */
  ['Organization_max_fields']: AliasType<{
    address?: boolean | `@${string}`;
    city?: boolean | `@${string}`;
    country?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    domain?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    industry?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    postalCode?: boolean | `@${string}`;
    state?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    type?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    websiteUrl?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['Organization_min_fields']: AliasType<{
    address?: boolean | `@${string}`;
    city?: boolean | `@${string}`;
    country?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    domain?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    industry?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    postalCode?: boolean | `@${string}`;
    state?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    type?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    websiteUrl?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "Organization" */
  ['Organization_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['Organization'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "Organization" */
  ['Organization_on_conflict']: {
    constraint: ValueTypes['Organization_constraint'] | Variable<any, string>;
    update_columns:
      | Array<ValueTypes['Organization_update_column']>
      | Variable<any, string>;
    where?:
      | ValueTypes['Organization_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Ordering options when selecting data from "Organization". */
  ['Organization_order_by']: {
    address?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    city?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    country?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    createdAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    domain?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    industry?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    name?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    postalCode?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    state?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    tenantId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    type?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    websiteUrl?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** primary key columns input for table: Organization */
  ['Organization_pk_columns_input']: {
    id: string | Variable<any, string>;
  };
  /** select columns of table "Organization" */
  ['Organization_select_column']: Organization_select_column;
  /** input type for updating data in table "Organization" */
  ['Organization_set_input']: {
    address?: string | undefined | null | Variable<any, string>;
    city?: string | undefined | null | Variable<any, string>;
    country?: string | undefined | null | Variable<any, string>;
    createdAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
    domain?: string | undefined | null | Variable<any, string>;
    id?: string | undefined | null | Variable<any, string>;
    industry?: string | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    postalCode?: string | undefined | null | Variable<any, string>;
    state?: string | undefined | null | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    type?: string | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
    websiteUrl?: string | undefined | null | Variable<any, string>;
  };
  /** Streaming cursor of the table "Organization" */
  ['Organization_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value:
      | ValueTypes['Organization_stream_cursor_value_input']
      | Variable<any, string>;
    /** cursor ordering */
    ordering?:
      | ValueTypes['cursor_ordering']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Initial value of the column from where the streaming should start */
  ['Organization_stream_cursor_value_input']: {
    address?: string | undefined | null | Variable<any, string>;
    city?: string | undefined | null | Variable<any, string>;
    country?: string | undefined | null | Variable<any, string>;
    createdAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
    domain?: string | undefined | null | Variable<any, string>;
    id?: string | undefined | null | Variable<any, string>;
    industry?: string | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    postalCode?: string | undefined | null | Variable<any, string>;
    state?: string | undefined | null | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    type?: string | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
    websiteUrl?: string | undefined | null | Variable<any, string>;
  };
  /** update columns of table "Organization" */
  ['Organization_update_column']: Organization_update_column;
  ['Organization_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ValueTypes['Organization_set_input']
      | undefined
      | null
      | Variable<any, string>;
    /** filter the rows which have to be updated */
    where: ValueTypes['Organization_bool_exp'] | Variable<any, string>;
  };
  /** columns and relationships of "Package" */
  ['Package']: AliasType<{
    applications?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['PackageApplication_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['PackageApplication_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['PackageApplication_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['PackageApplication'],
    ];
    applications_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['PackageApplication_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['PackageApplication_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['PackageApplication_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['PackageApplication_aggregate'],
    ];
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    objects?: boolean | `@${string}`;
    price?: boolean | `@${string}`;
    roles?: boolean | `@${string}`;
    tenants?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['TenantPackage_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['TenantPackage_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['TenantPackage_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['TenantPackage'],
    ];
    tenants_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['TenantPackage_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['TenantPackage_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['TenantPackage_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['TenantPackage_aggregate'],
    ];
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "PackageApplication" */
  ['PackageApplication']: AliasType<{
    /** An object relationship */
    application?: ValueTypes['Application'];
    applicationId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    /** An object relationship */
    package?: ValueTypes['Package'];
    packageId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "PackageApplication" */
  ['PackageApplication_aggregate']: AliasType<{
    aggregate?: ValueTypes['PackageApplication_aggregate_fields'];
    nodes?: ValueTypes['PackageApplication'];
    __typename?: boolean | `@${string}`;
  }>;
  ['PackageApplication_aggregate_bool_exp']: {
    count?:
      | ValueTypes['PackageApplication_aggregate_bool_exp_count']
      | undefined
      | null
      | Variable<any, string>;
  };
  ['PackageApplication_aggregate_bool_exp_count']: {
    arguments?:
      | Array<ValueTypes['PackageApplication_select_column']>
      | undefined
      | null
      | Variable<any, string>;
    distinct?: boolean | undefined | null | Variable<any, string>;
    filter?:
      | ValueTypes['PackageApplication_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    predicate: ValueTypes['Int_comparison_exp'] | Variable<any, string>;
  };
  /** aggregate fields of "PackageApplication" */
  ['PackageApplication_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?:
          | Array<ValueTypes['PackageApplication_select_column']>
          | undefined
          | null
          | Variable<any, string>;
        distinct?: boolean | undefined | null | Variable<any, string>;
      },
      boolean | `@${string}`,
    ];
    max?: ValueTypes['PackageApplication_max_fields'];
    min?: ValueTypes['PackageApplication_min_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** order by aggregate values of table "PackageApplication" */
  ['PackageApplication_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    max?:
      | ValueTypes['PackageApplication_max_order_by']
      | undefined
      | null
      | Variable<any, string>;
    min?:
      | ValueTypes['PackageApplication_min_order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** input type for inserting array relation for remote table "PackageApplication" */
  ['PackageApplication_arr_rel_insert_input']: {
    data:
      | Array<ValueTypes['PackageApplication_insert_input']>
      | Variable<any, string>;
    /** upsert condition */
    on_conflict?:
      | ValueTypes['PackageApplication_on_conflict']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Boolean expression to filter rows from the table "PackageApplication". All fields are combined with a logical 'AND'. */
  ['PackageApplication_bool_exp']: {
    _and?:
      | Array<ValueTypes['PackageApplication_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    _not?:
      | ValueTypes['PackageApplication_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    _or?:
      | Array<ValueTypes['PackageApplication_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    application?:
      | ValueTypes['Application_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    applicationId?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    id?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    package?:
      | ValueTypes['Package_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    packageId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** unique or primary key constraints on table "PackageApplication" */
  ['PackageApplication_constraint']: PackageApplication_constraint;
  /** input type for inserting data into table "PackageApplication" */
  ['PackageApplication_insert_input']: {
    application?:
      | ValueTypes['Application_obj_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
    applicationId?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    package?:
      | ValueTypes['Package_obj_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
    packageId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** aggregate max on columns */
  ['PackageApplication_max_fields']: AliasType<{
    applicationId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    packageId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by max() on columns of table "PackageApplication" */
  ['PackageApplication_max_order_by']: {
    applicationId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    packageId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate min on columns */
  ['PackageApplication_min_fields']: AliasType<{
    applicationId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    packageId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by min() on columns of table "PackageApplication" */
  ['PackageApplication_min_order_by']: {
    applicationId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    packageId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** response of any mutation on the table "PackageApplication" */
  ['PackageApplication_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['PackageApplication'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "PackageApplication" */
  ['PackageApplication_on_conflict']: {
    constraint:
      | ValueTypes['PackageApplication_constraint']
      | Variable<any, string>;
    update_columns:
      | Array<ValueTypes['PackageApplication_update_column']>
      | Variable<any, string>;
    where?:
      | ValueTypes['PackageApplication_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Ordering options when selecting data from "PackageApplication". */
  ['PackageApplication_order_by']: {
    application?:
      | ValueTypes['Application_order_by']
      | undefined
      | null
      | Variable<any, string>;
    applicationId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    package?:
      | ValueTypes['Package_order_by']
      | undefined
      | null
      | Variable<any, string>;
    packageId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** primary key columns input for table: PackageApplication */
  ['PackageApplication_pk_columns_input']: {
    id: ValueTypes['uuid'] | Variable<any, string>;
  };
  /** select columns of table "PackageApplication" */
  ['PackageApplication_select_column']: PackageApplication_select_column;
  /** input type for updating data in table "PackageApplication" */
  ['PackageApplication_set_input']: {
    applicationId?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    packageId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** Streaming cursor of the table "PackageApplication" */
  ['PackageApplication_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value:
      | ValueTypes['PackageApplication_stream_cursor_value_input']
      | Variable<any, string>;
    /** cursor ordering */
    ordering?:
      | ValueTypes['cursor_ordering']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Initial value of the column from where the streaming should start */
  ['PackageApplication_stream_cursor_value_input']: {
    applicationId?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    packageId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** update columns of table "PackageApplication" */
  ['PackageApplication_update_column']: PackageApplication_update_column;
  ['PackageApplication_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ValueTypes['PackageApplication_set_input']
      | undefined
      | null
      | Variable<any, string>;
    /** filter the rows which have to be updated */
    where: ValueTypes['PackageApplication_bool_exp'] | Variable<any, string>;
  };
  /** aggregated selection of "Package" */
  ['Package_aggregate']: AliasType<{
    aggregate?: ValueTypes['Package_aggregate_fields'];
    nodes?: ValueTypes['Package'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "Package" */
  ['Package_aggregate_fields']: AliasType<{
    avg?: ValueTypes['Package_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ValueTypes['Package_select_column']>
          | undefined
          | null
          | Variable<any, string>;
        distinct?: boolean | undefined | null | Variable<any, string>;
      },
      boolean | `@${string}`,
    ];
    max?: ValueTypes['Package_max_fields'];
    min?: ValueTypes['Package_min_fields'];
    stddev?: ValueTypes['Package_stddev_fields'];
    stddev_pop?: ValueTypes['Package_stddev_pop_fields'];
    stddev_samp?: ValueTypes['Package_stddev_samp_fields'];
    sum?: ValueTypes['Package_sum_fields'];
    var_pop?: ValueTypes['Package_var_pop_fields'];
    var_samp?: ValueTypes['Package_var_samp_fields'];
    variance?: ValueTypes['Package_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate avg on columns */
  ['Package_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "Package". All fields are combined with a logical 'AND'. */
  ['Package_bool_exp']: {
    _and?:
      | Array<ValueTypes['Package_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    _not?:
      | ValueTypes['Package_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    _or?:
      | Array<ValueTypes['Package_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    applications?:
      | ValueTypes['PackageApplication_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    applications_aggregate?:
      | ValueTypes['PackageApplication_aggregate_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['bigint_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    id?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    name?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    objects?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    price?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    roles?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    tenants?:
      | ValueTypes['TenantPackage_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    tenants_aggregate?:
      | ValueTypes['TenantPackage_aggregate_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** unique or primary key constraints on table "Package" */
  ['Package_constraint']: Package_constraint;
  /** input type for incrementing numeric columns in table "Package" */
  ['Package_inc_input']: {
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
  };
  /** input type for inserting data into table "Package" */
  ['Package_insert_input']: {
    applications?:
      | ValueTypes['PackageApplication_arr_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    objects?: string | undefined | null | Variable<any, string>;
    price?: string | undefined | null | Variable<any, string>;
    roles?: string | undefined | null | Variable<any, string>;
    tenants?:
      | ValueTypes['TenantPackage_arr_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate max on columns */
  ['Package_max_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    objects?: boolean | `@${string}`;
    price?: boolean | `@${string}`;
    roles?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['Package_min_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    objects?: boolean | `@${string}`;
    price?: boolean | `@${string}`;
    roles?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "Package" */
  ['Package_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['Package'];
    __typename?: boolean | `@${string}`;
  }>;
  /** input type for inserting object relation for remote table "Package" */
  ['Package_obj_rel_insert_input']: {
    data: ValueTypes['Package_insert_input'] | Variable<any, string>;
    /** upsert condition */
    on_conflict?:
      | ValueTypes['Package_on_conflict']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** on_conflict condition type for table "Package" */
  ['Package_on_conflict']: {
    constraint: ValueTypes['Package_constraint'] | Variable<any, string>;
    update_columns:
      | Array<ValueTypes['Package_update_column']>
      | Variable<any, string>;
    where?:
      | ValueTypes['Package_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Ordering options when selecting data from "Package". */
  ['Package_order_by']: {
    applications_aggregate?:
      | ValueTypes['PackageApplication_aggregate_order_by']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    name?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    objects?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    price?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    roles?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    tenants_aggregate?:
      | ValueTypes['TenantPackage_aggregate_order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** primary key columns input for table: Package */
  ['Package_pk_columns_input']: {
    id: ValueTypes['uuid'] | Variable<any, string>;
  };
  /** select columns of table "Package" */
  ['Package_select_column']: Package_select_column;
  /** input type for updating data in table "Package" */
  ['Package_set_input']: {
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    objects?: string | undefined | null | Variable<any, string>;
    price?: string | undefined | null | Variable<any, string>;
    roles?: string | undefined | null | Variable<any, string>;
  };
  /** aggregate stddev on columns */
  ['Package_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_pop on columns */
  ['Package_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_samp on columns */
  ['Package_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Streaming cursor of the table "Package" */
  ['Package_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value:
      | ValueTypes['Package_stream_cursor_value_input']
      | Variable<any, string>;
    /** cursor ordering */
    ordering?:
      | ValueTypes['cursor_ordering']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Initial value of the column from where the streaming should start */
  ['Package_stream_cursor_value_input']: {
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    objects?: string | undefined | null | Variable<any, string>;
    price?: string | undefined | null | Variable<any, string>;
    roles?: string | undefined | null | Variable<any, string>;
  };
  /** aggregate sum on columns */
  ['Package_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** update columns of table "Package" */
  ['Package_update_column']: Package_update_column;
  ['Package_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?:
      | ValueTypes['Package_inc_input']
      | undefined
      | null
      | Variable<any, string>;
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ValueTypes['Package_set_input']
      | undefined
      | null
      | Variable<any, string>;
    /** filter the rows which have to be updated */
    where: ValueTypes['Package_bool_exp'] | Variable<any, string>;
  };
  /** aggregate var_pop on columns */
  ['Package_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate var_samp on columns */
  ['Package_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate variance on columns */
  ['Package_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "Product" */
  ['Product']: AliasType<{
    code?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    metric?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    productCategories?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['ProductCategory_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['ProductCategory_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['ProductCategory_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ProductCategory'],
    ];
    productCategories_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['ProductCategory_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['ProductCategory_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['ProductCategory_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ProductCategory_aggregate'],
    ];
    productVersions?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['ProductVersion_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['ProductVersion_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['ProductVersion_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ProductVersion'],
    ];
    productVersions_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['ProductVersion_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['ProductVersion_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['ProductVersion_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ProductVersion_aggregate'],
    ];
    status?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    version?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "ProductCategory" */
  ['ProductCategory']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    /** An object relationship */
    product?: ValueTypes['Product'];
    productId?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "ProductCategory" */
  ['ProductCategory_aggregate']: AliasType<{
    aggregate?: ValueTypes['ProductCategory_aggregate_fields'];
    nodes?: ValueTypes['ProductCategory'];
    __typename?: boolean | `@${string}`;
  }>;
  ['ProductCategory_aggregate_bool_exp']: {
    count?:
      | ValueTypes['ProductCategory_aggregate_bool_exp_count']
      | undefined
      | null
      | Variable<any, string>;
  };
  ['ProductCategory_aggregate_bool_exp_count']: {
    arguments?:
      | Array<ValueTypes['ProductCategory_select_column']>
      | undefined
      | null
      | Variable<any, string>;
    distinct?: boolean | undefined | null | Variable<any, string>;
    filter?:
      | ValueTypes['ProductCategory_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    predicate: ValueTypes['Int_comparison_exp'] | Variable<any, string>;
  };
  /** aggregate fields of "ProductCategory" */
  ['ProductCategory_aggregate_fields']: AliasType<{
    avg?: ValueTypes['ProductCategory_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ValueTypes['ProductCategory_select_column']>
          | undefined
          | null
          | Variable<any, string>;
        distinct?: boolean | undefined | null | Variable<any, string>;
      },
      boolean | `@${string}`,
    ];
    max?: ValueTypes['ProductCategory_max_fields'];
    min?: ValueTypes['ProductCategory_min_fields'];
    stddev?: ValueTypes['ProductCategory_stddev_fields'];
    stddev_pop?: ValueTypes['ProductCategory_stddev_pop_fields'];
    stddev_samp?: ValueTypes['ProductCategory_stddev_samp_fields'];
    sum?: ValueTypes['ProductCategory_sum_fields'];
    var_pop?: ValueTypes['ProductCategory_var_pop_fields'];
    var_samp?: ValueTypes['ProductCategory_var_samp_fields'];
    variance?: ValueTypes['ProductCategory_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** order by aggregate values of table "ProductCategory" */
  ['ProductCategory_aggregate_order_by']: {
    avg?:
      | ValueTypes['ProductCategory_avg_order_by']
      | undefined
      | null
      | Variable<any, string>;
    count?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    max?:
      | ValueTypes['ProductCategory_max_order_by']
      | undefined
      | null
      | Variable<any, string>;
    min?:
      | ValueTypes['ProductCategory_min_order_by']
      | undefined
      | null
      | Variable<any, string>;
    stddev?:
      | ValueTypes['ProductCategory_stddev_order_by']
      | undefined
      | null
      | Variable<any, string>;
    stddev_pop?:
      | ValueTypes['ProductCategory_stddev_pop_order_by']
      | undefined
      | null
      | Variable<any, string>;
    stddev_samp?:
      | ValueTypes['ProductCategory_stddev_samp_order_by']
      | undefined
      | null
      | Variable<any, string>;
    sum?:
      | ValueTypes['ProductCategory_sum_order_by']
      | undefined
      | null
      | Variable<any, string>;
    var_pop?:
      | ValueTypes['ProductCategory_var_pop_order_by']
      | undefined
      | null
      | Variable<any, string>;
    var_samp?:
      | ValueTypes['ProductCategory_var_samp_order_by']
      | undefined
      | null
      | Variable<any, string>;
    variance?:
      | ValueTypes['ProductCategory_variance_order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** input type for inserting array relation for remote table "ProductCategory" */
  ['ProductCategory_arr_rel_insert_input']: {
    data:
      | Array<ValueTypes['ProductCategory_insert_input']>
      | Variable<any, string>;
    /** upsert condition */
    on_conflict?:
      | ValueTypes['ProductCategory_on_conflict']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate avg on columns */
  ['ProductCategory_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by avg() on columns of table "ProductCategory" */
  ['ProductCategory_avg_order_by']: {
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Boolean expression to filter rows from the table "ProductCategory". All fields are combined with a logical 'AND'. */
  ['ProductCategory_bool_exp']: {
    _and?:
      | Array<ValueTypes['ProductCategory_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    _not?:
      | ValueTypes['ProductCategory_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    _or?:
      | Array<ValueTypes['ProductCategory_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    createdAt?:
      | ValueTypes['timestamptz_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    createdById?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['bigint_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    id?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    name?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    product?:
      | ValueTypes['Product_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    productId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** unique or primary key constraints on table "ProductCategory" */
  ['ProductCategory_constraint']: ProductCategory_constraint;
  /** input type for incrementing numeric columns in table "ProductCategory" */
  ['ProductCategory_inc_input']: {
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
  };
  /** input type for inserting data into table "ProductCategory" */
  ['ProductCategory_insert_input']: {
    createdAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    product?:
      | ValueTypes['Product_obj_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
    productId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** aggregate max on columns */
  ['ProductCategory_max_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    productId?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by max() on columns of table "ProductCategory" */
  ['ProductCategory_max_order_by']: {
    createdAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    createdById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    name?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    productId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate min on columns */
  ['ProductCategory_min_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    productId?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by min() on columns of table "ProductCategory" */
  ['ProductCategory_min_order_by']: {
    createdAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    createdById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    name?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    productId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** response of any mutation on the table "ProductCategory" */
  ['ProductCategory_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['ProductCategory'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "ProductCategory" */
  ['ProductCategory_on_conflict']: {
    constraint:
      | ValueTypes['ProductCategory_constraint']
      | Variable<any, string>;
    update_columns:
      | Array<ValueTypes['ProductCategory_update_column']>
      | Variable<any, string>;
    where?:
      | ValueTypes['ProductCategory_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Ordering options when selecting data from "ProductCategory". */
  ['ProductCategory_order_by']: {
    createdAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    createdById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    name?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    product?:
      | ValueTypes['Product_order_by']
      | undefined
      | null
      | Variable<any, string>;
    productId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    status?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    tenantId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** primary key columns input for table: ProductCategory */
  ['ProductCategory_pk_columns_input']: {
    id: ValueTypes['uuid'] | Variable<any, string>;
  };
  /** select columns of table "ProductCategory" */
  ['ProductCategory_select_column']: ProductCategory_select_column;
  /** input type for updating data in table "ProductCategory" */
  ['ProductCategory_set_input']: {
    createdAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    productId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** aggregate stddev on columns */
  ['ProductCategory_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by stddev() on columns of table "ProductCategory" */
  ['ProductCategory_stddev_order_by']: {
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate stddev_pop on columns */
  ['ProductCategory_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by stddev_pop() on columns of table "ProductCategory" */
  ['ProductCategory_stddev_pop_order_by']: {
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate stddev_samp on columns */
  ['ProductCategory_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by stddev_samp() on columns of table "ProductCategory" */
  ['ProductCategory_stddev_samp_order_by']: {
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Streaming cursor of the table "ProductCategory" */
  ['ProductCategory_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value:
      | ValueTypes['ProductCategory_stream_cursor_value_input']
      | Variable<any, string>;
    /** cursor ordering */
    ordering?:
      | ValueTypes['cursor_ordering']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Initial value of the column from where the streaming should start */
  ['ProductCategory_stream_cursor_value_input']: {
    createdAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    productId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** aggregate sum on columns */
  ['ProductCategory_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by sum() on columns of table "ProductCategory" */
  ['ProductCategory_sum_order_by']: {
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** update columns of table "ProductCategory" */
  ['ProductCategory_update_column']: ProductCategory_update_column;
  ['ProductCategory_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?:
      | ValueTypes['ProductCategory_inc_input']
      | undefined
      | null
      | Variable<any, string>;
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ValueTypes['ProductCategory_set_input']
      | undefined
      | null
      | Variable<any, string>;
    /** filter the rows which have to be updated */
    where: ValueTypes['ProductCategory_bool_exp'] | Variable<any, string>;
  };
  /** aggregate var_pop on columns */
  ['ProductCategory_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by var_pop() on columns of table "ProductCategory" */
  ['ProductCategory_var_pop_order_by']: {
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate var_samp on columns */
  ['ProductCategory_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by var_samp() on columns of table "ProductCategory" */
  ['ProductCategory_var_samp_order_by']: {
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate variance on columns */
  ['ProductCategory_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by variance() on columns of table "ProductCategory" */
  ['ProductCategory_variance_order_by']: {
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** columns and relationships of "ProductVersion" */
  ['ProductVersion']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    /** An object relationship */
    product?: ValueTypes['Product'];
    productId?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    version?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "ProductVersion" */
  ['ProductVersion_aggregate']: AliasType<{
    aggregate?: ValueTypes['ProductVersion_aggregate_fields'];
    nodes?: ValueTypes['ProductVersion'];
    __typename?: boolean | `@${string}`;
  }>;
  ['ProductVersion_aggregate_bool_exp']: {
    count?:
      | ValueTypes['ProductVersion_aggregate_bool_exp_count']
      | undefined
      | null
      | Variable<any, string>;
  };
  ['ProductVersion_aggregate_bool_exp_count']: {
    arguments?:
      | Array<ValueTypes['ProductVersion_select_column']>
      | undefined
      | null
      | Variable<any, string>;
    distinct?: boolean | undefined | null | Variable<any, string>;
    filter?:
      | ValueTypes['ProductVersion_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    predicate: ValueTypes['Int_comparison_exp'] | Variable<any, string>;
  };
  /** aggregate fields of "ProductVersion" */
  ['ProductVersion_aggregate_fields']: AliasType<{
    avg?: ValueTypes['ProductVersion_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ValueTypes['ProductVersion_select_column']>
          | undefined
          | null
          | Variable<any, string>;
        distinct?: boolean | undefined | null | Variable<any, string>;
      },
      boolean | `@${string}`,
    ];
    max?: ValueTypes['ProductVersion_max_fields'];
    min?: ValueTypes['ProductVersion_min_fields'];
    stddev?: ValueTypes['ProductVersion_stddev_fields'];
    stddev_pop?: ValueTypes['ProductVersion_stddev_pop_fields'];
    stddev_samp?: ValueTypes['ProductVersion_stddev_samp_fields'];
    sum?: ValueTypes['ProductVersion_sum_fields'];
    var_pop?: ValueTypes['ProductVersion_var_pop_fields'];
    var_samp?: ValueTypes['ProductVersion_var_samp_fields'];
    variance?: ValueTypes['ProductVersion_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** order by aggregate values of table "ProductVersion" */
  ['ProductVersion_aggregate_order_by']: {
    avg?:
      | ValueTypes['ProductVersion_avg_order_by']
      | undefined
      | null
      | Variable<any, string>;
    count?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    max?:
      | ValueTypes['ProductVersion_max_order_by']
      | undefined
      | null
      | Variable<any, string>;
    min?:
      | ValueTypes['ProductVersion_min_order_by']
      | undefined
      | null
      | Variable<any, string>;
    stddev?:
      | ValueTypes['ProductVersion_stddev_order_by']
      | undefined
      | null
      | Variable<any, string>;
    stddev_pop?:
      | ValueTypes['ProductVersion_stddev_pop_order_by']
      | undefined
      | null
      | Variable<any, string>;
    stddev_samp?:
      | ValueTypes['ProductVersion_stddev_samp_order_by']
      | undefined
      | null
      | Variable<any, string>;
    sum?:
      | ValueTypes['ProductVersion_sum_order_by']
      | undefined
      | null
      | Variable<any, string>;
    var_pop?:
      | ValueTypes['ProductVersion_var_pop_order_by']
      | undefined
      | null
      | Variable<any, string>;
    var_samp?:
      | ValueTypes['ProductVersion_var_samp_order_by']
      | undefined
      | null
      | Variable<any, string>;
    variance?:
      | ValueTypes['ProductVersion_variance_order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** input type for inserting array relation for remote table "ProductVersion" */
  ['ProductVersion_arr_rel_insert_input']: {
    data:
      | Array<ValueTypes['ProductVersion_insert_input']>
      | Variable<any, string>;
    /** upsert condition */
    on_conflict?:
      | ValueTypes['ProductVersion_on_conflict']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate avg on columns */
  ['ProductVersion_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by avg() on columns of table "ProductVersion" */
  ['ProductVersion_avg_order_by']: {
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Boolean expression to filter rows from the table "ProductVersion". All fields are combined with a logical 'AND'. */
  ['ProductVersion_bool_exp']: {
    _and?:
      | Array<ValueTypes['ProductVersion_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    _not?:
      | ValueTypes['ProductVersion_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    _or?:
      | Array<ValueTypes['ProductVersion_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    createdAt?:
      | ValueTypes['timestamptz_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    createdById?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['bigint_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    id?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    name?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    product?:
      | ValueTypes['Product_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    productId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    version?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** unique or primary key constraints on table "ProductVersion" */
  ['ProductVersion_constraint']: ProductVersion_constraint;
  /** input type for incrementing numeric columns in table "ProductVersion" */
  ['ProductVersion_inc_input']: {
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
  };
  /** input type for inserting data into table "ProductVersion" */
  ['ProductVersion_insert_input']: {
    createdAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    product?:
      | ValueTypes['Product_obj_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
    productId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    version?: string | undefined | null | Variable<any, string>;
  };
  /** aggregate max on columns */
  ['ProductVersion_max_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    productId?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    version?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by max() on columns of table "ProductVersion" */
  ['ProductVersion_max_order_by']: {
    createdAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    createdById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    name?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    productId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    version?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
  };
  /** aggregate min on columns */
  ['ProductVersion_min_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    productId?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    version?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by min() on columns of table "ProductVersion" */
  ['ProductVersion_min_order_by']: {
    createdAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    createdById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    name?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    productId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    version?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
  };
  /** response of any mutation on the table "ProductVersion" */
  ['ProductVersion_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['ProductVersion'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "ProductVersion" */
  ['ProductVersion_on_conflict']: {
    constraint: ValueTypes['ProductVersion_constraint'] | Variable<any, string>;
    update_columns:
      | Array<ValueTypes['ProductVersion_update_column']>
      | Variable<any, string>;
    where?:
      | ValueTypes['ProductVersion_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Ordering options when selecting data from "ProductVersion". */
  ['ProductVersion_order_by']: {
    createdAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    createdById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    name?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    product?:
      | ValueTypes['Product_order_by']
      | undefined
      | null
      | Variable<any, string>;
    productId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    status?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    tenantId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    version?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
  };
  /** primary key columns input for table: ProductVersion */
  ['ProductVersion_pk_columns_input']: {
    id: ValueTypes['uuid'] | Variable<any, string>;
  };
  /** select columns of table "ProductVersion" */
  ['ProductVersion_select_column']: ProductVersion_select_column;
  /** input type for updating data in table "ProductVersion" */
  ['ProductVersion_set_input']: {
    createdAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    productId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    version?: string | undefined | null | Variable<any, string>;
  };
  /** aggregate stddev on columns */
  ['ProductVersion_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by stddev() on columns of table "ProductVersion" */
  ['ProductVersion_stddev_order_by']: {
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate stddev_pop on columns */
  ['ProductVersion_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by stddev_pop() on columns of table "ProductVersion" */
  ['ProductVersion_stddev_pop_order_by']: {
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate stddev_samp on columns */
  ['ProductVersion_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by stddev_samp() on columns of table "ProductVersion" */
  ['ProductVersion_stddev_samp_order_by']: {
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Streaming cursor of the table "ProductVersion" */
  ['ProductVersion_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value:
      | ValueTypes['ProductVersion_stream_cursor_value_input']
      | Variable<any, string>;
    /** cursor ordering */
    ordering?:
      | ValueTypes['cursor_ordering']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Initial value of the column from where the streaming should start */
  ['ProductVersion_stream_cursor_value_input']: {
    createdAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    productId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    version?: string | undefined | null | Variable<any, string>;
  };
  /** aggregate sum on columns */
  ['ProductVersion_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by sum() on columns of table "ProductVersion" */
  ['ProductVersion_sum_order_by']: {
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** update columns of table "ProductVersion" */
  ['ProductVersion_update_column']: ProductVersion_update_column;
  ['ProductVersion_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?:
      | ValueTypes['ProductVersion_inc_input']
      | undefined
      | null
      | Variable<any, string>;
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ValueTypes['ProductVersion_set_input']
      | undefined
      | null
      | Variable<any, string>;
    /** filter the rows which have to be updated */
    where: ValueTypes['ProductVersion_bool_exp'] | Variable<any, string>;
  };
  /** aggregate var_pop on columns */
  ['ProductVersion_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by var_pop() on columns of table "ProductVersion" */
  ['ProductVersion_var_pop_order_by']: {
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate var_samp on columns */
  ['ProductVersion_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by var_samp() on columns of table "ProductVersion" */
  ['ProductVersion_var_samp_order_by']: {
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate variance on columns */
  ['ProductVersion_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by variance() on columns of table "ProductVersion" */
  ['ProductVersion_variance_order_by']: {
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregated selection of "Product" */
  ['Product_aggregate']: AliasType<{
    aggregate?: ValueTypes['Product_aggregate_fields'];
    nodes?: ValueTypes['Product'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "Product" */
  ['Product_aggregate_fields']: AliasType<{
    avg?: ValueTypes['Product_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ValueTypes['Product_select_column']>
          | undefined
          | null
          | Variable<any, string>;
        distinct?: boolean | undefined | null | Variable<any, string>;
      },
      boolean | `@${string}`,
    ];
    max?: ValueTypes['Product_max_fields'];
    min?: ValueTypes['Product_min_fields'];
    stddev?: ValueTypes['Product_stddev_fields'];
    stddev_pop?: ValueTypes['Product_stddev_pop_fields'];
    stddev_samp?: ValueTypes['Product_stddev_samp_fields'];
    sum?: ValueTypes['Product_sum_fields'];
    var_pop?: ValueTypes['Product_var_pop_fields'];
    var_samp?: ValueTypes['Product_var_samp_fields'];
    variance?: ValueTypes['Product_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate avg on columns */
  ['Product_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "Product". All fields are combined with a logical 'AND'. */
  ['Product_bool_exp']: {
    _and?:
      | Array<ValueTypes['Product_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    _not?:
      | ValueTypes['Product_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    _or?:
      | Array<ValueTypes['Product_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    code?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    createdAt?:
      | ValueTypes['timestamp_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    createdById?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['bigint_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    id?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    metric?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    name?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    productCategories?:
      | ValueTypes['ProductCategory_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    productCategories_aggregate?:
      | ValueTypes['ProductCategory_aggregate_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    productVersions?:
      | ValueTypes['ProductVersion_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    productVersions_aggregate?:
      | ValueTypes['ProductVersion_aggregate_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    version?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** unique or primary key constraints on table "Product" */
  ['Product_constraint']: Product_constraint;
  /** input type for incrementing numeric columns in table "Product" */
  ['Product_inc_input']: {
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
  };
  /** input type for inserting data into table "Product" */
  ['Product_insert_input']: {
    code?: string | undefined | null | Variable<any, string>;
    createdAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    metric?: string | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    productCategories?:
      | ValueTypes['ProductCategory_arr_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
    productVersions?:
      | ValueTypes['ProductVersion_arr_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    version?: string | undefined | null | Variable<any, string>;
  };
  /** aggregate max on columns */
  ['Product_max_fields']: AliasType<{
    code?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    metric?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    version?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['Product_min_fields']: AliasType<{
    code?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    metric?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    version?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "Product" */
  ['Product_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['Product'];
    __typename?: boolean | `@${string}`;
  }>;
  /** input type for inserting object relation for remote table "Product" */
  ['Product_obj_rel_insert_input']: {
    data: ValueTypes['Product_insert_input'] | Variable<any, string>;
    /** upsert condition */
    on_conflict?:
      | ValueTypes['Product_on_conflict']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** on_conflict condition type for table "Product" */
  ['Product_on_conflict']: {
    constraint: ValueTypes['Product_constraint'] | Variable<any, string>;
    update_columns:
      | Array<ValueTypes['Product_update_column']>
      | Variable<any, string>;
    where?:
      | ValueTypes['Product_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Ordering options when selecting data from "Product". */
  ['Product_order_by']: {
    code?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    createdAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    createdById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    metric?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    name?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    productCategories_aggregate?:
      | ValueTypes['ProductCategory_aggregate_order_by']
      | undefined
      | null
      | Variable<any, string>;
    productVersions_aggregate?:
      | ValueTypes['ProductVersion_aggregate_order_by']
      | undefined
      | null
      | Variable<any, string>;
    status?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    tenantId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    version?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
  };
  /** primary key columns input for table: Product */
  ['Product_pk_columns_input']: {
    id: ValueTypes['uuid'] | Variable<any, string>;
  };
  /** select columns of table "Product" */
  ['Product_select_column']: Product_select_column;
  /** input type for updating data in table "Product" */
  ['Product_set_input']: {
    code?: string | undefined | null | Variable<any, string>;
    createdAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    metric?: string | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    version?: string | undefined | null | Variable<any, string>;
  };
  /** aggregate stddev on columns */
  ['Product_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_pop on columns */
  ['Product_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_samp on columns */
  ['Product_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Streaming cursor of the table "Product" */
  ['Product_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value:
      | ValueTypes['Product_stream_cursor_value_input']
      | Variable<any, string>;
    /** cursor ordering */
    ordering?:
      | ValueTypes['cursor_ordering']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Initial value of the column from where the streaming should start */
  ['Product_stream_cursor_value_input']: {
    code?: string | undefined | null | Variable<any, string>;
    createdAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    metric?: string | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamptz']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    version?: string | undefined | null | Variable<any, string>;
  };
  /** aggregate sum on columns */
  ['Product_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** update columns of table "Product" */
  ['Product_update_column']: Product_update_column;
  ['Product_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?:
      | ValueTypes['Product_inc_input']
      | undefined
      | null
      | Variable<any, string>;
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ValueTypes['Product_set_input']
      | undefined
      | null
      | Variable<any, string>;
    /** filter the rows which have to be updated */
    where: ValueTypes['Product_bool_exp'] | Variable<any, string>;
  };
  /** aggregate var_pop on columns */
  ['Product_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate var_samp on columns */
  ['Product_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate variance on columns */
  ['Product_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "Role" */
  ['Role']: AliasType<{
    /** An object relationship */
    application?: ValueTypes['Application'];
    applicationId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    roleGroups?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['GroupRole_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['GroupRole_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['GroupRole_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['GroupRole'],
    ];
    roleGroups_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['GroupRole_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['GroupRole_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['GroupRole_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['GroupRole_aggregate'],
    ];
    userRoles?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['UserRole_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['UserRole_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['UserRole_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserRole'],
    ];
    userRoles_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['UserRole_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['UserRole_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['UserRole_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserRole_aggregate'],
    ];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "Role" */
  ['Role_aggregate']: AliasType<{
    aggregate?: ValueTypes['Role_aggregate_fields'];
    nodes?: ValueTypes['Role'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "Role" */
  ['Role_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?:
          | Array<ValueTypes['Role_select_column']>
          | undefined
          | null
          | Variable<any, string>;
        distinct?: boolean | undefined | null | Variable<any, string>;
      },
      boolean | `@${string}`,
    ];
    max?: ValueTypes['Role_max_fields'];
    min?: ValueTypes['Role_min_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "Role". All fields are combined with a logical 'AND'. */
  ['Role_bool_exp']: {
    _and?:
      | Array<ValueTypes['Role_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    _not?:
      | ValueTypes['Role_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    _or?:
      | Array<ValueTypes['Role_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    application?:
      | ValueTypes['Application_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    applicationId?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    id?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    name?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    roleGroups?:
      | ValueTypes['GroupRole_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    roleGroups_aggregate?:
      | ValueTypes['GroupRole_aggregate_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    userRoles?:
      | ValueTypes['UserRole_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    userRoles_aggregate?:
      | ValueTypes['UserRole_aggregate_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** unique or primary key constraints on table "Role" */
  ['Role_constraint']: Role_constraint;
  /** input type for inserting data into table "Role" */
  ['Role_insert_input']: {
    application?:
      | ValueTypes['Application_obj_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
    applicationId?: string | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    roleGroups?:
      | ValueTypes['GroupRole_arr_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
    userRoles?:
      | ValueTypes['UserRole_arr_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate max on columns */
  ['Role_max_fields']: AliasType<{
    applicationId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['Role_min_fields']: AliasType<{
    applicationId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "Role" */
  ['Role_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['Role'];
    __typename?: boolean | `@${string}`;
  }>;
  /** input type for inserting object relation for remote table "Role" */
  ['Role_obj_rel_insert_input']: {
    data: ValueTypes['Role_insert_input'] | Variable<any, string>;
    /** upsert condition */
    on_conflict?:
      | ValueTypes['Role_on_conflict']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** on_conflict condition type for table "Role" */
  ['Role_on_conflict']: {
    constraint: ValueTypes['Role_constraint'] | Variable<any, string>;
    update_columns:
      | Array<ValueTypes['Role_update_column']>
      | Variable<any, string>;
    where?:
      | ValueTypes['Role_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Ordering options when selecting data from "Role". */
  ['Role_order_by']: {
    application?:
      | ValueTypes['Application_order_by']
      | undefined
      | null
      | Variable<any, string>;
    applicationId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    name?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    roleGroups_aggregate?:
      | ValueTypes['GroupRole_aggregate_order_by']
      | undefined
      | null
      | Variable<any, string>;
    userRoles_aggregate?:
      | ValueTypes['UserRole_aggregate_order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** primary key columns input for table: Role */
  ['Role_pk_columns_input']: {
    id: ValueTypes['uuid'] | Variable<any, string>;
  };
  /** select columns of table "Role" */
  ['Role_select_column']: Role_select_column;
  /** input type for updating data in table "Role" */
  ['Role_set_input']: {
    applicationId?: string | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
  };
  /** Streaming cursor of the table "Role" */
  ['Role_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value:
      | ValueTypes['Role_stream_cursor_value_input']
      | Variable<any, string>;
    /** cursor ordering */
    ordering?:
      | ValueTypes['cursor_ordering']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Initial value of the column from where the streaming should start */
  ['Role_stream_cursor_value_input']: {
    applicationId?: string | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
  };
  /** update columns of table "Role" */
  ['Role_update_column']: Role_update_column;
  ['Role_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ValueTypes['Role_set_input']
      | undefined
      | null
      | Variable<any, string>;
    /** filter the rows which have to be updated */
    where: ValueTypes['Role_bool_exp'] | Variable<any, string>;
  };
  /** columns and relationships of "Status" */
  ['Status']: AliasType<{
    value?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "Status" */
  ['Status_aggregate']: AliasType<{
    aggregate?: ValueTypes['Status_aggregate_fields'];
    nodes?: ValueTypes['Status'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "Status" */
  ['Status_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?:
          | Array<ValueTypes['Status_select_column']>
          | undefined
          | null
          | Variable<any, string>;
        distinct?: boolean | undefined | null | Variable<any, string>;
      },
      boolean | `@${string}`,
    ];
    max?: ValueTypes['Status_max_fields'];
    min?: ValueTypes['Status_min_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "Status". All fields are combined with a logical 'AND'. */
  ['Status_bool_exp']: {
    _and?:
      | Array<ValueTypes['Status_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    _not?:
      | ValueTypes['Status_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    _or?:
      | Array<ValueTypes['Status_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    value?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** unique or primary key constraints on table "Status" */
  ['Status_constraint']: Status_constraint;
  ['Status_enum']: Status_enum;
  /** Boolean expression to compare columns of type "Status_enum". All fields are combined with logical 'AND'. */
  ['Status_enum_comparison_exp']: {
    _eq?: ValueTypes['Status_enum'] | undefined | null | Variable<any, string>;
    _in?:
      | Array<ValueTypes['Status_enum']>
      | undefined
      | null
      | Variable<any, string>;
    _is_null?: boolean | undefined | null | Variable<any, string>;
    _neq?: ValueTypes['Status_enum'] | undefined | null | Variable<any, string>;
    _nin?:
      | Array<ValueTypes['Status_enum']>
      | undefined
      | null
      | Variable<any, string>;
  };
  /** input type for inserting data into table "Status" */
  ['Status_insert_input']: {
    value?: string | undefined | null | Variable<any, string>;
  };
  /** aggregate max on columns */
  ['Status_max_fields']: AliasType<{
    value?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['Status_min_fields']: AliasType<{
    value?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "Status" */
  ['Status_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['Status'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "Status" */
  ['Status_on_conflict']: {
    constraint: ValueTypes['Status_constraint'] | Variable<any, string>;
    update_columns:
      | Array<ValueTypes['Status_update_column']>
      | Variable<any, string>;
    where?:
      | ValueTypes['Status_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Ordering options when selecting data from "Status". */
  ['Status_order_by']: {
    value?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
  };
  /** primary key columns input for table: Status */
  ['Status_pk_columns_input']: {
    value: string | Variable<any, string>;
  };
  /** select columns of table "Status" */
  ['Status_select_column']: Status_select_column;
  /** input type for updating data in table "Status" */
  ['Status_set_input']: {
    value?: string | undefined | null | Variable<any, string>;
  };
  /** Streaming cursor of the table "Status" */
  ['Status_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value:
      | ValueTypes['Status_stream_cursor_value_input']
      | Variable<any, string>;
    /** cursor ordering */
    ordering?:
      | ValueTypes['cursor_ordering']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Initial value of the column from where the streaming should start */
  ['Status_stream_cursor_value_input']: {
    value?: string | undefined | null | Variable<any, string>;
  };
  /** update columns of table "Status" */
  ['Status_update_column']: Status_update_column;
  ['Status_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ValueTypes['Status_set_input']
      | undefined
      | null
      | Variable<any, string>;
    /** filter the rows which have to be updated */
    where: ValueTypes['Status_bool_exp'] | Variable<any, string>;
  };
  /** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
  ['String_comparison_exp']: {
    _eq?: string | undefined | null | Variable<any, string>;
    _gt?: string | undefined | null | Variable<any, string>;
    _gte?: string | undefined | null | Variable<any, string>;
    /** does the column match the given case-insensitive pattern */
    _ilike?: string | undefined | null | Variable<any, string>;
    _in?: Array<string> | undefined | null | Variable<any, string>;
    /** does the column match the given POSIX regular expression, case insensitive */
    _iregex?: string | undefined | null | Variable<any, string>;
    _is_null?: boolean | undefined | null | Variable<any, string>;
    /** does the column match the given pattern */
    _like?: string | undefined | null | Variable<any, string>;
    _lt?: string | undefined | null | Variable<any, string>;
    _lte?: string | undefined | null | Variable<any, string>;
    _neq?: string | undefined | null | Variable<any, string>;
    /** does the column NOT match the given case-insensitive pattern */
    _nilike?: string | undefined | null | Variable<any, string>;
    _nin?: Array<string> | undefined | null | Variable<any, string>;
    /** does the column NOT match the given POSIX regular expression, case insensitive */
    _niregex?: string | undefined | null | Variable<any, string>;
    /** does the column NOT match the given pattern */
    _nlike?: string | undefined | null | Variable<any, string>;
    /** does the column NOT match the given POSIX regular expression, case sensitive */
    _nregex?: string | undefined | null | Variable<any, string>;
    /** does the column NOT match the given SQL regular expression */
    _nsimilar?: string | undefined | null | Variable<any, string>;
    /** does the column match the given POSIX regular expression, case sensitive */
    _regex?: string | undefined | null | Variable<any, string>;
    /** does the column match the given SQL regular expression */
    _similar?: string | undefined | null | Variable<any, string>;
  };
  /** columns and relationships of "Task" */
  ['Task']: AliasType<{
    closureReason?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    hasSensitiveInfo?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    isRejected?: boolean | `@${string}`;
    isSupportEngineerIdentityHidden?: boolean | `@${string}`;
    issueCategory?: boolean | `@${string}`;
    linkedTickets?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    organizationId?: boolean | `@${string}`;
    productDocId?: boolean | `@${string}`;
    productVersion?: boolean | `@${string}`;
    requestForInformation?: boolean | `@${string}`;
    requestedByUserId?: boolean | `@${string}`;
    reviewedByUserId?: boolean | `@${string}`;
    rootChapterId?: boolean | `@${string}`;
    rootChapterVersion?: boolean | `@${string}`;
    salesForceTicketId?: boolean | `@${string}`;
    severity?: boolean | `@${string}`;
    severityUpdatedAt?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    subCategory?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    ticketRef?: boolean | `@${string}`;
    type?: boolean | `@${string}`;
    usersToNotify?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "Task" */
  ['Task_aggregate']: AliasType<{
    aggregate?: ValueTypes['Task_aggregate_fields'];
    nodes?: ValueTypes['Task'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "Task" */
  ['Task_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?:
          | Array<ValueTypes['Task_select_column']>
          | undefined
          | null
          | Variable<any, string>;
        distinct?: boolean | undefined | null | Variable<any, string>;
      },
      boolean | `@${string}`,
    ];
    max?: ValueTypes['Task_max_fields'];
    min?: ValueTypes['Task_min_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "Task". All fields are combined with a logical 'AND'. */
  ['Task_bool_exp']: {
    _and?:
      | Array<ValueTypes['Task_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    _not?:
      | ValueTypes['Task_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    _or?:
      | Array<ValueTypes['Task_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    closureReason?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    hasSensitiveInfo?:
      | ValueTypes['Boolean_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    id?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    isRejected?:
      | ValueTypes['Boolean_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    isSupportEngineerIdentityHidden?:
      | ValueTypes['Boolean_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    issueCategory?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    linkedTickets?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    name?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    organizationId?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    productDocId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    productVersion?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    requestForInformation?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    requestedByUserId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    reviewedByUserId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    rootChapterId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    rootChapterVersion?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    salesForceTicketId?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    severity?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    severityUpdatedAt?:
      | ValueTypes['timestamp_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    status?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    subCategory?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    ticketRef?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    type?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    usersToNotify?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** unique or primary key constraints on table "Task" */
  ['Task_constraint']: Task_constraint;
  /** input type for inserting data into table "Task" */
  ['Task_insert_input']: {
    closureReason?: string | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    hasSensitiveInfo?: boolean | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    isRejected?: boolean | undefined | null | Variable<any, string>;
    isSupportEngineerIdentityHidden?:
      | boolean
      | undefined
      | null
      | Variable<any, string>;
    issueCategory?: string | undefined | null | Variable<any, string>;
    linkedTickets?: string | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    organizationId?: string | undefined | null | Variable<any, string>;
    productDocId?:
      | ValueTypes['uuid']
      | undefined
      | null
      | Variable<any, string>;
    productVersion?: string | undefined | null | Variable<any, string>;
    requestForInformation?: string | undefined | null | Variable<any, string>;
    requestedByUserId?:
      | ValueTypes['uuid']
      | undefined
      | null
      | Variable<any, string>;
    reviewedByUserId?:
      | ValueTypes['uuid']
      | undefined
      | null
      | Variable<any, string>;
    rootChapterId?:
      | ValueTypes['uuid']
      | undefined
      | null
      | Variable<any, string>;
    rootChapterVersion?: string | undefined | null | Variable<any, string>;
    salesForceTicketId?: string | undefined | null | Variable<any, string>;
    severity?: string | undefined | null | Variable<any, string>;
    severityUpdatedAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
    status?: string | undefined | null | Variable<any, string>;
    subCategory?: string | undefined | null | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    ticketRef?: string | undefined | null | Variable<any, string>;
    type?: string | undefined | null | Variable<any, string>;
    usersToNotify?: string | undefined | null | Variable<any, string>;
  };
  /** aggregate max on columns */
  ['Task_max_fields']: AliasType<{
    closureReason?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    issueCategory?: boolean | `@${string}`;
    linkedTickets?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    organizationId?: boolean | `@${string}`;
    productDocId?: boolean | `@${string}`;
    productVersion?: boolean | `@${string}`;
    requestForInformation?: boolean | `@${string}`;
    requestedByUserId?: boolean | `@${string}`;
    reviewedByUserId?: boolean | `@${string}`;
    rootChapterId?: boolean | `@${string}`;
    rootChapterVersion?: boolean | `@${string}`;
    salesForceTicketId?: boolean | `@${string}`;
    severity?: boolean | `@${string}`;
    severityUpdatedAt?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    subCategory?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    ticketRef?: boolean | `@${string}`;
    type?: boolean | `@${string}`;
    usersToNotify?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['Task_min_fields']: AliasType<{
    closureReason?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    issueCategory?: boolean | `@${string}`;
    linkedTickets?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    organizationId?: boolean | `@${string}`;
    productDocId?: boolean | `@${string}`;
    productVersion?: boolean | `@${string}`;
    requestForInformation?: boolean | `@${string}`;
    requestedByUserId?: boolean | `@${string}`;
    reviewedByUserId?: boolean | `@${string}`;
    rootChapterId?: boolean | `@${string}`;
    rootChapterVersion?: boolean | `@${string}`;
    salesForceTicketId?: boolean | `@${string}`;
    severity?: boolean | `@${string}`;
    severityUpdatedAt?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    subCategory?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    ticketRef?: boolean | `@${string}`;
    type?: boolean | `@${string}`;
    usersToNotify?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "Task" */
  ['Task_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['Task'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "Task" */
  ['Task_on_conflict']: {
    constraint: ValueTypes['Task_constraint'] | Variable<any, string>;
    update_columns:
      | Array<ValueTypes['Task_update_column']>
      | Variable<any, string>;
    where?:
      | ValueTypes['Task_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Ordering options when selecting data from "Task". */
  ['Task_order_by']: {
    closureReason?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    description?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    hasSensitiveInfo?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    isRejected?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    isSupportEngineerIdentityHidden?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    issueCategory?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    linkedTickets?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    name?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    organizationId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    productDocId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    productVersion?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    requestForInformation?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    requestedByUserId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    reviewedByUserId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    rootChapterId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    rootChapterVersion?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    salesForceTicketId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    severity?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    severityUpdatedAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    status?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    subCategory?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    ticketRef?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    type?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    usersToNotify?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** primary key columns input for table: Task */
  ['Task_pk_columns_input']: {
    id: ValueTypes['uuid'] | Variable<any, string>;
  };
  /** select columns of table "Task" */
  ['Task_select_column']: Task_select_column;
  /** input type for updating data in table "Task" */
  ['Task_set_input']: {
    closureReason?: string | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    hasSensitiveInfo?: boolean | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    isRejected?: boolean | undefined | null | Variable<any, string>;
    isSupportEngineerIdentityHidden?:
      | boolean
      | undefined
      | null
      | Variable<any, string>;
    issueCategory?: string | undefined | null | Variable<any, string>;
    linkedTickets?: string | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    organizationId?: string | undefined | null | Variable<any, string>;
    productDocId?:
      | ValueTypes['uuid']
      | undefined
      | null
      | Variable<any, string>;
    productVersion?: string | undefined | null | Variable<any, string>;
    requestForInformation?: string | undefined | null | Variable<any, string>;
    requestedByUserId?:
      | ValueTypes['uuid']
      | undefined
      | null
      | Variable<any, string>;
    reviewedByUserId?:
      | ValueTypes['uuid']
      | undefined
      | null
      | Variable<any, string>;
    rootChapterId?:
      | ValueTypes['uuid']
      | undefined
      | null
      | Variable<any, string>;
    rootChapterVersion?: string | undefined | null | Variable<any, string>;
    salesForceTicketId?: string | undefined | null | Variable<any, string>;
    severity?: string | undefined | null | Variable<any, string>;
    severityUpdatedAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
    status?: string | undefined | null | Variable<any, string>;
    subCategory?: string | undefined | null | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    ticketRef?: string | undefined | null | Variable<any, string>;
    type?: string | undefined | null | Variable<any, string>;
    usersToNotify?: string | undefined | null | Variable<any, string>;
  };
  /** Streaming cursor of the table "Task" */
  ['Task_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value:
      | ValueTypes['Task_stream_cursor_value_input']
      | Variable<any, string>;
    /** cursor ordering */
    ordering?:
      | ValueTypes['cursor_ordering']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Initial value of the column from where the streaming should start */
  ['Task_stream_cursor_value_input']: {
    closureReason?: string | undefined | null | Variable<any, string>;
    description?: string | undefined | null | Variable<any, string>;
    hasSensitiveInfo?: boolean | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    isRejected?: boolean | undefined | null | Variable<any, string>;
    isSupportEngineerIdentityHidden?:
      | boolean
      | undefined
      | null
      | Variable<any, string>;
    issueCategory?: string | undefined | null | Variable<any, string>;
    linkedTickets?: string | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    organizationId?: string | undefined | null | Variable<any, string>;
    productDocId?:
      | ValueTypes['uuid']
      | undefined
      | null
      | Variable<any, string>;
    productVersion?: string | undefined | null | Variable<any, string>;
    requestForInformation?: string | undefined | null | Variable<any, string>;
    requestedByUserId?:
      | ValueTypes['uuid']
      | undefined
      | null
      | Variable<any, string>;
    reviewedByUserId?:
      | ValueTypes['uuid']
      | undefined
      | null
      | Variable<any, string>;
    rootChapterId?:
      | ValueTypes['uuid']
      | undefined
      | null
      | Variable<any, string>;
    rootChapterVersion?: string | undefined | null | Variable<any, string>;
    salesForceTicketId?: string | undefined | null | Variable<any, string>;
    severity?: string | undefined | null | Variable<any, string>;
    severityUpdatedAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
    status?: string | undefined | null | Variable<any, string>;
    subCategory?: string | undefined | null | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    ticketRef?: string | undefined | null | Variable<any, string>;
    type?: string | undefined | null | Variable<any, string>;
    usersToNotify?: string | undefined | null | Variable<any, string>;
  };
  /** update columns of table "Task" */
  ['Task_update_column']: Task_update_column;
  ['Task_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ValueTypes['Task_set_input']
      | undefined
      | null
      | Variable<any, string>;
    /** filter the rows which have to be updated */
    where: ValueTypes['Task_bool_exp'] | Variable<any, string>;
  };
  /** columns and relationships of "Tenant" */
  ['Tenant']: AliasType<{
    address?: boolean | `@${string}`;
    contact?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    emailId?: boolean | `@${string}`;
    firstName?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    lastName?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    organizationId?: boolean | `@${string}`;
    packages?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['TenantPackage_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['TenantPackage_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['TenantPackage_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['TenantPackage'],
    ];
    packages_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['TenantPackage_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['TenantPackage_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['TenantPackage_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['TenantPackage_aggregate'],
    ];
    sidebarLinkId?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    tenantCustomizationId?: boolean | `@${string}`;
    totalSpaceForDoc?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    usedSpaceByDoc?: boolean | `@${string}`;
    verificationStatus?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "TenantPackage" */
  ['TenantPackage']: AliasType<{
    id?: boolean | `@${string}`;
    /** An object relationship */
    package?: ValueTypes['Package'];
    packageId?: boolean | `@${string}`;
    /** An object relationship */
    tenant?: ValueTypes['Tenant'];
    tenantId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "TenantPackage" */
  ['TenantPackage_aggregate']: AliasType<{
    aggregate?: ValueTypes['TenantPackage_aggregate_fields'];
    nodes?: ValueTypes['TenantPackage'];
    __typename?: boolean | `@${string}`;
  }>;
  ['TenantPackage_aggregate_bool_exp']: {
    count?:
      | ValueTypes['TenantPackage_aggregate_bool_exp_count']
      | undefined
      | null
      | Variable<any, string>;
  };
  ['TenantPackage_aggregate_bool_exp_count']: {
    arguments?:
      | Array<ValueTypes['TenantPackage_select_column']>
      | undefined
      | null
      | Variable<any, string>;
    distinct?: boolean | undefined | null | Variable<any, string>;
    filter?:
      | ValueTypes['TenantPackage_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    predicate: ValueTypes['Int_comparison_exp'] | Variable<any, string>;
  };
  /** aggregate fields of "TenantPackage" */
  ['TenantPackage_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?:
          | Array<ValueTypes['TenantPackage_select_column']>
          | undefined
          | null
          | Variable<any, string>;
        distinct?: boolean | undefined | null | Variable<any, string>;
      },
      boolean | `@${string}`,
    ];
    max?: ValueTypes['TenantPackage_max_fields'];
    min?: ValueTypes['TenantPackage_min_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** order by aggregate values of table "TenantPackage" */
  ['TenantPackage_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    max?:
      | ValueTypes['TenantPackage_max_order_by']
      | undefined
      | null
      | Variable<any, string>;
    min?:
      | ValueTypes['TenantPackage_min_order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** input type for inserting array relation for remote table "TenantPackage" */
  ['TenantPackage_arr_rel_insert_input']: {
    data:
      | Array<ValueTypes['TenantPackage_insert_input']>
      | Variable<any, string>;
    /** upsert condition */
    on_conflict?:
      | ValueTypes['TenantPackage_on_conflict']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Boolean expression to filter rows from the table "TenantPackage". All fields are combined with a logical 'AND'. */
  ['TenantPackage_bool_exp']: {
    _and?:
      | Array<ValueTypes['TenantPackage_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    _not?:
      | ValueTypes['TenantPackage_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    _or?:
      | Array<ValueTypes['TenantPackage_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    id?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    package?:
      | ValueTypes['Package_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    packageId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    tenant?:
      | ValueTypes['Tenant_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** unique or primary key constraints on table "TenantPackage" */
  ['TenantPackage_constraint']: TenantPackage_constraint;
  /** input type for inserting data into table "TenantPackage" */
  ['TenantPackage_insert_input']: {
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    package?:
      | ValueTypes['Package_obj_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
    packageId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    tenant?:
      | ValueTypes['Tenant_obj_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** aggregate max on columns */
  ['TenantPackage_max_fields']: AliasType<{
    id?: boolean | `@${string}`;
    packageId?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by max() on columns of table "TenantPackage" */
  ['TenantPackage_max_order_by']: {
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    packageId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate min on columns */
  ['TenantPackage_min_fields']: AliasType<{
    id?: boolean | `@${string}`;
    packageId?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by min() on columns of table "TenantPackage" */
  ['TenantPackage_min_order_by']: {
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    packageId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** response of any mutation on the table "TenantPackage" */
  ['TenantPackage_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['TenantPackage'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "TenantPackage" */
  ['TenantPackage_on_conflict']: {
    constraint: ValueTypes['TenantPackage_constraint'] | Variable<any, string>;
    update_columns:
      | Array<ValueTypes['TenantPackage_update_column']>
      | Variable<any, string>;
    where?:
      | ValueTypes['TenantPackage_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Ordering options when selecting data from "TenantPackage". */
  ['TenantPackage_order_by']: {
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    package?:
      | ValueTypes['Package_order_by']
      | undefined
      | null
      | Variable<any, string>;
    packageId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    tenant?:
      | ValueTypes['Tenant_order_by']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** primary key columns input for table: TenantPackage */
  ['TenantPackage_pk_columns_input']: {
    id: ValueTypes['uuid'] | Variable<any, string>;
  };
  /** select columns of table "TenantPackage" */
  ['TenantPackage_select_column']: TenantPackage_select_column;
  /** input type for updating data in table "TenantPackage" */
  ['TenantPackage_set_input']: {
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    packageId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** Streaming cursor of the table "TenantPackage" */
  ['TenantPackage_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value:
      | ValueTypes['TenantPackage_stream_cursor_value_input']
      | Variable<any, string>;
    /** cursor ordering */
    ordering?:
      | ValueTypes['cursor_ordering']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Initial value of the column from where the streaming should start */
  ['TenantPackage_stream_cursor_value_input']: {
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    packageId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** update columns of table "TenantPackage" */
  ['TenantPackage_update_column']: TenantPackage_update_column;
  ['TenantPackage_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ValueTypes['TenantPackage_set_input']
      | undefined
      | null
      | Variable<any, string>;
    /** filter the rows which have to be updated */
    where: ValueTypes['TenantPackage_bool_exp'] | Variable<any, string>;
  };
  /** aggregated selection of "Tenant" */
  ['Tenant_aggregate']: AliasType<{
    aggregate?: ValueTypes['Tenant_aggregate_fields'];
    nodes?: ValueTypes['Tenant'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "Tenant" */
  ['Tenant_aggregate_fields']: AliasType<{
    avg?: ValueTypes['Tenant_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ValueTypes['Tenant_select_column']>
          | undefined
          | null
          | Variable<any, string>;
        distinct?: boolean | undefined | null | Variable<any, string>;
      },
      boolean | `@${string}`,
    ];
    max?: ValueTypes['Tenant_max_fields'];
    min?: ValueTypes['Tenant_min_fields'];
    stddev?: ValueTypes['Tenant_stddev_fields'];
    stddev_pop?: ValueTypes['Tenant_stddev_pop_fields'];
    stddev_samp?: ValueTypes['Tenant_stddev_samp_fields'];
    sum?: ValueTypes['Tenant_sum_fields'];
    var_pop?: ValueTypes['Tenant_var_pop_fields'];
    var_samp?: ValueTypes['Tenant_var_samp_fields'];
    variance?: ValueTypes['Tenant_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate avg on columns */
  ['Tenant_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "Tenant". All fields are combined with a logical 'AND'. */
  ['Tenant_bool_exp']: {
    _and?:
      | Array<ValueTypes['Tenant_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    _not?:
      | ValueTypes['Tenant_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    _or?:
      | Array<ValueTypes['Tenant_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    address?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    contact?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    createdAt?:
      | ValueTypes['timestamp_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    createdById?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['bigint_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    emailId?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    firstName?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    id?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    lastName?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    name?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    organizationId?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    packages?:
      | ValueTypes['TenantPackage_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    packages_aggregate?:
      | ValueTypes['TenantPackage_aggregate_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    sidebarLinkId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    status?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    tenantCustomizationId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    totalSpaceForDoc?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamp_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    usedSpaceByDoc?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    verificationStatus?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** unique or primary key constraints on table "Tenant" */
  ['Tenant_constraint']: Tenant_constraint;
  /** input type for incrementing numeric columns in table "Tenant" */
  ['Tenant_inc_input']: {
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
  };
  /** input type for inserting data into table "Tenant" */
  ['Tenant_insert_input']: {
    address?: string | undefined | null | Variable<any, string>;
    contact?: string | undefined | null | Variable<any, string>;
    createdAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    emailId?: string | undefined | null | Variable<any, string>;
    firstName?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    lastName?: string | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    organizationId?: string | undefined | null | Variable<any, string>;
    packages?:
      | ValueTypes['TenantPackage_arr_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
    sidebarLinkId?:
      | ValueTypes['uuid']
      | undefined
      | null
      | Variable<any, string>;
    status?: string | undefined | null | Variable<any, string>;
    tenantCustomizationId?:
      | ValueTypes['uuid']
      | undefined
      | null
      | Variable<any, string>;
    totalSpaceForDoc?: string | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    usedSpaceByDoc?: string | undefined | null | Variable<any, string>;
    verificationStatus?: string | undefined | null | Variable<any, string>;
  };
  /** aggregate max on columns */
  ['Tenant_max_fields']: AliasType<{
    address?: boolean | `@${string}`;
    contact?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    emailId?: boolean | `@${string}`;
    firstName?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    lastName?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    organizationId?: boolean | `@${string}`;
    sidebarLinkId?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    tenantCustomizationId?: boolean | `@${string}`;
    totalSpaceForDoc?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    usedSpaceByDoc?: boolean | `@${string}`;
    verificationStatus?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['Tenant_min_fields']: AliasType<{
    address?: boolean | `@${string}`;
    contact?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    emailId?: boolean | `@${string}`;
    firstName?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    lastName?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    organizationId?: boolean | `@${string}`;
    sidebarLinkId?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    tenantCustomizationId?: boolean | `@${string}`;
    totalSpaceForDoc?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    usedSpaceByDoc?: boolean | `@${string}`;
    verificationStatus?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "Tenant" */
  ['Tenant_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['Tenant'];
    __typename?: boolean | `@${string}`;
  }>;
  /** input type for inserting object relation for remote table "Tenant" */
  ['Tenant_obj_rel_insert_input']: {
    data: ValueTypes['Tenant_insert_input'] | Variable<any, string>;
    /** upsert condition */
    on_conflict?:
      | ValueTypes['Tenant_on_conflict']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** on_conflict condition type for table "Tenant" */
  ['Tenant_on_conflict']: {
    constraint: ValueTypes['Tenant_constraint'] | Variable<any, string>;
    update_columns:
      | Array<ValueTypes['Tenant_update_column']>
      | Variable<any, string>;
    where?:
      | ValueTypes['Tenant_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Ordering options when selecting data from "Tenant". */
  ['Tenant_order_by']: {
    address?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    contact?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    createdAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    createdById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    emailId?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    firstName?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    lastName?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    name?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    organizationId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    packages_aggregate?:
      | ValueTypes['TenantPackage_aggregate_order_by']
      | undefined
      | null
      | Variable<any, string>;
    sidebarLinkId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    status?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    tenantCustomizationId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    totalSpaceForDoc?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    usedSpaceByDoc?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    verificationStatus?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** primary key columns input for table: Tenant */
  ['Tenant_pk_columns_input']: {
    id: ValueTypes['uuid'] | Variable<any, string>;
  };
  /** select columns of table "Tenant" */
  ['Tenant_select_column']: Tenant_select_column;
  /** input type for updating data in table "Tenant" */
  ['Tenant_set_input']: {
    address?: string | undefined | null | Variable<any, string>;
    contact?: string | undefined | null | Variable<any, string>;
    createdAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    emailId?: string | undefined | null | Variable<any, string>;
    firstName?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    lastName?: string | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    organizationId?: string | undefined | null | Variable<any, string>;
    sidebarLinkId?:
      | ValueTypes['uuid']
      | undefined
      | null
      | Variable<any, string>;
    status?: string | undefined | null | Variable<any, string>;
    tenantCustomizationId?:
      | ValueTypes['uuid']
      | undefined
      | null
      | Variable<any, string>;
    totalSpaceForDoc?: string | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    usedSpaceByDoc?: string | undefined | null | Variable<any, string>;
    verificationStatus?: string | undefined | null | Variable<any, string>;
  };
  /** aggregate stddev on columns */
  ['Tenant_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_pop on columns */
  ['Tenant_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_samp on columns */
  ['Tenant_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Streaming cursor of the table "Tenant" */
  ['Tenant_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value:
      | ValueTypes['Tenant_stream_cursor_value_input']
      | Variable<any, string>;
    /** cursor ordering */
    ordering?:
      | ValueTypes['cursor_ordering']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Initial value of the column from where the streaming should start */
  ['Tenant_stream_cursor_value_input']: {
    address?: string | undefined | null | Variable<any, string>;
    contact?: string | undefined | null | Variable<any, string>;
    createdAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    emailId?: string | undefined | null | Variable<any, string>;
    firstName?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    lastName?: string | undefined | null | Variable<any, string>;
    name?: string | undefined | null | Variable<any, string>;
    organizationId?: string | undefined | null | Variable<any, string>;
    sidebarLinkId?:
      | ValueTypes['uuid']
      | undefined
      | null
      | Variable<any, string>;
    status?: string | undefined | null | Variable<any, string>;
    tenantCustomizationId?:
      | ValueTypes['uuid']
      | undefined
      | null
      | Variable<any, string>;
    totalSpaceForDoc?: string | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    usedSpaceByDoc?: string | undefined | null | Variable<any, string>;
    verificationStatus?: string | undefined | null | Variable<any, string>;
  };
  /** aggregate sum on columns */
  ['Tenant_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** update columns of table "Tenant" */
  ['Tenant_update_column']: Tenant_update_column;
  ['Tenant_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?:
      | ValueTypes['Tenant_inc_input']
      | undefined
      | null
      | Variable<any, string>;
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ValueTypes['Tenant_set_input']
      | undefined
      | null
      | Variable<any, string>;
    /** filter the rows which have to be updated */
    where: ValueTypes['Tenant_bool_exp'] | Variable<any, string>;
  };
  /** aggregate var_pop on columns */
  ['Tenant_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate var_samp on columns */
  ['Tenant_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate variance on columns */
  ['Tenant_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "User" */
  ['User']: AliasType<{
    address?: boolean | `@${string}`;
    city?: boolean | `@${string}`;
    country?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    displayName?: boolean | `@${string}`;
    email?: boolean | `@${string}`;
    firstName?: boolean | `@${string}`;
    groups?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['UserGroup_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['UserGroup_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['UserGroup_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserGroup'],
    ];
    groups_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['UserGroup_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['UserGroup_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['UserGroup_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserGroup_aggregate'],
    ];
    id?: boolean | `@${string}`;
    isMigrated?: boolean | `@${string}`;
    isTenantAdmin?: boolean | `@${string}`;
    jobTitle?: boolean | `@${string}`;
    lastName?: boolean | `@${string}`;
    organizationId?: boolean | `@${string}`;
    postalCode?: boolean | `@${string}`;
    preferredCurrency?: boolean | `@${string}`;
    profilePictureUrl?: boolean | `@${string}`;
    role?: boolean | `@${string}`;
    roles?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['UserRole_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['UserRole_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['UserRole_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserRole'],
    ];
    roles_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['UserRole_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['UserRole_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['UserRole_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserRole_aggregate'],
    ];
    secondaryEmail?: boolean | `@${string}`;
    state?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    /** An object relationship */
    tenant?: ValueTypes['Tenant'];
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    userType?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "UserGroup" */
  ['UserGroup']: AliasType<{
    /** An object relationship */
    group?: ValueTypes['Group'];
    groupId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    /** An object relationship */
    user?: ValueTypes['User'];
    userId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "UserGroup" */
  ['UserGroup_aggregate']: AliasType<{
    aggregate?: ValueTypes['UserGroup_aggregate_fields'];
    nodes?: ValueTypes['UserGroup'];
    __typename?: boolean | `@${string}`;
  }>;
  ['UserGroup_aggregate_bool_exp']: {
    count?:
      | ValueTypes['UserGroup_aggregate_bool_exp_count']
      | undefined
      | null
      | Variable<any, string>;
  };
  ['UserGroup_aggregate_bool_exp_count']: {
    arguments?:
      | Array<ValueTypes['UserGroup_select_column']>
      | undefined
      | null
      | Variable<any, string>;
    distinct?: boolean | undefined | null | Variable<any, string>;
    filter?:
      | ValueTypes['UserGroup_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    predicate: ValueTypes['Int_comparison_exp'] | Variable<any, string>;
  };
  /** aggregate fields of "UserGroup" */
  ['UserGroup_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?:
          | Array<ValueTypes['UserGroup_select_column']>
          | undefined
          | null
          | Variable<any, string>;
        distinct?: boolean | undefined | null | Variable<any, string>;
      },
      boolean | `@${string}`,
    ];
    max?: ValueTypes['UserGroup_max_fields'];
    min?: ValueTypes['UserGroup_min_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** order by aggregate values of table "UserGroup" */
  ['UserGroup_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    max?:
      | ValueTypes['UserGroup_max_order_by']
      | undefined
      | null
      | Variable<any, string>;
    min?:
      | ValueTypes['UserGroup_min_order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** input type for inserting array relation for remote table "UserGroup" */
  ['UserGroup_arr_rel_insert_input']: {
    data: Array<ValueTypes['UserGroup_insert_input']> | Variable<any, string>;
    /** upsert condition */
    on_conflict?:
      | ValueTypes['UserGroup_on_conflict']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Boolean expression to filter rows from the table "UserGroup". All fields are combined with a logical 'AND'. */
  ['UserGroup_bool_exp']: {
    _and?:
      | Array<ValueTypes['UserGroup_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    _not?:
      | ValueTypes['UserGroup_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    _or?:
      | Array<ValueTypes['UserGroup_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    group?:
      | ValueTypes['Group_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    groupId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    id?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    user?:
      | ValueTypes['User_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    userId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** unique or primary key constraints on table "UserGroup" */
  ['UserGroup_constraint']: UserGroup_constraint;
  /** input type for inserting data into table "UserGroup" */
  ['UserGroup_insert_input']: {
    group?:
      | ValueTypes['Group_obj_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
    groupId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    user?:
      | ValueTypes['User_obj_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
    userId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** aggregate max on columns */
  ['UserGroup_max_fields']: AliasType<{
    groupId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    userId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by max() on columns of table "UserGroup" */
  ['UserGroup_max_order_by']: {
    groupId?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    userId?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
  };
  /** aggregate min on columns */
  ['UserGroup_min_fields']: AliasType<{
    groupId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    userId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by min() on columns of table "UserGroup" */
  ['UserGroup_min_order_by']: {
    groupId?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    userId?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
  };
  /** response of any mutation on the table "UserGroup" */
  ['UserGroup_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['UserGroup'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "UserGroup" */
  ['UserGroup_on_conflict']: {
    constraint: ValueTypes['UserGroup_constraint'] | Variable<any, string>;
    update_columns:
      | Array<ValueTypes['UserGroup_update_column']>
      | Variable<any, string>;
    where?:
      | ValueTypes['UserGroup_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Ordering options when selecting data from "UserGroup". */
  ['UserGroup_order_by']: {
    group?:
      | ValueTypes['Group_order_by']
      | undefined
      | null
      | Variable<any, string>;
    groupId?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    user?:
      | ValueTypes['User_order_by']
      | undefined
      | null
      | Variable<any, string>;
    userId?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
  };
  /** primary key columns input for table: UserGroup */
  ['UserGroup_pk_columns_input']: {
    id: ValueTypes['uuid'] | Variable<any, string>;
  };
  /** select columns of table "UserGroup" */
  ['UserGroup_select_column']: UserGroup_select_column;
  /** input type for updating data in table "UserGroup" */
  ['UserGroup_set_input']: {
    groupId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    userId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** Streaming cursor of the table "UserGroup" */
  ['UserGroup_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value:
      | ValueTypes['UserGroup_stream_cursor_value_input']
      | Variable<any, string>;
    /** cursor ordering */
    ordering?:
      | ValueTypes['cursor_ordering']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Initial value of the column from where the streaming should start */
  ['UserGroup_stream_cursor_value_input']: {
    groupId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    userId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** update columns of table "UserGroup" */
  ['UserGroup_update_column']: UserGroup_update_column;
  ['UserGroup_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ValueTypes['UserGroup_set_input']
      | undefined
      | null
      | Variable<any, string>;
    /** filter the rows which have to be updated */
    where: ValueTypes['UserGroup_bool_exp'] | Variable<any, string>;
  };
  /** columns and relationships of "UserRole" */
  ['UserRole']: AliasType<{
    id?: boolean | `@${string}`;
    /** An object relationship */
    role?: ValueTypes['Role'];
    roleId?: boolean | `@${string}`;
    /** An object relationship */
    user?: ValueTypes['User'];
    userId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "UserRole" */
  ['UserRole_aggregate']: AliasType<{
    aggregate?: ValueTypes['UserRole_aggregate_fields'];
    nodes?: ValueTypes['UserRole'];
    __typename?: boolean | `@${string}`;
  }>;
  ['UserRole_aggregate_bool_exp']: {
    count?:
      | ValueTypes['UserRole_aggregate_bool_exp_count']
      | undefined
      | null
      | Variable<any, string>;
  };
  ['UserRole_aggregate_bool_exp_count']: {
    arguments?:
      | Array<ValueTypes['UserRole_select_column']>
      | undefined
      | null
      | Variable<any, string>;
    distinct?: boolean | undefined | null | Variable<any, string>;
    filter?:
      | ValueTypes['UserRole_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    predicate: ValueTypes['Int_comparison_exp'] | Variable<any, string>;
  };
  /** aggregate fields of "UserRole" */
  ['UserRole_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?:
          | Array<ValueTypes['UserRole_select_column']>
          | undefined
          | null
          | Variable<any, string>;
        distinct?: boolean | undefined | null | Variable<any, string>;
      },
      boolean | `@${string}`,
    ];
    max?: ValueTypes['UserRole_max_fields'];
    min?: ValueTypes['UserRole_min_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** order by aggregate values of table "UserRole" */
  ['UserRole_aggregate_order_by']: {
    count?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    max?:
      | ValueTypes['UserRole_max_order_by']
      | undefined
      | null
      | Variable<any, string>;
    min?:
      | ValueTypes['UserRole_min_order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** input type for inserting array relation for remote table "UserRole" */
  ['UserRole_arr_rel_insert_input']: {
    data: Array<ValueTypes['UserRole_insert_input']> | Variable<any, string>;
    /** upsert condition */
    on_conflict?:
      | ValueTypes['UserRole_on_conflict']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Boolean expression to filter rows from the table "UserRole". All fields are combined with a logical 'AND'. */
  ['UserRole_bool_exp']: {
    _and?:
      | Array<ValueTypes['UserRole_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    _not?:
      | ValueTypes['UserRole_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    _or?:
      | Array<ValueTypes['UserRole_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    id?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    role?:
      | ValueTypes['Role_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    roleId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    user?:
      | ValueTypes['User_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    userId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** unique or primary key constraints on table "UserRole" */
  ['UserRole_constraint']: UserRole_constraint;
  /** input type for inserting data into table "UserRole" */
  ['UserRole_insert_input']: {
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    role?:
      | ValueTypes['Role_obj_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
    roleId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    user?:
      | ValueTypes['User_obj_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
    userId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** aggregate max on columns */
  ['UserRole_max_fields']: AliasType<{
    id?: boolean | `@${string}`;
    roleId?: boolean | `@${string}`;
    userId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by max() on columns of table "UserRole" */
  ['UserRole_max_order_by']: {
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    roleId?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    userId?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
  };
  /** aggregate min on columns */
  ['UserRole_min_fields']: AliasType<{
    id?: boolean | `@${string}`;
    roleId?: boolean | `@${string}`;
    userId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by min() on columns of table "UserRole" */
  ['UserRole_min_order_by']: {
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    roleId?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    userId?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
  };
  /** response of any mutation on the table "UserRole" */
  ['UserRole_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['UserRole'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "UserRole" */
  ['UserRole_on_conflict']: {
    constraint: ValueTypes['UserRole_constraint'] | Variable<any, string>;
    update_columns:
      | Array<ValueTypes['UserRole_update_column']>
      | Variable<any, string>;
    where?:
      | ValueTypes['UserRole_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Ordering options when selecting data from "UserRole". */
  ['UserRole_order_by']: {
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    role?:
      | ValueTypes['Role_order_by']
      | undefined
      | null
      | Variable<any, string>;
    roleId?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    user?:
      | ValueTypes['User_order_by']
      | undefined
      | null
      | Variable<any, string>;
    userId?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
  };
  /** primary key columns input for table: UserRole */
  ['UserRole_pk_columns_input']: {
    id: ValueTypes['uuid'] | Variable<any, string>;
  };
  /** select columns of table "UserRole" */
  ['UserRole_select_column']: UserRole_select_column;
  /** input type for updating data in table "UserRole" */
  ['UserRole_set_input']: {
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    roleId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    userId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** Streaming cursor of the table "UserRole" */
  ['UserRole_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value:
      | ValueTypes['UserRole_stream_cursor_value_input']
      | Variable<any, string>;
    /** cursor ordering */
    ordering?:
      | ValueTypes['cursor_ordering']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Initial value of the column from where the streaming should start */
  ['UserRole_stream_cursor_value_input']: {
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    roleId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    userId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
  };
  /** update columns of table "UserRole" */
  ['UserRole_update_column']: UserRole_update_column;
  ['UserRole_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ValueTypes['UserRole_set_input']
      | undefined
      | null
      | Variable<any, string>;
    /** filter the rows which have to be updated */
    where: ValueTypes['UserRole_bool_exp'] | Variable<any, string>;
  };
  /** columns and relationships of "UserType" */
  ['UserType']: AliasType<{
    value?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "UserType" */
  ['UserType_aggregate']: AliasType<{
    aggregate?: ValueTypes['UserType_aggregate_fields'];
    nodes?: ValueTypes['UserType'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "UserType" */
  ['UserType_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?:
          | Array<ValueTypes['UserType_select_column']>
          | undefined
          | null
          | Variable<any, string>;
        distinct?: boolean | undefined | null | Variable<any, string>;
      },
      boolean | `@${string}`,
    ];
    max?: ValueTypes['UserType_max_fields'];
    min?: ValueTypes['UserType_min_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "UserType". All fields are combined with a logical 'AND'. */
  ['UserType_bool_exp']: {
    _and?:
      | Array<ValueTypes['UserType_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    _not?:
      | ValueTypes['UserType_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    _or?:
      | Array<ValueTypes['UserType_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    value?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** unique or primary key constraints on table "UserType" */
  ['UserType_constraint']: UserType_constraint;
  ['UserType_enum']: UserType_enum;
  /** Boolean expression to compare columns of type "UserType_enum". All fields are combined with logical 'AND'. */
  ['UserType_enum_comparison_exp']: {
    _eq?:
      | ValueTypes['UserType_enum']
      | undefined
      | null
      | Variable<any, string>;
    _in?:
      | Array<ValueTypes['UserType_enum']>
      | undefined
      | null
      | Variable<any, string>;
    _is_null?: boolean | undefined | null | Variable<any, string>;
    _neq?:
      | ValueTypes['UserType_enum']
      | undefined
      | null
      | Variable<any, string>;
    _nin?:
      | Array<ValueTypes['UserType_enum']>
      | undefined
      | null
      | Variable<any, string>;
  };
  /** input type for inserting data into table "UserType" */
  ['UserType_insert_input']: {
    value?: string | undefined | null | Variable<any, string>;
  };
  /** aggregate max on columns */
  ['UserType_max_fields']: AliasType<{
    value?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['UserType_min_fields']: AliasType<{
    value?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "UserType" */
  ['UserType_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['UserType'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "UserType" */
  ['UserType_on_conflict']: {
    constraint: ValueTypes['UserType_constraint'] | Variable<any, string>;
    update_columns:
      | Array<ValueTypes['UserType_update_column']>
      | Variable<any, string>;
    where?:
      | ValueTypes['UserType_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Ordering options when selecting data from "UserType". */
  ['UserType_order_by']: {
    value?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
  };
  /** primary key columns input for table: UserType */
  ['UserType_pk_columns_input']: {
    value: string | Variable<any, string>;
  };
  /** select columns of table "UserType" */
  ['UserType_select_column']: UserType_select_column;
  /** input type for updating data in table "UserType" */
  ['UserType_set_input']: {
    value?: string | undefined | null | Variable<any, string>;
  };
  /** Streaming cursor of the table "UserType" */
  ['UserType_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value:
      | ValueTypes['UserType_stream_cursor_value_input']
      | Variable<any, string>;
    /** cursor ordering */
    ordering?:
      | ValueTypes['cursor_ordering']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Initial value of the column from where the streaming should start */
  ['UserType_stream_cursor_value_input']: {
    value?: string | undefined | null | Variable<any, string>;
  };
  /** update columns of table "UserType" */
  ['UserType_update_column']: UserType_update_column;
  ['UserType_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ValueTypes['UserType_set_input']
      | undefined
      | null
      | Variable<any, string>;
    /** filter the rows which have to be updated */
    where: ValueTypes['UserType_bool_exp'] | Variable<any, string>;
  };
  /** aggregated selection of "User" */
  ['User_aggregate']: AliasType<{
    aggregate?: ValueTypes['User_aggregate_fields'];
    nodes?: ValueTypes['User'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "User" */
  ['User_aggregate_fields']: AliasType<{
    avg?: ValueTypes['User_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ValueTypes['User_select_column']>
          | undefined
          | null
          | Variable<any, string>;
        distinct?: boolean | undefined | null | Variable<any, string>;
      },
      boolean | `@${string}`,
    ];
    max?: ValueTypes['User_max_fields'];
    min?: ValueTypes['User_min_fields'];
    stddev?: ValueTypes['User_stddev_fields'];
    stddev_pop?: ValueTypes['User_stddev_pop_fields'];
    stddev_samp?: ValueTypes['User_stddev_samp_fields'];
    sum?: ValueTypes['User_sum_fields'];
    var_pop?: ValueTypes['User_var_pop_fields'];
    var_samp?: ValueTypes['User_var_samp_fields'];
    variance?: ValueTypes['User_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate avg on columns */
  ['User_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "User". All fields are combined with a logical 'AND'. */
  ['User_bool_exp']: {
    _and?:
      | Array<ValueTypes['User_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    _not?:
      | ValueTypes['User_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    _or?:
      | Array<ValueTypes['User_bool_exp']>
      | undefined
      | null
      | Variable<any, string>;
    address?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    city?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    country?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    createdAt?:
      | ValueTypes['timestamp_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    createdById?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['bigint_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    displayName?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    email?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    firstName?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    groups?:
      | ValueTypes['UserGroup_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    groups_aggregate?:
      | ValueTypes['UserGroup_aggregate_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    id?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    isMigrated?:
      | ValueTypes['Boolean_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    isTenantAdmin?:
      | ValueTypes['Boolean_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    jobTitle?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    lastName?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    organizationId?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    postalCode?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    preferredCurrency?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    profilePictureUrl?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    role?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    roles?:
      | ValueTypes['UserRole_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    roles_aggregate?:
      | ValueTypes['UserRole_aggregate_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    secondaryEmail?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    state?:
      | ValueTypes['String_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    tenant?:
      | ValueTypes['Tenant_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamp_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?:
      | ValueTypes['uuid_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
    userType?:
      | ValueTypes['UserType_enum_comparison_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** unique or primary key constraints on table "User" */
  ['User_constraint']: User_constraint;
  /** input type for incrementing numeric columns in table "User" */
  ['User_inc_input']: {
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
  };
  /** input type for inserting data into table "User" */
  ['User_insert_input']: {
    address?: string | undefined | null | Variable<any, string>;
    city?: string | undefined | null | Variable<any, string>;
    country?: string | undefined | null | Variable<any, string>;
    createdAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    displayName?: string | undefined | null | Variable<any, string>;
    email?: string | undefined | null | Variable<any, string>;
    firstName?: string | undefined | null | Variable<any, string>;
    groups?:
      | ValueTypes['UserGroup_arr_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    isMigrated?: boolean | undefined | null | Variable<any, string>;
    isTenantAdmin?: boolean | undefined | null | Variable<any, string>;
    jobTitle?: string | undefined | null | Variable<any, string>;
    lastName?: string | undefined | null | Variable<any, string>;
    organizationId?: string | undefined | null | Variable<any, string>;
    postalCode?: string | undefined | null | Variable<any, string>;
    preferredCurrency?: string | undefined | null | Variable<any, string>;
    profilePictureUrl?: string | undefined | null | Variable<any, string>;
    role?: string | undefined | null | Variable<any, string>;
    roles?:
      | ValueTypes['UserRole_arr_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
    secondaryEmail?: string | undefined | null | Variable<any, string>;
    state?: string | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenant?:
      | ValueTypes['Tenant_obj_rel_insert_input']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    userType?:
      | ValueTypes['UserType_enum']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate max on columns */
  ['User_max_fields']: AliasType<{
    address?: boolean | `@${string}`;
    city?: boolean | `@${string}`;
    country?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    displayName?: boolean | `@${string}`;
    email?: boolean | `@${string}`;
    firstName?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    jobTitle?: boolean | `@${string}`;
    lastName?: boolean | `@${string}`;
    organizationId?: boolean | `@${string}`;
    postalCode?: boolean | `@${string}`;
    preferredCurrency?: boolean | `@${string}`;
    profilePictureUrl?: boolean | `@${string}`;
    role?: boolean | `@${string}`;
    secondaryEmail?: boolean | `@${string}`;
    state?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['User_min_fields']: AliasType<{
    address?: boolean | `@${string}`;
    city?: boolean | `@${string}`;
    country?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    displayName?: boolean | `@${string}`;
    email?: boolean | `@${string}`;
    firstName?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    jobTitle?: boolean | `@${string}`;
    lastName?: boolean | `@${string}`;
    organizationId?: boolean | `@${string}`;
    postalCode?: boolean | `@${string}`;
    preferredCurrency?: boolean | `@${string}`;
    profilePictureUrl?: boolean | `@${string}`;
    role?: boolean | `@${string}`;
    secondaryEmail?: boolean | `@${string}`;
    state?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "User" */
  ['User_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ValueTypes['User'];
    __typename?: boolean | `@${string}`;
  }>;
  /** input type for inserting object relation for remote table "User" */
  ['User_obj_rel_insert_input']: {
    data: ValueTypes['User_insert_input'] | Variable<any, string>;
    /** upsert condition */
    on_conflict?:
      | ValueTypes['User_on_conflict']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** on_conflict condition type for table "User" */
  ['User_on_conflict']: {
    constraint: ValueTypes['User_constraint'] | Variable<any, string>;
    update_columns:
      | Array<ValueTypes['User_update_column']>
      | Variable<any, string>;
    where?:
      | ValueTypes['User_bool_exp']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Ordering options when selecting data from "User". */
  ['User_order_by']: {
    address?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    city?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    country?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    createdAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    createdById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    cursorId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    displayName?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    email?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    firstName?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    groups_aggregate?:
      | ValueTypes['UserGroup_aggregate_order_by']
      | undefined
      | null
      | Variable<any, string>;
    id?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    isMigrated?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    isTenantAdmin?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    jobTitle?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    lastName?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    organizationId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    postalCode?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    preferredCurrency?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    profilePictureUrl?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    role?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    roles_aggregate?:
      | ValueTypes['UserRole_aggregate_order_by']
      | undefined
      | null
      | Variable<any, string>;
    secondaryEmail?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    state?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    status?: ValueTypes['order_by'] | undefined | null | Variable<any, string>;
    tenant?:
      | ValueTypes['Tenant_order_by']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedAt?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
    userType?:
      | ValueTypes['order_by']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** primary key columns input for table: User */
  ['User_pk_columns_input']: {
    id: ValueTypes['uuid'] | Variable<any, string>;
  };
  /** select columns of table "User" */
  ['User_select_column']: User_select_column;
  /** input type for updating data in table "User" */
  ['User_set_input']: {
    address?: string | undefined | null | Variable<any, string>;
    city?: string | undefined | null | Variable<any, string>;
    country?: string | undefined | null | Variable<any, string>;
    createdAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    displayName?: string | undefined | null | Variable<any, string>;
    email?: string | undefined | null | Variable<any, string>;
    firstName?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    isMigrated?: boolean | undefined | null | Variable<any, string>;
    isTenantAdmin?: boolean | undefined | null | Variable<any, string>;
    jobTitle?: string | undefined | null | Variable<any, string>;
    lastName?: string | undefined | null | Variable<any, string>;
    organizationId?: string | undefined | null | Variable<any, string>;
    postalCode?: string | undefined | null | Variable<any, string>;
    preferredCurrency?: string | undefined | null | Variable<any, string>;
    profilePictureUrl?: string | undefined | null | Variable<any, string>;
    role?: string | undefined | null | Variable<any, string>;
    secondaryEmail?: string | undefined | null | Variable<any, string>;
    state?: string | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    userType?:
      | ValueTypes['UserType_enum']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate stddev on columns */
  ['User_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_pop on columns */
  ['User_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_samp on columns */
  ['User_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Streaming cursor of the table "User" */
  ['User_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value:
      | ValueTypes['User_stream_cursor_value_input']
      | Variable<any, string>;
    /** cursor ordering */
    ordering?:
      | ValueTypes['cursor_ordering']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** Initial value of the column from where the streaming should start */
  ['User_stream_cursor_value_input']: {
    address?: string | undefined | null | Variable<any, string>;
    city?: string | undefined | null | Variable<any, string>;
    country?: string | undefined | null | Variable<any, string>;
    createdAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
    createdById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    cursorId?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    displayName?: string | undefined | null | Variable<any, string>;
    email?: string | undefined | null | Variable<any, string>;
    firstName?: string | undefined | null | Variable<any, string>;
    id?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    isMigrated?: boolean | undefined | null | Variable<any, string>;
    isTenantAdmin?: boolean | undefined | null | Variable<any, string>;
    jobTitle?: string | undefined | null | Variable<any, string>;
    lastName?: string | undefined | null | Variable<any, string>;
    organizationId?: string | undefined | null | Variable<any, string>;
    postalCode?: string | undefined | null | Variable<any, string>;
    preferredCurrency?: string | undefined | null | Variable<any, string>;
    profilePictureUrl?: string | undefined | null | Variable<any, string>;
    role?: string | undefined | null | Variable<any, string>;
    secondaryEmail?: string | undefined | null | Variable<any, string>;
    state?: string | undefined | null | Variable<any, string>;
    status?:
      | ValueTypes['Status_enum']
      | undefined
      | null
      | Variable<any, string>;
    tenantId?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    updatedAt?:
      | ValueTypes['timestamp']
      | undefined
      | null
      | Variable<any, string>;
    updatedById?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    userType?:
      | ValueTypes['UserType_enum']
      | undefined
      | null
      | Variable<any, string>;
  };
  /** aggregate sum on columns */
  ['User_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** update columns of table "User" */
  ['User_update_column']: User_update_column;
  ['User_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?:
      | ValueTypes['User_inc_input']
      | undefined
      | null
      | Variable<any, string>;
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ValueTypes['User_set_input']
      | undefined
      | null
      | Variable<any, string>;
    /** filter the rows which have to be updated */
    where: ValueTypes['User_bool_exp'] | Variable<any, string>;
  };
  /** aggregate var_pop on columns */
  ['User_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate var_samp on columns */
  ['User_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate variance on columns */
  ['User_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  ['bigint']: unknown;
  /** Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'. */
  ['bigint_comparison_exp']: {
    _eq?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    _gt?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    _gte?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    _in?:
      | Array<ValueTypes['bigint']>
      | undefined
      | null
      | Variable<any, string>;
    _is_null?: boolean | undefined | null | Variable<any, string>;
    _lt?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    _lte?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    _neq?: ValueTypes['bigint'] | undefined | null | Variable<any, string>;
    _nin?:
      | Array<ValueTypes['bigint']>
      | undefined
      | null
      | Variable<any, string>;
  };
  /** ordering argument of a cursor */
  ['cursor_ordering']: cursor_ordering;
  /** mutation root */
  ['mutation_root']: AliasType<{
    delete_Application?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['Application_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['Application_mutation_response'],
    ];
    delete_ApplicationIntegration?: [
      {
        /** filter the rows which have to be deleted */
        where:
          | ValueTypes['ApplicationIntegration_bool_exp']
          | Variable<any, string>;
      },
      ValueTypes['ApplicationIntegration_mutation_response'],
    ];
    delete_ApplicationIntegration_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['ApplicationIntegration'],
    ];
    delete_Application_by_pk?: [
      { id: string | Variable<any, string> },
      ValueTypes['Application'],
    ];
    delete_CaseSeverity?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['CaseSeverity_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['CaseSeverity_mutation_response'],
    ];
    delete_CaseSeverity_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['CaseSeverity'],
    ];
    delete_ClosureReason?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['ClosureReason_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['ClosureReason_mutation_response'],
    ];
    delete_ClosureReason_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['ClosureReason'],
    ];
    delete_Currency?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['Currency_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['Currency_mutation_response'],
    ];
    delete_Currency_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['Currency'],
    ];
    delete_CustomRole?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['CustomRole_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['CustomRole_mutation_response'],
    ];
    delete_CustomRole_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['CustomRole'],
    ];
    delete_Group?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['Group_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['Group_mutation_response'],
    ];
    delete_GroupRole?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['GroupRole_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['GroupRole_mutation_response'],
    ];
    delete_GroupRole_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['GroupRole'],
    ];
    delete_Group_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['Group'],
    ];
    delete_Industry?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['Industry_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['Industry_mutation_response'],
    ];
    delete_Industry_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['Industry'],
    ];
    delete_IssueCategory?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['IssueCategory_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['IssueCategory_mutation_response'],
    ];
    delete_IssueCategory_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['IssueCategory'],
    ];
    delete_Object?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['Object_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['Object_mutation_response'],
    ];
    delete_Object_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['Object'],
    ];
    delete_Organization?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['Organization_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['Organization_mutation_response'],
    ];
    delete_Organization_by_pk?: [
      { id: string | Variable<any, string> },
      ValueTypes['Organization'],
    ];
    delete_Package?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['Package_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['Package_mutation_response'],
    ];
    delete_PackageApplication?: [
      {
        /** filter the rows which have to be deleted */
        where:
          | ValueTypes['PackageApplication_bool_exp']
          | Variable<any, string>;
      },
      ValueTypes['PackageApplication_mutation_response'],
    ];
    delete_PackageApplication_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['PackageApplication'],
    ];
    delete_Package_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['Package'],
    ];
    delete_Product?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['Product_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['Product_mutation_response'],
    ];
    delete_ProductCategory?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['ProductCategory_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['ProductCategory_mutation_response'],
    ];
    delete_ProductCategory_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['ProductCategory'],
    ];
    delete_ProductVersion?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['ProductVersion_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['ProductVersion_mutation_response'],
    ];
    delete_ProductVersion_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['ProductVersion'],
    ];
    delete_Product_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['Product'],
    ];
    delete_Role?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['Role_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['Role_mutation_response'],
    ];
    delete_Role_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['Role'],
    ];
    delete_Status?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['Status_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['Status_mutation_response'],
    ];
    delete_Status_by_pk?: [
      { value: string | Variable<any, string> },
      ValueTypes['Status'],
    ];
    delete_Task?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['Task_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['Task_mutation_response'],
    ];
    delete_Task_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['Task'],
    ];
    delete_Tenant?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['Tenant_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['Tenant_mutation_response'],
    ];
    delete_TenantPackage?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['TenantPackage_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['TenantPackage_mutation_response'],
    ];
    delete_TenantPackage_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['TenantPackage'],
    ];
    delete_Tenant_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['Tenant'],
    ];
    delete_User?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['User_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['User_mutation_response'],
    ];
    delete_UserGroup?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['UserGroup_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['UserGroup_mutation_response'],
    ];
    delete_UserGroup_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['UserGroup'],
    ];
    delete_UserRole?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['UserRole_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['UserRole_mutation_response'],
    ];
    delete_UserRole_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['UserRole'],
    ];
    delete_UserType?: [
      {
        /** filter the rows which have to be deleted */
        where: ValueTypes['UserType_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['UserType_mutation_response'],
    ];
    delete_UserType_by_pk?: [
      { value: string | Variable<any, string> },
      ValueTypes['UserType'],
    ];
    delete_User_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['User'],
    ];
    insert_Application?: [
      {
        /** the rows to be inserted */
        objects:
          | Array<ValueTypes['Application_insert_input']>
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['Application_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Application_mutation_response'],
    ];
    insert_ApplicationIntegration?: [
      {
        /** the rows to be inserted */
        objects:
          | Array<ValueTypes['ApplicationIntegration_insert_input']>
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['ApplicationIntegration_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ApplicationIntegration_mutation_response'],
    ];
    insert_ApplicationIntegration_one?: [
      {
        /** the row to be inserted */
        object:
          | ValueTypes['ApplicationIntegration_insert_input']
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['ApplicationIntegration_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ApplicationIntegration'],
    ];
    insert_Application_one?: [
      {
        /** the row to be inserted */
        object:
          | ValueTypes['Application_insert_input']
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['Application_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Application'],
    ];
    insert_CaseSeverity?: [
      {
        /** the rows to be inserted */
        objects:
          | Array<ValueTypes['CaseSeverity_insert_input']>
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['CaseSeverity_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['CaseSeverity_mutation_response'],
    ];
    insert_CaseSeverity_one?: [
      {
        /** the row to be inserted */
        object:
          | ValueTypes['CaseSeverity_insert_input']
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['CaseSeverity_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['CaseSeverity'],
    ];
    insert_ClosureReason?: [
      {
        /** the rows to be inserted */
        objects:
          | Array<ValueTypes['ClosureReason_insert_input']>
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['ClosureReason_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ClosureReason_mutation_response'],
    ];
    insert_ClosureReason_one?: [
      {
        /** the row to be inserted */
        object:
          | ValueTypes['ClosureReason_insert_input']
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['ClosureReason_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ClosureReason'],
    ];
    insert_Currency?: [
      {
        /** the rows to be inserted */
        objects:
          | Array<ValueTypes['Currency_insert_input']>
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['Currency_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Currency_mutation_response'],
    ];
    insert_Currency_one?: [
      {
        /** the row to be inserted */
        object:
          | ValueTypes['Currency_insert_input']
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['Currency_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Currency'],
    ];
    insert_CustomRole?: [
      {
        /** the rows to be inserted */
        objects:
          | Array<ValueTypes['CustomRole_insert_input']>
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['CustomRole_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['CustomRole_mutation_response'],
    ];
    insert_CustomRole_one?: [
      {
        /** the row to be inserted */
        object:
          | ValueTypes['CustomRole_insert_input']
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['CustomRole_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['CustomRole'],
    ];
    insert_Group?: [
      {
        /** the rows to be inserted */
        objects:
          | Array<ValueTypes['Group_insert_input']>
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['Group_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Group_mutation_response'],
    ];
    insert_GroupRole?: [
      {
        /** the rows to be inserted */
        objects:
          | Array<ValueTypes['GroupRole_insert_input']>
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['GroupRole_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['GroupRole_mutation_response'],
    ];
    insert_GroupRole_one?: [
      {
        /** the row to be inserted */
        object:
          | ValueTypes['GroupRole_insert_input']
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['GroupRole_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['GroupRole'],
    ];
    insert_Group_one?: [
      {
        /** the row to be inserted */
        object:
          | ValueTypes['Group_insert_input']
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['Group_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Group'],
    ];
    insert_Industry?: [
      {
        /** the rows to be inserted */
        objects:
          | Array<ValueTypes['Industry_insert_input']>
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['Industry_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Industry_mutation_response'],
    ];
    insert_Industry_one?: [
      {
        /** the row to be inserted */
        object:
          | ValueTypes['Industry_insert_input']
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['Industry_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Industry'],
    ];
    insert_IssueCategory?: [
      {
        /** the rows to be inserted */
        objects:
          | Array<ValueTypes['IssueCategory_insert_input']>
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['IssueCategory_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['IssueCategory_mutation_response'],
    ];
    insert_IssueCategory_one?: [
      {
        /** the row to be inserted */
        object:
          | ValueTypes['IssueCategory_insert_input']
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['IssueCategory_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['IssueCategory'],
    ];
    insert_Object?: [
      {
        /** the rows to be inserted */
        objects:
          | Array<ValueTypes['Object_insert_input']>
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['Object_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Object_mutation_response'],
    ];
    insert_Object_one?: [
      {
        /** the row to be inserted */
        object:
          | ValueTypes['Object_insert_input']
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['Object_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Object'],
    ];
    insert_Organization?: [
      {
        /** the rows to be inserted */
        objects:
          | Array<ValueTypes['Organization_insert_input']>
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['Organization_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Organization_mutation_response'],
    ];
    insert_Organization_one?: [
      {
        /** the row to be inserted */
        object:
          | ValueTypes['Organization_insert_input']
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['Organization_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Organization'],
    ];
    insert_Package?: [
      {
        /** the rows to be inserted */
        objects:
          | Array<ValueTypes['Package_insert_input']>
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['Package_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Package_mutation_response'],
    ];
    insert_PackageApplication?: [
      {
        /** the rows to be inserted */
        objects:
          | Array<ValueTypes['PackageApplication_insert_input']>
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['PackageApplication_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['PackageApplication_mutation_response'],
    ];
    insert_PackageApplication_one?: [
      {
        /** the row to be inserted */
        object:
          | ValueTypes['PackageApplication_insert_input']
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['PackageApplication_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['PackageApplication'],
    ];
    insert_Package_one?: [
      {
        /** the row to be inserted */
        object:
          | ValueTypes['Package_insert_input']
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['Package_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Package'],
    ];
    insert_Product?: [
      {
        /** the rows to be inserted */
        objects:
          | Array<ValueTypes['Product_insert_input']>
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['Product_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Product_mutation_response'],
    ];
    insert_ProductCategory?: [
      {
        /** the rows to be inserted */
        objects:
          | Array<ValueTypes['ProductCategory_insert_input']>
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['ProductCategory_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ProductCategory_mutation_response'],
    ];
    insert_ProductCategory_one?: [
      {
        /** the row to be inserted */
        object:
          | ValueTypes['ProductCategory_insert_input']
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['ProductCategory_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ProductCategory'],
    ];
    insert_ProductVersion?: [
      {
        /** the rows to be inserted */
        objects:
          | Array<ValueTypes['ProductVersion_insert_input']>
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['ProductVersion_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ProductVersion_mutation_response'],
    ];
    insert_ProductVersion_one?: [
      {
        /** the row to be inserted */
        object:
          | ValueTypes['ProductVersion_insert_input']
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['ProductVersion_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ProductVersion'],
    ];
    insert_Product_one?: [
      {
        /** the row to be inserted */
        object:
          | ValueTypes['Product_insert_input']
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['Product_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Product'],
    ];
    insert_Role?: [
      {
        /** the rows to be inserted */
        objects:
          | Array<ValueTypes['Role_insert_input']>
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['Role_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Role_mutation_response'],
    ];
    insert_Role_one?: [
      {
        /** the row to be inserted */
        object:
          | ValueTypes['Role_insert_input']
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['Role_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Role'],
    ];
    insert_Status?: [
      {
        /** the rows to be inserted */
        objects:
          | Array<ValueTypes['Status_insert_input']>
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['Status_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Status_mutation_response'],
    ];
    insert_Status_one?: [
      {
        /** the row to be inserted */
        object:
          | ValueTypes['Status_insert_input']
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['Status_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Status'],
    ];
    insert_Task?: [
      {
        /** the rows to be inserted */
        objects:
          | Array<ValueTypes['Task_insert_input']>
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['Task_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Task_mutation_response'],
    ];
    insert_Task_one?: [
      {
        /** the row to be inserted */
        object:
          | ValueTypes['Task_insert_input']
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['Task_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Task'],
    ];
    insert_Tenant?: [
      {
        /** the rows to be inserted */
        objects:
          | Array<ValueTypes['Tenant_insert_input']>
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['Tenant_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Tenant_mutation_response'],
    ];
    insert_TenantPackage?: [
      {
        /** the rows to be inserted */
        objects:
          | Array<ValueTypes['TenantPackage_insert_input']>
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['TenantPackage_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['TenantPackage_mutation_response'],
    ];
    insert_TenantPackage_one?: [
      {
        /** the row to be inserted */
        object:
          | ValueTypes['TenantPackage_insert_input']
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['TenantPackage_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['TenantPackage'],
    ];
    insert_Tenant_one?: [
      {
        /** the row to be inserted */
        object:
          | ValueTypes['Tenant_insert_input']
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['Tenant_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Tenant'],
    ];
    insert_User?: [
      {
        /** the rows to be inserted */
        objects:
          | Array<ValueTypes['User_insert_input']>
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['User_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['User_mutation_response'],
    ];
    insert_UserGroup?: [
      {
        /** the rows to be inserted */
        objects:
          | Array<ValueTypes['UserGroup_insert_input']>
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['UserGroup_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserGroup_mutation_response'],
    ];
    insert_UserGroup_one?: [
      {
        /** the row to be inserted */
        object:
          | ValueTypes['UserGroup_insert_input']
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['UserGroup_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserGroup'],
    ];
    insert_UserRole?: [
      {
        /** the rows to be inserted */
        objects:
          | Array<ValueTypes['UserRole_insert_input']>
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['UserRole_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserRole_mutation_response'],
    ];
    insert_UserRole_one?: [
      {
        /** the row to be inserted */
        object:
          | ValueTypes['UserRole_insert_input']
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['UserRole_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserRole'],
    ];
    insert_UserType?: [
      {
        /** the rows to be inserted */
        objects:
          | Array<ValueTypes['UserType_insert_input']>
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['UserType_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserType_mutation_response'],
    ];
    insert_UserType_one?: [
      {
        /** the row to be inserted */
        object:
          | ValueTypes['UserType_insert_input']
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['UserType_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserType'],
    ];
    insert_User_one?: [
      {
        /** the row to be inserted */
        object:
          | ValueTypes['User_insert_input']
          | Variable<any, string> /** upsert condition */;
        on_conflict?:
          | ValueTypes['User_on_conflict']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['User'],
    ];
    update_Application?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['Application_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['Application_set_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** filter the rows which have to be updated */;
        where: ValueTypes['Application_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['Application_mutation_response'],
    ];
    update_ApplicationIntegration?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['ApplicationIntegration_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['ApplicationIntegration_set_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** filter the rows which have to be updated */;
        where:
          | ValueTypes['ApplicationIntegration_bool_exp']
          | Variable<any, string>;
      },
      ValueTypes['ApplicationIntegration_mutation_response'],
    ];
    update_ApplicationIntegration_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['ApplicationIntegration_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['ApplicationIntegration_set_input']
          | undefined
          | null
          | Variable<any, string>;
        pk_columns:
          | ValueTypes['ApplicationIntegration_pk_columns_input']
          | Variable<any, string>;
      },
      ValueTypes['ApplicationIntegration'],
    ];
    update_ApplicationIntegration_many?: [
      {
        /** updates to execute, in order */
        updates:
          | Array<ValueTypes['ApplicationIntegration_updates']>
          | Variable<any, string>;
      },
      ValueTypes['ApplicationIntegration_mutation_response'],
    ];
    update_Application_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['Application_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['Application_set_input']
          | undefined
          | null
          | Variable<any, string>;
        pk_columns:
          | ValueTypes['Application_pk_columns_input']
          | Variable<any, string>;
      },
      ValueTypes['Application'],
    ];
    update_Application_many?: [
      {
        /** updates to execute, in order */
        updates:
          | Array<ValueTypes['Application_updates']>
          | Variable<any, string>;
      },
      ValueTypes['Application_mutation_response'],
    ];
    update_CaseSeverity?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['CaseSeverity_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['CaseSeverity_set_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** filter the rows which have to be updated */;
        where: ValueTypes['CaseSeverity_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['CaseSeverity_mutation_response'],
    ];
    update_CaseSeverity_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['CaseSeverity_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['CaseSeverity_set_input']
          | undefined
          | null
          | Variable<any, string>;
        pk_columns:
          | ValueTypes['CaseSeverity_pk_columns_input']
          | Variable<any, string>;
      },
      ValueTypes['CaseSeverity'],
    ];
    update_CaseSeverity_many?: [
      {
        /** updates to execute, in order */
        updates:
          | Array<ValueTypes['CaseSeverity_updates']>
          | Variable<any, string>;
      },
      ValueTypes['CaseSeverity_mutation_response'],
    ];
    update_ClosureReason?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['ClosureReason_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['ClosureReason_set_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** filter the rows which have to be updated */;
        where: ValueTypes['ClosureReason_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['ClosureReason_mutation_response'],
    ];
    update_ClosureReason_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['ClosureReason_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['ClosureReason_set_input']
          | undefined
          | null
          | Variable<any, string>;
        pk_columns:
          | ValueTypes['ClosureReason_pk_columns_input']
          | Variable<any, string>;
      },
      ValueTypes['ClosureReason'],
    ];
    update_ClosureReason_many?: [
      {
        /** updates to execute, in order */
        updates:
          | Array<ValueTypes['ClosureReason_updates']>
          | Variable<any, string>;
      },
      ValueTypes['ClosureReason_mutation_response'],
    ];
    update_Currency?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['Currency_set_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** filter the rows which have to be updated */;
        where: ValueTypes['Currency_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['Currency_mutation_response'],
    ];
    update_Currency_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['Currency_set_input']
          | undefined
          | null
          | Variable<any, string>;
        pk_columns:
          | ValueTypes['Currency_pk_columns_input']
          | Variable<any, string>;
      },
      ValueTypes['Currency'],
    ];
    update_Currency_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ValueTypes['Currency_updates']> | Variable<any, string>;
      },
      ValueTypes['Currency_mutation_response'],
    ];
    update_CustomRole?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['CustomRole_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['CustomRole_set_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** filter the rows which have to be updated */;
        where: ValueTypes['CustomRole_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['CustomRole_mutation_response'],
    ];
    update_CustomRole_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['CustomRole_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['CustomRole_set_input']
          | undefined
          | null
          | Variable<any, string>;
        pk_columns:
          | ValueTypes['CustomRole_pk_columns_input']
          | Variable<any, string>;
      },
      ValueTypes['CustomRole'],
    ];
    update_CustomRole_many?: [
      {
        /** updates to execute, in order */
        updates:
          | Array<ValueTypes['CustomRole_updates']>
          | Variable<any, string>;
      },
      ValueTypes['CustomRole_mutation_response'],
    ];
    update_Group?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['Group_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['Group_set_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** filter the rows which have to be updated */;
        where: ValueTypes['Group_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['Group_mutation_response'],
    ];
    update_GroupRole?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['GroupRole_set_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** filter the rows which have to be updated */;
        where: ValueTypes['GroupRole_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['GroupRole_mutation_response'],
    ];
    update_GroupRole_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['GroupRole_set_input']
          | undefined
          | null
          | Variable<any, string>;
        pk_columns:
          | ValueTypes['GroupRole_pk_columns_input']
          | Variable<any, string>;
      },
      ValueTypes['GroupRole'],
    ];
    update_GroupRole_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ValueTypes['GroupRole_updates']> | Variable<any, string>;
      },
      ValueTypes['GroupRole_mutation_response'],
    ];
    update_Group_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['Group_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['Group_set_input']
          | undefined
          | null
          | Variable<any, string>;
        pk_columns:
          | ValueTypes['Group_pk_columns_input']
          | Variable<any, string>;
      },
      ValueTypes['Group'],
    ];
    update_Group_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ValueTypes['Group_updates']> | Variable<any, string>;
      },
      ValueTypes['Group_mutation_response'],
    ];
    update_Industry?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['Industry_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['Industry_set_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** filter the rows which have to be updated */;
        where: ValueTypes['Industry_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['Industry_mutation_response'],
    ];
    update_Industry_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['Industry_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['Industry_set_input']
          | undefined
          | null
          | Variable<any, string>;
        pk_columns:
          | ValueTypes['Industry_pk_columns_input']
          | Variable<any, string>;
      },
      ValueTypes['Industry'],
    ];
    update_Industry_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ValueTypes['Industry_updates']> | Variable<any, string>;
      },
      ValueTypes['Industry_mutation_response'],
    ];
    update_IssueCategory?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['IssueCategory_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['IssueCategory_set_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** filter the rows which have to be updated */;
        where: ValueTypes['IssueCategory_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['IssueCategory_mutation_response'],
    ];
    update_IssueCategory_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['IssueCategory_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['IssueCategory_set_input']
          | undefined
          | null
          | Variable<any, string>;
        pk_columns:
          | ValueTypes['IssueCategory_pk_columns_input']
          | Variable<any, string>;
      },
      ValueTypes['IssueCategory'],
    ];
    update_IssueCategory_many?: [
      {
        /** updates to execute, in order */
        updates:
          | Array<ValueTypes['IssueCategory_updates']>
          | Variable<any, string>;
      },
      ValueTypes['IssueCategory_mutation_response'],
    ];
    update_Object?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['Object_set_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** filter the rows which have to be updated */;
        where: ValueTypes['Object_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['Object_mutation_response'],
    ];
    update_Object_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['Object_set_input']
          | undefined
          | null
          | Variable<any, string>;
        pk_columns:
          | ValueTypes['Object_pk_columns_input']
          | Variable<any, string>;
      },
      ValueTypes['Object'],
    ];
    update_Object_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ValueTypes['Object_updates']> | Variable<any, string>;
      },
      ValueTypes['Object_mutation_response'],
    ];
    update_Organization?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['Organization_set_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** filter the rows which have to be updated */;
        where: ValueTypes['Organization_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['Organization_mutation_response'],
    ];
    update_Organization_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['Organization_set_input']
          | undefined
          | null
          | Variable<any, string>;
        pk_columns:
          | ValueTypes['Organization_pk_columns_input']
          | Variable<any, string>;
      },
      ValueTypes['Organization'],
    ];
    update_Organization_many?: [
      {
        /** updates to execute, in order */
        updates:
          | Array<ValueTypes['Organization_updates']>
          | Variable<any, string>;
      },
      ValueTypes['Organization_mutation_response'],
    ];
    update_Package?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['Package_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['Package_set_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** filter the rows which have to be updated */;
        where: ValueTypes['Package_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['Package_mutation_response'],
    ];
    update_PackageApplication?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['PackageApplication_set_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** filter the rows which have to be updated */;
        where:
          | ValueTypes['PackageApplication_bool_exp']
          | Variable<any, string>;
      },
      ValueTypes['PackageApplication_mutation_response'],
    ];
    update_PackageApplication_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['PackageApplication_set_input']
          | undefined
          | null
          | Variable<any, string>;
        pk_columns:
          | ValueTypes['PackageApplication_pk_columns_input']
          | Variable<any, string>;
      },
      ValueTypes['PackageApplication'],
    ];
    update_PackageApplication_many?: [
      {
        /** updates to execute, in order */
        updates:
          | Array<ValueTypes['PackageApplication_updates']>
          | Variable<any, string>;
      },
      ValueTypes['PackageApplication_mutation_response'],
    ];
    update_Package_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['Package_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['Package_set_input']
          | undefined
          | null
          | Variable<any, string>;
        pk_columns:
          | ValueTypes['Package_pk_columns_input']
          | Variable<any, string>;
      },
      ValueTypes['Package'],
    ];
    update_Package_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ValueTypes['Package_updates']> | Variable<any, string>;
      },
      ValueTypes['Package_mutation_response'],
    ];
    update_Product?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['Product_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['Product_set_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** filter the rows which have to be updated */;
        where: ValueTypes['Product_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['Product_mutation_response'],
    ];
    update_ProductCategory?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['ProductCategory_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['ProductCategory_set_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** filter the rows which have to be updated */;
        where: ValueTypes['ProductCategory_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['ProductCategory_mutation_response'],
    ];
    update_ProductCategory_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['ProductCategory_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['ProductCategory_set_input']
          | undefined
          | null
          | Variable<any, string>;
        pk_columns:
          | ValueTypes['ProductCategory_pk_columns_input']
          | Variable<any, string>;
      },
      ValueTypes['ProductCategory'],
    ];
    update_ProductCategory_many?: [
      {
        /** updates to execute, in order */
        updates:
          | Array<ValueTypes['ProductCategory_updates']>
          | Variable<any, string>;
      },
      ValueTypes['ProductCategory_mutation_response'],
    ];
    update_ProductVersion?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['ProductVersion_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['ProductVersion_set_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** filter the rows which have to be updated */;
        where: ValueTypes['ProductVersion_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['ProductVersion_mutation_response'],
    ];
    update_ProductVersion_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['ProductVersion_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['ProductVersion_set_input']
          | undefined
          | null
          | Variable<any, string>;
        pk_columns:
          | ValueTypes['ProductVersion_pk_columns_input']
          | Variable<any, string>;
      },
      ValueTypes['ProductVersion'],
    ];
    update_ProductVersion_many?: [
      {
        /** updates to execute, in order */
        updates:
          | Array<ValueTypes['ProductVersion_updates']>
          | Variable<any, string>;
      },
      ValueTypes['ProductVersion_mutation_response'],
    ];
    update_Product_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['Product_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['Product_set_input']
          | undefined
          | null
          | Variable<any, string>;
        pk_columns:
          | ValueTypes['Product_pk_columns_input']
          | Variable<any, string>;
      },
      ValueTypes['Product'],
    ];
    update_Product_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ValueTypes['Product_updates']> | Variable<any, string>;
      },
      ValueTypes['Product_mutation_response'],
    ];
    update_Role?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['Role_set_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** filter the rows which have to be updated */;
        where: ValueTypes['Role_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['Role_mutation_response'],
    ];
    update_Role_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['Role_set_input']
          | undefined
          | null
          | Variable<any, string>;
        pk_columns: ValueTypes['Role_pk_columns_input'] | Variable<any, string>;
      },
      ValueTypes['Role'],
    ];
    update_Role_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ValueTypes['Role_updates']> | Variable<any, string>;
      },
      ValueTypes['Role_mutation_response'],
    ];
    update_Status?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['Status_set_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** filter the rows which have to be updated */;
        where: ValueTypes['Status_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['Status_mutation_response'],
    ];
    update_Status_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['Status_set_input']
          | undefined
          | null
          | Variable<any, string>;
        pk_columns:
          | ValueTypes['Status_pk_columns_input']
          | Variable<any, string>;
      },
      ValueTypes['Status'],
    ];
    update_Status_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ValueTypes['Status_updates']> | Variable<any, string>;
      },
      ValueTypes['Status_mutation_response'],
    ];
    update_Task?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['Task_set_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** filter the rows which have to be updated */;
        where: ValueTypes['Task_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['Task_mutation_response'],
    ];
    update_Task_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['Task_set_input']
          | undefined
          | null
          | Variable<any, string>;
        pk_columns: ValueTypes['Task_pk_columns_input'] | Variable<any, string>;
      },
      ValueTypes['Task'],
    ];
    update_Task_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ValueTypes['Task_updates']> | Variable<any, string>;
      },
      ValueTypes['Task_mutation_response'],
    ];
    update_Tenant?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['Tenant_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['Tenant_set_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** filter the rows which have to be updated */;
        where: ValueTypes['Tenant_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['Tenant_mutation_response'],
    ];
    update_TenantPackage?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['TenantPackage_set_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** filter the rows which have to be updated */;
        where: ValueTypes['TenantPackage_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['TenantPackage_mutation_response'],
    ];
    update_TenantPackage_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['TenantPackage_set_input']
          | undefined
          | null
          | Variable<any, string>;
        pk_columns:
          | ValueTypes['TenantPackage_pk_columns_input']
          | Variable<any, string>;
      },
      ValueTypes['TenantPackage'],
    ];
    update_TenantPackage_many?: [
      {
        /** updates to execute, in order */
        updates:
          | Array<ValueTypes['TenantPackage_updates']>
          | Variable<any, string>;
      },
      ValueTypes['TenantPackage_mutation_response'],
    ];
    update_Tenant_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['Tenant_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['Tenant_set_input']
          | undefined
          | null
          | Variable<any, string>;
        pk_columns:
          | ValueTypes['Tenant_pk_columns_input']
          | Variable<any, string>;
      },
      ValueTypes['Tenant'],
    ];
    update_Tenant_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ValueTypes['Tenant_updates']> | Variable<any, string>;
      },
      ValueTypes['Tenant_mutation_response'],
    ];
    update_User?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['User_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['User_set_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** filter the rows which have to be updated */;
        where: ValueTypes['User_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['User_mutation_response'],
    ];
    update_UserGroup?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['UserGroup_set_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** filter the rows which have to be updated */;
        where: ValueTypes['UserGroup_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['UserGroup_mutation_response'],
    ];
    update_UserGroup_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['UserGroup_set_input']
          | undefined
          | null
          | Variable<any, string>;
        pk_columns:
          | ValueTypes['UserGroup_pk_columns_input']
          | Variable<any, string>;
      },
      ValueTypes['UserGroup'],
    ];
    update_UserGroup_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ValueTypes['UserGroup_updates']> | Variable<any, string>;
      },
      ValueTypes['UserGroup_mutation_response'],
    ];
    update_UserRole?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['UserRole_set_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** filter the rows which have to be updated */;
        where: ValueTypes['UserRole_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['UserRole_mutation_response'],
    ];
    update_UserRole_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['UserRole_set_input']
          | undefined
          | null
          | Variable<any, string>;
        pk_columns:
          | ValueTypes['UserRole_pk_columns_input']
          | Variable<any, string>;
      },
      ValueTypes['UserRole'],
    ];
    update_UserRole_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ValueTypes['UserRole_updates']> | Variable<any, string>;
      },
      ValueTypes['UserRole_mutation_response'],
    ];
    update_UserType?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['UserType_set_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** filter the rows which have to be updated */;
        where: ValueTypes['UserType_bool_exp'] | Variable<any, string>;
      },
      ValueTypes['UserType_mutation_response'],
    ];
    update_UserType_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ValueTypes['UserType_set_input']
          | undefined
          | null
          | Variable<any, string>;
        pk_columns:
          | ValueTypes['UserType_pk_columns_input']
          | Variable<any, string>;
      },
      ValueTypes['UserType'],
    ];
    update_UserType_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ValueTypes['UserType_updates']> | Variable<any, string>;
      },
      ValueTypes['UserType_mutation_response'],
    ];
    update_User_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ValueTypes['User_inc_input']
          | undefined
          | null
          | Variable<
              any,
              string
            > /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ValueTypes['User_set_input']
          | undefined
          | null
          | Variable<any, string>;
        pk_columns: ValueTypes['User_pk_columns_input'] | Variable<any, string>;
      },
      ValueTypes['User'],
    ];
    update_User_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ValueTypes['User_updates']> | Variable<any, string>;
      },
      ValueTypes['User_mutation_response'],
    ];
    __typename?: boolean | `@${string}`;
  }>;
  /** column ordering options */
  ['order_by']: order_by;
  ['query_root']: AliasType<{
    Application?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Application_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Application_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Application_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Application'],
    ];
    ApplicationIntegration?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['ApplicationIntegration_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['ApplicationIntegration_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['ApplicationIntegration_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ApplicationIntegration'],
    ];
    ApplicationIntegration_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['ApplicationIntegration_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['ApplicationIntegration_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['ApplicationIntegration_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ApplicationIntegration_aggregate'],
    ];
    ApplicationIntegration_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['ApplicationIntegration'],
    ];
    Application_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Application_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Application_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Application_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Application_aggregate'],
    ];
    Application_by_pk?: [
      { id: string | Variable<any, string> },
      ValueTypes['Application'],
    ];
    CaseSeverity?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['CaseSeverity_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['CaseSeverity_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['CaseSeverity_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['CaseSeverity'],
    ];
    CaseSeverity_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['CaseSeverity_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['CaseSeverity_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['CaseSeverity_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['CaseSeverity_aggregate'],
    ];
    CaseSeverity_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['CaseSeverity'],
    ];
    ClosureReason?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['ClosureReason_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['ClosureReason_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['ClosureReason_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ClosureReason'],
    ];
    ClosureReason_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['ClosureReason_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['ClosureReason_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['ClosureReason_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ClosureReason_aggregate'],
    ];
    ClosureReason_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['ClosureReason'],
    ];
    Currency?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Currency_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Currency_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Currency_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Currency'],
    ];
    Currency_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Currency_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Currency_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Currency_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Currency_aggregate'],
    ];
    Currency_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['Currency'],
    ];
    CustomRole?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['CustomRole_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['CustomRole_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['CustomRole_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['CustomRole'],
    ];
    CustomRole_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['CustomRole_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['CustomRole_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['CustomRole_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['CustomRole_aggregate'],
    ];
    CustomRole_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['CustomRole'],
    ];
    Group?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Group_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Group_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Group_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Group'],
    ];
    GroupRole?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['GroupRole_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['GroupRole_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['GroupRole_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['GroupRole'],
    ];
    GroupRole_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['GroupRole_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['GroupRole_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['GroupRole_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['GroupRole_aggregate'],
    ];
    GroupRole_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['GroupRole'],
    ];
    Group_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Group_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Group_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Group_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Group_aggregate'],
    ];
    Group_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['Group'],
    ];
    Industry?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Industry_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Industry_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Industry_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Industry'],
    ];
    Industry_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Industry_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Industry_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Industry_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Industry_aggregate'],
    ];
    Industry_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['Industry'],
    ];
    IssueCategory?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['IssueCategory_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['IssueCategory_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['IssueCategory_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['IssueCategory'],
    ];
    IssueCategory_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['IssueCategory_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['IssueCategory_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['IssueCategory_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['IssueCategory_aggregate'],
    ];
    IssueCategory_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['IssueCategory'],
    ];
    Object?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Object_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Object_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Object_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Object'],
    ];
    Object_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Object_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Object_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Object_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Object_aggregate'],
    ];
    Object_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['Object'],
    ];
    Organization?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Organization_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Organization_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Organization_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Organization'],
    ];
    Organization_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Organization_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Organization_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Organization_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Organization_aggregate'],
    ];
    Organization_by_pk?: [
      { id: string | Variable<any, string> },
      ValueTypes['Organization'],
    ];
    Package?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Package_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Package_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Package_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Package'],
    ];
    PackageApplication?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['PackageApplication_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['PackageApplication_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['PackageApplication_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['PackageApplication'],
    ];
    PackageApplication_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['PackageApplication_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['PackageApplication_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['PackageApplication_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['PackageApplication_aggregate'],
    ];
    PackageApplication_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['PackageApplication'],
    ];
    Package_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Package_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Package_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Package_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Package_aggregate'],
    ];
    Package_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['Package'],
    ];
    Product?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Product_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Product_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Product_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Product'],
    ];
    ProductCategory?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['ProductCategory_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['ProductCategory_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['ProductCategory_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ProductCategory'],
    ];
    ProductCategory_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['ProductCategory_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['ProductCategory_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['ProductCategory_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ProductCategory_aggregate'],
    ];
    ProductCategory_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['ProductCategory'],
    ];
    ProductVersion?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['ProductVersion_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['ProductVersion_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['ProductVersion_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ProductVersion'],
    ];
    ProductVersion_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['ProductVersion_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['ProductVersion_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['ProductVersion_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ProductVersion_aggregate'],
    ];
    ProductVersion_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['ProductVersion'],
    ];
    Product_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Product_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Product_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Product_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Product_aggregate'],
    ];
    Product_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['Product'],
    ];
    Role?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Role_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Role_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Role_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Role'],
    ];
    Role_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Role_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Role_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Role_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Role_aggregate'],
    ];
    Role_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['Role'],
    ];
    Status?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Status_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Status_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Status_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Status'],
    ];
    Status_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Status_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Status_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Status_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Status_aggregate'],
    ];
    Status_by_pk?: [
      { value: string | Variable<any, string> },
      ValueTypes['Status'],
    ];
    Task?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Task_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Task_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Task_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Task'],
    ];
    Task_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Task_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Task_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Task_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Task_aggregate'],
    ];
    Task_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['Task'],
    ];
    Tenant?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Tenant_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Tenant_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Tenant_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Tenant'],
    ];
    TenantPackage?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['TenantPackage_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['TenantPackage_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['TenantPackage_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['TenantPackage'],
    ];
    TenantPackage_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['TenantPackage_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['TenantPackage_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['TenantPackage_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['TenantPackage_aggregate'],
    ];
    TenantPackage_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['TenantPackage'],
    ];
    Tenant_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Tenant_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Tenant_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Tenant_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Tenant_aggregate'],
    ];
    Tenant_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['Tenant'],
    ];
    User?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['User_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['User_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['User_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['User'],
    ];
    UserGroup?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['UserGroup_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['UserGroup_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['UserGroup_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserGroup'],
    ];
    UserGroup_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['UserGroup_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['UserGroup_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['UserGroup_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserGroup_aggregate'],
    ];
    UserGroup_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['UserGroup'],
    ];
    UserRole?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['UserRole_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['UserRole_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['UserRole_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserRole'],
    ];
    UserRole_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['UserRole_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['UserRole_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['UserRole_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserRole_aggregate'],
    ];
    UserRole_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['UserRole'],
    ];
    UserType?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['UserType_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['UserType_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['UserType_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserType'],
    ];
    UserType_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['UserType_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['UserType_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['UserType_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserType_aggregate'],
    ];
    UserType_by_pk?: [
      { value: string | Variable<any, string> },
      ValueTypes['UserType'],
    ];
    User_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['User_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['User_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['User_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['User_aggregate'],
    ];
    User_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['User'],
    ];
    __typename?: boolean | `@${string}`;
  }>;
  ['subscription_root']: AliasType<{
    Application?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Application_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Application_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Application_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Application'],
    ];
    ApplicationIntegration?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['ApplicationIntegration_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['ApplicationIntegration_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['ApplicationIntegration_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ApplicationIntegration'],
    ];
    ApplicationIntegration_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['ApplicationIntegration_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['ApplicationIntegration_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['ApplicationIntegration_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ApplicationIntegration_aggregate'],
    ];
    ApplicationIntegration_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['ApplicationIntegration'],
    ];
    ApplicationIntegration_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size:
          | number
          | Variable<
              any,
              string
            > /** cursor to stream the results returned by the query */;
        cursor:
          | Array<
              | ValueTypes['ApplicationIntegration_stream_cursor_input']
              | undefined
              | null
            >
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['ApplicationIntegration_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ApplicationIntegration'],
    ];
    Application_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Application_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Application_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Application_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Application_aggregate'],
    ];
    Application_by_pk?: [
      { id: string | Variable<any, string> },
      ValueTypes['Application'],
    ];
    Application_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size:
          | number
          | Variable<
              any,
              string
            > /** cursor to stream the results returned by the query */;
        cursor:
          | Array<
              ValueTypes['Application_stream_cursor_input'] | undefined | null
            >
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Application_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Application'],
    ];
    CaseSeverity?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['CaseSeverity_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['CaseSeverity_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['CaseSeverity_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['CaseSeverity'],
    ];
    CaseSeverity_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['CaseSeverity_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['CaseSeverity_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['CaseSeverity_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['CaseSeverity_aggregate'],
    ];
    CaseSeverity_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['CaseSeverity'],
    ];
    CaseSeverity_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size:
          | number
          | Variable<
              any,
              string
            > /** cursor to stream the results returned by the query */;
        cursor:
          | Array<
              ValueTypes['CaseSeverity_stream_cursor_input'] | undefined | null
            >
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['CaseSeverity_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['CaseSeverity'],
    ];
    ClosureReason?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['ClosureReason_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['ClosureReason_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['ClosureReason_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ClosureReason'],
    ];
    ClosureReason_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['ClosureReason_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['ClosureReason_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['ClosureReason_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ClosureReason_aggregate'],
    ];
    ClosureReason_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['ClosureReason'],
    ];
    ClosureReason_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size:
          | number
          | Variable<
              any,
              string
            > /** cursor to stream the results returned by the query */;
        cursor:
          | Array<
              ValueTypes['ClosureReason_stream_cursor_input'] | undefined | null
            >
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['ClosureReason_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ClosureReason'],
    ];
    Currency?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Currency_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Currency_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Currency_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Currency'],
    ];
    Currency_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Currency_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Currency_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Currency_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Currency_aggregate'],
    ];
    Currency_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['Currency'],
    ];
    Currency_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size:
          | number
          | Variable<
              any,
              string
            > /** cursor to stream the results returned by the query */;
        cursor:
          | Array<ValueTypes['Currency_stream_cursor_input'] | undefined | null>
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Currency_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Currency'],
    ];
    CustomRole?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['CustomRole_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['CustomRole_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['CustomRole_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['CustomRole'],
    ];
    CustomRole_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['CustomRole_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['CustomRole_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['CustomRole_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['CustomRole_aggregate'],
    ];
    CustomRole_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['CustomRole'],
    ];
    CustomRole_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size:
          | number
          | Variable<
              any,
              string
            > /** cursor to stream the results returned by the query */;
        cursor:
          | Array<
              ValueTypes['CustomRole_stream_cursor_input'] | undefined | null
            >
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['CustomRole_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['CustomRole'],
    ];
    Group?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Group_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Group_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Group_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Group'],
    ];
    GroupRole?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['GroupRole_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['GroupRole_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['GroupRole_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['GroupRole'],
    ];
    GroupRole_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['GroupRole_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['GroupRole_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['GroupRole_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['GroupRole_aggregate'],
    ];
    GroupRole_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['GroupRole'],
    ];
    GroupRole_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size:
          | number
          | Variable<
              any,
              string
            > /** cursor to stream the results returned by the query */;
        cursor:
          | Array<
              ValueTypes['GroupRole_stream_cursor_input'] | undefined | null
            >
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['GroupRole_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['GroupRole'],
    ];
    Group_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Group_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Group_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Group_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Group_aggregate'],
    ];
    Group_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['Group'],
    ];
    Group_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size:
          | number
          | Variable<
              any,
              string
            > /** cursor to stream the results returned by the query */;
        cursor:
          | Array<ValueTypes['Group_stream_cursor_input'] | undefined | null>
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Group_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Group'],
    ];
    Industry?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Industry_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Industry_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Industry_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Industry'],
    ];
    Industry_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Industry_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Industry_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Industry_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Industry_aggregate'],
    ];
    Industry_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['Industry'],
    ];
    Industry_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size:
          | number
          | Variable<
              any,
              string
            > /** cursor to stream the results returned by the query */;
        cursor:
          | Array<ValueTypes['Industry_stream_cursor_input'] | undefined | null>
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Industry_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Industry'],
    ];
    IssueCategory?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['IssueCategory_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['IssueCategory_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['IssueCategory_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['IssueCategory'],
    ];
    IssueCategory_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['IssueCategory_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['IssueCategory_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['IssueCategory_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['IssueCategory_aggregate'],
    ];
    IssueCategory_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['IssueCategory'],
    ];
    IssueCategory_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size:
          | number
          | Variable<
              any,
              string
            > /** cursor to stream the results returned by the query */;
        cursor:
          | Array<
              ValueTypes['IssueCategory_stream_cursor_input'] | undefined | null
            >
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['IssueCategory_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['IssueCategory'],
    ];
    Object?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Object_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Object_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Object_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Object'],
    ];
    Object_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Object_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Object_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Object_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Object_aggregate'],
    ];
    Object_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['Object'],
    ];
    Object_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size:
          | number
          | Variable<
              any,
              string
            > /** cursor to stream the results returned by the query */;
        cursor:
          | Array<ValueTypes['Object_stream_cursor_input'] | undefined | null>
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Object_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Object'],
    ];
    Organization?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Organization_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Organization_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Organization_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Organization'],
    ];
    Organization_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Organization_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Organization_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Organization_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Organization_aggregate'],
    ];
    Organization_by_pk?: [
      { id: string | Variable<any, string> },
      ValueTypes['Organization'],
    ];
    Organization_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size:
          | number
          | Variable<
              any,
              string
            > /** cursor to stream the results returned by the query */;
        cursor:
          | Array<
              ValueTypes['Organization_stream_cursor_input'] | undefined | null
            >
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Organization_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Organization'],
    ];
    Package?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Package_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Package_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Package_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Package'],
    ];
    PackageApplication?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['PackageApplication_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['PackageApplication_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['PackageApplication_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['PackageApplication'],
    ];
    PackageApplication_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['PackageApplication_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['PackageApplication_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['PackageApplication_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['PackageApplication_aggregate'],
    ];
    PackageApplication_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['PackageApplication'],
    ];
    PackageApplication_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size:
          | number
          | Variable<
              any,
              string
            > /** cursor to stream the results returned by the query */;
        cursor:
          | Array<
              | ValueTypes['PackageApplication_stream_cursor_input']
              | undefined
              | null
            >
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['PackageApplication_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['PackageApplication'],
    ];
    Package_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Package_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Package_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Package_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Package_aggregate'],
    ];
    Package_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['Package'],
    ];
    Package_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size:
          | number
          | Variable<
              any,
              string
            > /** cursor to stream the results returned by the query */;
        cursor:
          | Array<ValueTypes['Package_stream_cursor_input'] | undefined | null>
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Package_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Package'],
    ];
    Product?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Product_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Product_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Product_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Product'],
    ];
    ProductCategory?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['ProductCategory_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['ProductCategory_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['ProductCategory_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ProductCategory'],
    ];
    ProductCategory_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['ProductCategory_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['ProductCategory_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['ProductCategory_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ProductCategory_aggregate'],
    ];
    ProductCategory_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['ProductCategory'],
    ];
    ProductCategory_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size:
          | number
          | Variable<
              any,
              string
            > /** cursor to stream the results returned by the query */;
        cursor:
          | Array<
              | ValueTypes['ProductCategory_stream_cursor_input']
              | undefined
              | null
            >
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['ProductCategory_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ProductCategory'],
    ];
    ProductVersion?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['ProductVersion_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['ProductVersion_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['ProductVersion_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ProductVersion'],
    ];
    ProductVersion_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['ProductVersion_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['ProductVersion_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['ProductVersion_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ProductVersion_aggregate'],
    ];
    ProductVersion_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['ProductVersion'],
    ];
    ProductVersion_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size:
          | number
          | Variable<
              any,
              string
            > /** cursor to stream the results returned by the query */;
        cursor:
          | Array<
              | ValueTypes['ProductVersion_stream_cursor_input']
              | undefined
              | null
            >
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['ProductVersion_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['ProductVersion'],
    ];
    Product_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Product_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Product_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Product_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Product_aggregate'],
    ];
    Product_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['Product'],
    ];
    Product_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size:
          | number
          | Variable<
              any,
              string
            > /** cursor to stream the results returned by the query */;
        cursor:
          | Array<ValueTypes['Product_stream_cursor_input'] | undefined | null>
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Product_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Product'],
    ];
    Role?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Role_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Role_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Role_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Role'],
    ];
    Role_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Role_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Role_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Role_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Role_aggregate'],
    ];
    Role_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['Role'],
    ];
    Role_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size:
          | number
          | Variable<
              any,
              string
            > /** cursor to stream the results returned by the query */;
        cursor:
          | Array<ValueTypes['Role_stream_cursor_input'] | undefined | null>
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Role_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Role'],
    ];
    Status?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Status_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Status_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Status_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Status'],
    ];
    Status_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Status_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Status_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Status_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Status_aggregate'],
    ];
    Status_by_pk?: [
      { value: string | Variable<any, string> },
      ValueTypes['Status'],
    ];
    Status_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size:
          | number
          | Variable<
              any,
              string
            > /** cursor to stream the results returned by the query */;
        cursor:
          | Array<ValueTypes['Status_stream_cursor_input'] | undefined | null>
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Status_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Status'],
    ];
    Task?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Task_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Task_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Task_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Task'],
    ];
    Task_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Task_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Task_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Task_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Task_aggregate'],
    ];
    Task_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['Task'],
    ];
    Task_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size:
          | number
          | Variable<
              any,
              string
            > /** cursor to stream the results returned by the query */;
        cursor:
          | Array<ValueTypes['Task_stream_cursor_input'] | undefined | null>
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Task_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Task'],
    ];
    Tenant?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Tenant_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Tenant_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Tenant_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Tenant'],
    ];
    TenantPackage?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['TenantPackage_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['TenantPackage_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['TenantPackage_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['TenantPackage'],
    ];
    TenantPackage_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['TenantPackage_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['TenantPackage_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['TenantPackage_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['TenantPackage_aggregate'],
    ];
    TenantPackage_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['TenantPackage'],
    ];
    TenantPackage_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size:
          | number
          | Variable<
              any,
              string
            > /** cursor to stream the results returned by the query */;
        cursor:
          | Array<
              ValueTypes['TenantPackage_stream_cursor_input'] | undefined | null
            >
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['TenantPackage_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['TenantPackage'],
    ];
    Tenant_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['Tenant_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['Tenant_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Tenant_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Tenant_aggregate'],
    ];
    Tenant_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['Tenant'],
    ];
    Tenant_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size:
          | number
          | Variable<
              any,
              string
            > /** cursor to stream the results returned by the query */;
        cursor:
          | Array<ValueTypes['Tenant_stream_cursor_input'] | undefined | null>
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['Tenant_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['Tenant'],
    ];
    User?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['User_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['User_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['User_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['User'],
    ];
    UserGroup?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['UserGroup_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['UserGroup_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['UserGroup_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserGroup'],
    ];
    UserGroup_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['UserGroup_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['UserGroup_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['UserGroup_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserGroup_aggregate'],
    ];
    UserGroup_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['UserGroup'],
    ];
    UserGroup_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size:
          | number
          | Variable<
              any,
              string
            > /** cursor to stream the results returned by the query */;
        cursor:
          | Array<
              ValueTypes['UserGroup_stream_cursor_input'] | undefined | null
            >
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['UserGroup_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserGroup'],
    ];
    UserRole?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['UserRole_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['UserRole_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['UserRole_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserRole'],
    ];
    UserRole_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['UserRole_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['UserRole_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['UserRole_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserRole_aggregate'],
    ];
    UserRole_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['UserRole'],
    ];
    UserRole_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size:
          | number
          | Variable<
              any,
              string
            > /** cursor to stream the results returned by the query */;
        cursor:
          | Array<ValueTypes['UserRole_stream_cursor_input'] | undefined | null>
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['UserRole_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserRole'],
    ];
    UserType?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['UserType_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['UserType_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['UserType_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserType'],
    ];
    UserType_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['UserType_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['UserType_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['UserType_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserType_aggregate'],
    ];
    UserType_by_pk?: [
      { value: string | Variable<any, string> },
      ValueTypes['UserType'],
    ];
    UserType_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size:
          | number
          | Variable<
              any,
              string
            > /** cursor to stream the results returned by the query */;
        cursor:
          | Array<ValueTypes['UserType_stream_cursor_input'] | undefined | null>
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['UserType_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['UserType'],
    ];
    User_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ValueTypes['User_select_column']>
          | undefined
          | null
          | Variable<any, string> /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null
          | Variable<
              any,
              string
            > /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null
          | Variable<any, string> /** sort the rows by one or more columns */;
        order_by?:
          | Array<ValueTypes['User_order_by']>
          | undefined
          | null
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['User_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['User_aggregate'],
    ];
    User_by_pk?: [
      { id: ValueTypes['uuid'] | Variable<any, string> },
      ValueTypes['User'],
    ];
    User_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size:
          | number
          | Variable<
              any,
              string
            > /** cursor to stream the results returned by the query */;
        cursor:
          | Array<ValueTypes['User_stream_cursor_input'] | undefined | null>
          | Variable<any, string> /** filter the rows returned */;
        where?:
          | ValueTypes['User_bool_exp']
          | undefined
          | null
          | Variable<any, string>;
      },
      ValueTypes['User'],
    ];
    __typename?: boolean | `@${string}`;
  }>;
  ['timestamp']: unknown;
  /** Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'. */
  ['timestamp_comparison_exp']: {
    _eq?: ValueTypes['timestamp'] | undefined | null | Variable<any, string>;
    _gt?: ValueTypes['timestamp'] | undefined | null | Variable<any, string>;
    _gte?: ValueTypes['timestamp'] | undefined | null | Variable<any, string>;
    _in?:
      | Array<ValueTypes['timestamp']>
      | undefined
      | null
      | Variable<any, string>;
    _is_null?: boolean | undefined | null | Variable<any, string>;
    _lt?: ValueTypes['timestamp'] | undefined | null | Variable<any, string>;
    _lte?: ValueTypes['timestamp'] | undefined | null | Variable<any, string>;
    _neq?: ValueTypes['timestamp'] | undefined | null | Variable<any, string>;
    _nin?:
      | Array<ValueTypes['timestamp']>
      | undefined
      | null
      | Variable<any, string>;
  };
  ['timestamptz']: unknown;
  /** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
  ['timestamptz_comparison_exp']: {
    _eq?: ValueTypes['timestamptz'] | undefined | null | Variable<any, string>;
    _gt?: ValueTypes['timestamptz'] | undefined | null | Variable<any, string>;
    _gte?: ValueTypes['timestamptz'] | undefined | null | Variable<any, string>;
    _in?:
      | Array<ValueTypes['timestamptz']>
      | undefined
      | null
      | Variable<any, string>;
    _is_null?: boolean | undefined | null | Variable<any, string>;
    _lt?: ValueTypes['timestamptz'] | undefined | null | Variable<any, string>;
    _lte?: ValueTypes['timestamptz'] | undefined | null | Variable<any, string>;
    _neq?: ValueTypes['timestamptz'] | undefined | null | Variable<any, string>;
    _nin?:
      | Array<ValueTypes['timestamptz']>
      | undefined
      | null
      | Variable<any, string>;
  };
  ['uuid']: unknown;
  /** Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'. */
  ['uuid_comparison_exp']: {
    _eq?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    _gt?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    _gte?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    _in?: Array<ValueTypes['uuid']> | undefined | null | Variable<any, string>;
    _is_null?: boolean | undefined | null | Variable<any, string>;
    _lt?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    _lte?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    _neq?: ValueTypes['uuid'] | undefined | null | Variable<any, string>;
    _nin?: Array<ValueTypes['uuid']> | undefined | null | Variable<any, string>;
  };
};

export type ResolverInputTypes = {
  ['schema']: AliasType<{
    query?: ResolverInputTypes['query_root'];
    mutation?: ResolverInputTypes['mutation_root'];
    subscription?: ResolverInputTypes['subscription_root'];
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "Application" */
  ['Application']: AliasType<{
    applicationIntegrations?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['ApplicationIntegration_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['ApplicationIntegration_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?:
          | ResolverInputTypes['ApplicationIntegration_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['ApplicationIntegration'],
    ];
    applicationIntegrations_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['ApplicationIntegration_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['ApplicationIntegration_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?:
          | ResolverInputTypes['ApplicationIntegration_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['ApplicationIntegration_aggregate'],
    ];
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    objects?: boolean | `@${string}`;
    packages?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['PackageApplication_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['PackageApplication_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?:
          | ResolverInputTypes['PackageApplication_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['PackageApplication'],
    ];
    packages_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['PackageApplication_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['PackageApplication_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?:
          | ResolverInputTypes['PackageApplication_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['PackageApplication_aggregate'],
    ];
    roles?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "ApplicationIntegration" */
  ['ApplicationIntegration']: AliasType<{
    /** An object relationship */
    application?: ResolverInputTypes['Application'];
    applicationId?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    menuName?: boolean | `@${string}`;
    menuURL?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    subMenus?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "ApplicationIntegration" */
  ['ApplicationIntegration_aggregate']: AliasType<{
    aggregate?: ResolverInputTypes['ApplicationIntegration_aggregate_fields'];
    nodes?: ResolverInputTypes['ApplicationIntegration'];
    __typename?: boolean | `@${string}`;
  }>;
  ['ApplicationIntegration_aggregate_bool_exp']: {
    count?:
      | ResolverInputTypes['ApplicationIntegration_aggregate_bool_exp_count']
      | undefined
      | null;
  };
  ['ApplicationIntegration_aggregate_bool_exp_count']: {
    arguments?:
      | Array<ResolverInputTypes['ApplicationIntegration_select_column']>
      | undefined
      | null;
    distinct?: boolean | undefined | null;
    filter?:
      | ResolverInputTypes['ApplicationIntegration_bool_exp']
      | undefined
      | null;
    predicate: ResolverInputTypes['Int_comparison_exp'];
  };
  /** aggregate fields of "ApplicationIntegration" */
  ['ApplicationIntegration_aggregate_fields']: AliasType<{
    avg?: ResolverInputTypes['ApplicationIntegration_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ResolverInputTypes['ApplicationIntegration_select_column']>
          | undefined
          | null;
        distinct?: boolean | undefined | null;
      },
      boolean | `@${string}`,
    ];
    max?: ResolverInputTypes['ApplicationIntegration_max_fields'];
    min?: ResolverInputTypes['ApplicationIntegration_min_fields'];
    stddev?: ResolverInputTypes['ApplicationIntegration_stddev_fields'];
    stddev_pop?: ResolverInputTypes['ApplicationIntegration_stddev_pop_fields'];
    stddev_samp?: ResolverInputTypes['ApplicationIntegration_stddev_samp_fields'];
    sum?: ResolverInputTypes['ApplicationIntegration_sum_fields'];
    var_pop?: ResolverInputTypes['ApplicationIntegration_var_pop_fields'];
    var_samp?: ResolverInputTypes['ApplicationIntegration_var_samp_fields'];
    variance?: ResolverInputTypes['ApplicationIntegration_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** order by aggregate values of table "ApplicationIntegration" */
  ['ApplicationIntegration_aggregate_order_by']: {
    avg?:
      | ResolverInputTypes['ApplicationIntegration_avg_order_by']
      | undefined
      | null;
    count?: ResolverInputTypes['order_by'] | undefined | null;
    max?:
      | ResolverInputTypes['ApplicationIntegration_max_order_by']
      | undefined
      | null;
    min?:
      | ResolverInputTypes['ApplicationIntegration_min_order_by']
      | undefined
      | null;
    stddev?:
      | ResolverInputTypes['ApplicationIntegration_stddev_order_by']
      | undefined
      | null;
    stddev_pop?:
      | ResolverInputTypes['ApplicationIntegration_stddev_pop_order_by']
      | undefined
      | null;
    stddev_samp?:
      | ResolverInputTypes['ApplicationIntegration_stddev_samp_order_by']
      | undefined
      | null;
    sum?:
      | ResolverInputTypes['ApplicationIntegration_sum_order_by']
      | undefined
      | null;
    var_pop?:
      | ResolverInputTypes['ApplicationIntegration_var_pop_order_by']
      | undefined
      | null;
    var_samp?:
      | ResolverInputTypes['ApplicationIntegration_var_samp_order_by']
      | undefined
      | null;
    variance?:
      | ResolverInputTypes['ApplicationIntegration_variance_order_by']
      | undefined
      | null;
  };
  /** input type for inserting array relation for remote table "ApplicationIntegration" */
  ['ApplicationIntegration_arr_rel_insert_input']: {
    data: Array<ResolverInputTypes['ApplicationIntegration_insert_input']>;
    /** upsert condition */
    on_conflict?:
      | ResolverInputTypes['ApplicationIntegration_on_conflict']
      | undefined
      | null;
  };
  /** aggregate avg on columns */
  ['ApplicationIntegration_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by avg() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_avg_order_by']: {
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** Boolean expression to filter rows from the table "ApplicationIntegration". All fields are combined with a logical 'AND'. */
  ['ApplicationIntegration_bool_exp']: {
    _and?:
      | Array<ResolverInputTypes['ApplicationIntegration_bool_exp']>
      | undefined
      | null;
    _not?:
      | ResolverInputTypes['ApplicationIntegration_bool_exp']
      | undefined
      | null;
    _or?:
      | Array<ResolverInputTypes['ApplicationIntegration_bool_exp']>
      | undefined
      | null;
    application?: ResolverInputTypes['Application_bool_exp'] | undefined | null;
    applicationId?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    cursorId?: ResolverInputTypes['bigint_comparison_exp'] | undefined | null;
    description?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    id?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    menuName?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    menuURL?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    name?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    subMenus?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
  };
  /** unique or primary key constraints on table "ApplicationIntegration" */
  ['ApplicationIntegration_constraint']: ApplicationIntegration_constraint;
  /** input type for incrementing numeric columns in table "ApplicationIntegration" */
  ['ApplicationIntegration_inc_input']: {
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
  };
  /** input type for inserting data into table "ApplicationIntegration" */
  ['ApplicationIntegration_insert_input']: {
    application?:
      | ResolverInputTypes['Application_obj_rel_insert_input']
      | undefined
      | null;
    applicationId?: string | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    menuName?: string | undefined | null;
    menuURL?: string | undefined | null;
    name?: string | undefined | null;
    subMenus?: string | undefined | null;
  };
  /** aggregate max on columns */
  ['ApplicationIntegration_max_fields']: AliasType<{
    applicationId?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    menuName?: boolean | `@${string}`;
    menuURL?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    subMenus?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by max() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_max_order_by']: {
    applicationId?: ResolverInputTypes['order_by'] | undefined | null;
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
    description?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    menuName?: ResolverInputTypes['order_by'] | undefined | null;
    menuURL?: ResolverInputTypes['order_by'] | undefined | null;
    name?: ResolverInputTypes['order_by'] | undefined | null;
    subMenus?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** aggregate min on columns */
  ['ApplicationIntegration_min_fields']: AliasType<{
    applicationId?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    menuName?: boolean | `@${string}`;
    menuURL?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    subMenus?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by min() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_min_order_by']: {
    applicationId?: ResolverInputTypes['order_by'] | undefined | null;
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
    description?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    menuName?: ResolverInputTypes['order_by'] | undefined | null;
    menuURL?: ResolverInputTypes['order_by'] | undefined | null;
    name?: ResolverInputTypes['order_by'] | undefined | null;
    subMenus?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** response of any mutation on the table "ApplicationIntegration" */
  ['ApplicationIntegration_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ResolverInputTypes['ApplicationIntegration'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "ApplicationIntegration" */
  ['ApplicationIntegration_on_conflict']: {
    constraint: ResolverInputTypes['ApplicationIntegration_constraint'];
    update_columns: Array<
      ResolverInputTypes['ApplicationIntegration_update_column']
    >;
    where?:
      | ResolverInputTypes['ApplicationIntegration_bool_exp']
      | undefined
      | null;
  };
  /** Ordering options when selecting data from "ApplicationIntegration". */
  ['ApplicationIntegration_order_by']: {
    application?: ResolverInputTypes['Application_order_by'] | undefined | null;
    applicationId?: ResolverInputTypes['order_by'] | undefined | null;
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
    description?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    menuName?: ResolverInputTypes['order_by'] | undefined | null;
    menuURL?: ResolverInputTypes['order_by'] | undefined | null;
    name?: ResolverInputTypes['order_by'] | undefined | null;
    subMenus?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** primary key columns input for table: ApplicationIntegration */
  ['ApplicationIntegration_pk_columns_input']: {
    id: ResolverInputTypes['uuid'];
  };
  /** select columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_select_column']: ApplicationIntegration_select_column;
  /** input type for updating data in table "ApplicationIntegration" */
  ['ApplicationIntegration_set_input']: {
    applicationId?: string | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    menuName?: string | undefined | null;
    menuURL?: string | undefined | null;
    name?: string | undefined | null;
    subMenus?: string | undefined | null;
  };
  /** aggregate stddev on columns */
  ['ApplicationIntegration_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by stddev() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_stddev_order_by']: {
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** aggregate stddev_pop on columns */
  ['ApplicationIntegration_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by stddev_pop() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_stddev_pop_order_by']: {
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** aggregate stddev_samp on columns */
  ['ApplicationIntegration_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by stddev_samp() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_stddev_samp_order_by']: {
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** Streaming cursor of the table "ApplicationIntegration" */
  ['ApplicationIntegration_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ResolverInputTypes['ApplicationIntegration_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ResolverInputTypes['cursor_ordering'] | undefined | null;
  };
  /** Initial value of the column from where the streaming should start */
  ['ApplicationIntegration_stream_cursor_value_input']: {
    applicationId?: string | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    menuName?: string | undefined | null;
    menuURL?: string | undefined | null;
    name?: string | undefined | null;
    subMenus?: string | undefined | null;
  };
  /** aggregate sum on columns */
  ['ApplicationIntegration_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by sum() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_sum_order_by']: {
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** update columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_update_column']: ApplicationIntegration_update_column;
  ['ApplicationIntegration_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?:
      | ResolverInputTypes['ApplicationIntegration_inc_input']
      | undefined
      | null;
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ResolverInputTypes['ApplicationIntegration_set_input']
      | undefined
      | null;
    /** filter the rows which have to be updated */
    where: ResolverInputTypes['ApplicationIntegration_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['ApplicationIntegration_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by var_pop() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_var_pop_order_by']: {
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** aggregate var_samp on columns */
  ['ApplicationIntegration_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by var_samp() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_var_samp_order_by']: {
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** aggregate variance on columns */
  ['ApplicationIntegration_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by variance() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_variance_order_by']: {
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** aggregated selection of "Application" */
  ['Application_aggregate']: AliasType<{
    aggregate?: ResolverInputTypes['Application_aggregate_fields'];
    nodes?: ResolverInputTypes['Application'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "Application" */
  ['Application_aggregate_fields']: AliasType<{
    avg?: ResolverInputTypes['Application_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ResolverInputTypes['Application_select_column']>
          | undefined
          | null;
        distinct?: boolean | undefined | null;
      },
      boolean | `@${string}`,
    ];
    max?: ResolverInputTypes['Application_max_fields'];
    min?: ResolverInputTypes['Application_min_fields'];
    stddev?: ResolverInputTypes['Application_stddev_fields'];
    stddev_pop?: ResolverInputTypes['Application_stddev_pop_fields'];
    stddev_samp?: ResolverInputTypes['Application_stddev_samp_fields'];
    sum?: ResolverInputTypes['Application_sum_fields'];
    var_pop?: ResolverInputTypes['Application_var_pop_fields'];
    var_samp?: ResolverInputTypes['Application_var_samp_fields'];
    variance?: ResolverInputTypes['Application_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate avg on columns */
  ['Application_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "Application". All fields are combined with a logical 'AND'. */
  ['Application_bool_exp']: {
    _and?: Array<ResolverInputTypes['Application_bool_exp']> | undefined | null;
    _not?: ResolverInputTypes['Application_bool_exp'] | undefined | null;
    _or?: Array<ResolverInputTypes['Application_bool_exp']> | undefined | null;
    applicationIntegrations?:
      | ResolverInputTypes['ApplicationIntegration_bool_exp']
      | undefined
      | null;
    applicationIntegrations_aggregate?:
      | ResolverInputTypes['ApplicationIntegration_aggregate_bool_exp']
      | undefined
      | null;
    cursorId?: ResolverInputTypes['bigint_comparison_exp'] | undefined | null;
    description?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    id?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    name?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    objects?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    packages?:
      | ResolverInputTypes['PackageApplication_bool_exp']
      | undefined
      | null;
    packages_aggregate?:
      | ResolverInputTypes['PackageApplication_aggregate_bool_exp']
      | undefined
      | null;
    roles?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
  };
  /** unique or primary key constraints on table "Application" */
  ['Application_constraint']: Application_constraint;
  /** input type for incrementing numeric columns in table "Application" */
  ['Application_inc_input']: {
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
  };
  /** input type for inserting data into table "Application" */
  ['Application_insert_input']: {
    applicationIntegrations?:
      | ResolverInputTypes['ApplicationIntegration_arr_rel_insert_input']
      | undefined
      | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: string | undefined | null;
    name?: string | undefined | null;
    objects?: string | undefined | null;
    packages?:
      | ResolverInputTypes['PackageApplication_arr_rel_insert_input']
      | undefined
      | null;
    roles?: string | undefined | null;
  };
  /** aggregate max on columns */
  ['Application_max_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    objects?: boolean | `@${string}`;
    roles?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['Application_min_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    objects?: boolean | `@${string}`;
    roles?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "Application" */
  ['Application_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ResolverInputTypes['Application'];
    __typename?: boolean | `@${string}`;
  }>;
  /** input type for inserting object relation for remote table "Application" */
  ['Application_obj_rel_insert_input']: {
    data: ResolverInputTypes['Application_insert_input'];
    /** upsert condition */
    on_conflict?:
      | ResolverInputTypes['Application_on_conflict']
      | undefined
      | null;
  };
  /** on_conflict condition type for table "Application" */
  ['Application_on_conflict']: {
    constraint: ResolverInputTypes['Application_constraint'];
    update_columns: Array<ResolverInputTypes['Application_update_column']>;
    where?: ResolverInputTypes['Application_bool_exp'] | undefined | null;
  };
  /** Ordering options when selecting data from "Application". */
  ['Application_order_by']: {
    applicationIntegrations_aggregate?:
      | ResolverInputTypes['ApplicationIntegration_aggregate_order_by']
      | undefined
      | null;
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
    description?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    name?: ResolverInputTypes['order_by'] | undefined | null;
    objects?: ResolverInputTypes['order_by'] | undefined | null;
    packages_aggregate?:
      | ResolverInputTypes['PackageApplication_aggregate_order_by']
      | undefined
      | null;
    roles?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** primary key columns input for table: Application */
  ['Application_pk_columns_input']: {
    id: string;
  };
  /** select columns of table "Application" */
  ['Application_select_column']: Application_select_column;
  /** input type for updating data in table "Application" */
  ['Application_set_input']: {
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: string | undefined | null;
    name?: string | undefined | null;
    objects?: string | undefined | null;
    roles?: string | undefined | null;
  };
  /** aggregate stddev on columns */
  ['Application_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_pop on columns */
  ['Application_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_samp on columns */
  ['Application_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Streaming cursor of the table "Application" */
  ['Application_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ResolverInputTypes['Application_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ResolverInputTypes['cursor_ordering'] | undefined | null;
  };
  /** Initial value of the column from where the streaming should start */
  ['Application_stream_cursor_value_input']: {
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: string | undefined | null;
    name?: string | undefined | null;
    objects?: string | undefined | null;
    roles?: string | undefined | null;
  };
  /** aggregate sum on columns */
  ['Application_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** update columns of table "Application" */
  ['Application_update_column']: Application_update_column;
  ['Application_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: ResolverInputTypes['Application_inc_input'] | undefined | null;
    /** sets the columns of the filtered rows to the given values */
    _set?: ResolverInputTypes['Application_set_input'] | undefined | null;
    /** filter the rows which have to be updated */
    where: ResolverInputTypes['Application_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['Application_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate var_samp on columns */
  ['Application_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate variance on columns */
  ['Application_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
  ['Boolean_comparison_exp']: {
    _eq?: boolean | undefined | null;
    _gt?: boolean | undefined | null;
    _gte?: boolean | undefined | null;
    _in?: Array<boolean> | undefined | null;
    _is_null?: boolean | undefined | null;
    _lt?: boolean | undefined | null;
    _lte?: boolean | undefined | null;
    _neq?: boolean | undefined | null;
    _nin?: Array<boolean> | undefined | null;
  };
  /** columns and relationships of "CaseSeverity" */
  ['CaseSeverity']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "CaseSeverity" */
  ['CaseSeverity_aggregate']: AliasType<{
    aggregate?: ResolverInputTypes['CaseSeverity_aggregate_fields'];
    nodes?: ResolverInputTypes['CaseSeverity'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "CaseSeverity" */
  ['CaseSeverity_aggregate_fields']: AliasType<{
    avg?: ResolverInputTypes['CaseSeverity_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ResolverInputTypes['CaseSeverity_select_column']>
          | undefined
          | null;
        distinct?: boolean | undefined | null;
      },
      boolean | `@${string}`,
    ];
    max?: ResolverInputTypes['CaseSeverity_max_fields'];
    min?: ResolverInputTypes['CaseSeverity_min_fields'];
    stddev?: ResolverInputTypes['CaseSeverity_stddev_fields'];
    stddev_pop?: ResolverInputTypes['CaseSeverity_stddev_pop_fields'];
    stddev_samp?: ResolverInputTypes['CaseSeverity_stddev_samp_fields'];
    sum?: ResolverInputTypes['CaseSeverity_sum_fields'];
    var_pop?: ResolverInputTypes['CaseSeverity_var_pop_fields'];
    var_samp?: ResolverInputTypes['CaseSeverity_var_samp_fields'];
    variance?: ResolverInputTypes['CaseSeverity_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate avg on columns */
  ['CaseSeverity_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "CaseSeverity". All fields are combined with a logical 'AND'. */
  ['CaseSeverity_bool_exp']: {
    _and?:
      | Array<ResolverInputTypes['CaseSeverity_bool_exp']>
      | undefined
      | null;
    _not?: ResolverInputTypes['CaseSeverity_bool_exp'] | undefined | null;
    _or?: Array<ResolverInputTypes['CaseSeverity_bool_exp']> | undefined | null;
    createdAt?:
      | ResolverInputTypes['timestamptz_comparison_exp']
      | undefined
      | null;
    createdById?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint_comparison_exp'] | undefined | null;
    description?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    id?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    name?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    status?:
      | ResolverInputTypes['Status_enum_comparison_exp']
      | undefined
      | null;
    tenantId?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    updatedAt?:
      | ResolverInputTypes['timestamptz_comparison_exp']
      | undefined
      | null;
    updatedById?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
  };
  /** unique or primary key constraints on table "CaseSeverity" */
  ['CaseSeverity_constraint']: CaseSeverity_constraint;
  /** input type for incrementing numeric columns in table "CaseSeverity" */
  ['CaseSeverity_inc_input']: {
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
  };
  /** input type for inserting data into table "CaseSeverity" */
  ['CaseSeverity_insert_input']: {
    createdAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** aggregate max on columns */
  ['CaseSeverity_max_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['CaseSeverity_min_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "CaseSeverity" */
  ['CaseSeverity_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ResolverInputTypes['CaseSeverity'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "CaseSeverity" */
  ['CaseSeverity_on_conflict']: {
    constraint: ResolverInputTypes['CaseSeverity_constraint'];
    update_columns: Array<ResolverInputTypes['CaseSeverity_update_column']>;
    where?: ResolverInputTypes['CaseSeverity_bool_exp'] | undefined | null;
  };
  /** Ordering options when selecting data from "CaseSeverity". */
  ['CaseSeverity_order_by']: {
    createdAt?: ResolverInputTypes['order_by'] | undefined | null;
    createdById?: ResolverInputTypes['order_by'] | undefined | null;
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
    description?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    name?: ResolverInputTypes['order_by'] | undefined | null;
    status?: ResolverInputTypes['order_by'] | undefined | null;
    tenantId?: ResolverInputTypes['order_by'] | undefined | null;
    updatedAt?: ResolverInputTypes['order_by'] | undefined | null;
    updatedById?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** primary key columns input for table: CaseSeverity */
  ['CaseSeverity_pk_columns_input']: {
    id: ResolverInputTypes['uuid'];
  };
  /** select columns of table "CaseSeverity" */
  ['CaseSeverity_select_column']: CaseSeverity_select_column;
  /** input type for updating data in table "CaseSeverity" */
  ['CaseSeverity_set_input']: {
    createdAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** aggregate stddev on columns */
  ['CaseSeverity_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_pop on columns */
  ['CaseSeverity_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_samp on columns */
  ['CaseSeverity_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Streaming cursor of the table "CaseSeverity" */
  ['CaseSeverity_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ResolverInputTypes['CaseSeverity_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ResolverInputTypes['cursor_ordering'] | undefined | null;
  };
  /** Initial value of the column from where the streaming should start */
  ['CaseSeverity_stream_cursor_value_input']: {
    createdAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** aggregate sum on columns */
  ['CaseSeverity_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** update columns of table "CaseSeverity" */
  ['CaseSeverity_update_column']: CaseSeverity_update_column;
  ['CaseSeverity_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: ResolverInputTypes['CaseSeverity_inc_input'] | undefined | null;
    /** sets the columns of the filtered rows to the given values */
    _set?: ResolverInputTypes['CaseSeverity_set_input'] | undefined | null;
    /** filter the rows which have to be updated */
    where: ResolverInputTypes['CaseSeverity_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['CaseSeverity_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate var_samp on columns */
  ['CaseSeverity_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate variance on columns */
  ['CaseSeverity_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "ClosureReason" */
  ['ClosureReason']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "ClosureReason" */
  ['ClosureReason_aggregate']: AliasType<{
    aggregate?: ResolverInputTypes['ClosureReason_aggregate_fields'];
    nodes?: ResolverInputTypes['ClosureReason'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "ClosureReason" */
  ['ClosureReason_aggregate_fields']: AliasType<{
    avg?: ResolverInputTypes['ClosureReason_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ResolverInputTypes['ClosureReason_select_column']>
          | undefined
          | null;
        distinct?: boolean | undefined | null;
      },
      boolean | `@${string}`,
    ];
    max?: ResolverInputTypes['ClosureReason_max_fields'];
    min?: ResolverInputTypes['ClosureReason_min_fields'];
    stddev?: ResolverInputTypes['ClosureReason_stddev_fields'];
    stddev_pop?: ResolverInputTypes['ClosureReason_stddev_pop_fields'];
    stddev_samp?: ResolverInputTypes['ClosureReason_stddev_samp_fields'];
    sum?: ResolverInputTypes['ClosureReason_sum_fields'];
    var_pop?: ResolverInputTypes['ClosureReason_var_pop_fields'];
    var_samp?: ResolverInputTypes['ClosureReason_var_samp_fields'];
    variance?: ResolverInputTypes['ClosureReason_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate avg on columns */
  ['ClosureReason_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "ClosureReason". All fields are combined with a logical 'AND'. */
  ['ClosureReason_bool_exp']: {
    _and?:
      | Array<ResolverInputTypes['ClosureReason_bool_exp']>
      | undefined
      | null;
    _not?: ResolverInputTypes['ClosureReason_bool_exp'] | undefined | null;
    _or?:
      | Array<ResolverInputTypes['ClosureReason_bool_exp']>
      | undefined
      | null;
    createdAt?:
      | ResolverInputTypes['timestamptz_comparison_exp']
      | undefined
      | null;
    createdById?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint_comparison_exp'] | undefined | null;
    description?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    id?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    name?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    status?:
      | ResolverInputTypes['Status_enum_comparison_exp']
      | undefined
      | null;
    tenantId?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    updatedAt?:
      | ResolverInputTypes['timestamptz_comparison_exp']
      | undefined
      | null;
    updatedById?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
  };
  /** unique or primary key constraints on table "ClosureReason" */
  ['ClosureReason_constraint']: ClosureReason_constraint;
  /** input type for incrementing numeric columns in table "ClosureReason" */
  ['ClosureReason_inc_input']: {
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
  };
  /** input type for inserting data into table "ClosureReason" */
  ['ClosureReason_insert_input']: {
    createdAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** aggregate max on columns */
  ['ClosureReason_max_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['ClosureReason_min_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "ClosureReason" */
  ['ClosureReason_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ResolverInputTypes['ClosureReason'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "ClosureReason" */
  ['ClosureReason_on_conflict']: {
    constraint: ResolverInputTypes['ClosureReason_constraint'];
    update_columns: Array<ResolverInputTypes['ClosureReason_update_column']>;
    where?: ResolverInputTypes['ClosureReason_bool_exp'] | undefined | null;
  };
  /** Ordering options when selecting data from "ClosureReason". */
  ['ClosureReason_order_by']: {
    createdAt?: ResolverInputTypes['order_by'] | undefined | null;
    createdById?: ResolverInputTypes['order_by'] | undefined | null;
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
    description?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    name?: ResolverInputTypes['order_by'] | undefined | null;
    status?: ResolverInputTypes['order_by'] | undefined | null;
    tenantId?: ResolverInputTypes['order_by'] | undefined | null;
    updatedAt?: ResolverInputTypes['order_by'] | undefined | null;
    updatedById?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** primary key columns input for table: ClosureReason */
  ['ClosureReason_pk_columns_input']: {
    id: ResolverInputTypes['uuid'];
  };
  /** select columns of table "ClosureReason" */
  ['ClosureReason_select_column']: ClosureReason_select_column;
  /** input type for updating data in table "ClosureReason" */
  ['ClosureReason_set_input']: {
    createdAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** aggregate stddev on columns */
  ['ClosureReason_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_pop on columns */
  ['ClosureReason_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_samp on columns */
  ['ClosureReason_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Streaming cursor of the table "ClosureReason" */
  ['ClosureReason_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ResolverInputTypes['ClosureReason_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ResolverInputTypes['cursor_ordering'] | undefined | null;
  };
  /** Initial value of the column from where the streaming should start */
  ['ClosureReason_stream_cursor_value_input']: {
    createdAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** aggregate sum on columns */
  ['ClosureReason_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** update columns of table "ClosureReason" */
  ['ClosureReason_update_column']: ClosureReason_update_column;
  ['ClosureReason_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: ResolverInputTypes['ClosureReason_inc_input'] | undefined | null;
    /** sets the columns of the filtered rows to the given values */
    _set?: ResolverInputTypes['ClosureReason_set_input'] | undefined | null;
    /** filter the rows which have to be updated */
    where: ResolverInputTypes['ClosureReason_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['ClosureReason_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate var_samp on columns */
  ['ClosureReason_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate variance on columns */
  ['ClosureReason_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "Currency" */
  ['Currency']: AliasType<{
    code?: boolean | `@${string}`;
    country?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    exchangeRate?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "Currency" */
  ['Currency_aggregate']: AliasType<{
    aggregate?: ResolverInputTypes['Currency_aggregate_fields'];
    nodes?: ResolverInputTypes['Currency'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "Currency" */
  ['Currency_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?:
          | Array<ResolverInputTypes['Currency_select_column']>
          | undefined
          | null;
        distinct?: boolean | undefined | null;
      },
      boolean | `@${string}`,
    ];
    max?: ResolverInputTypes['Currency_max_fields'];
    min?: ResolverInputTypes['Currency_min_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "Currency". All fields are combined with a logical 'AND'. */
  ['Currency_bool_exp']: {
    _and?: Array<ResolverInputTypes['Currency_bool_exp']> | undefined | null;
    _not?: ResolverInputTypes['Currency_bool_exp'] | undefined | null;
    _or?: Array<ResolverInputTypes['Currency_bool_exp']> | undefined | null;
    code?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    country?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    createdAt?:
      | ResolverInputTypes['timestamp_comparison_exp']
      | undefined
      | null;
    exchangeRate?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    id?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    name?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    status?:
      | ResolverInputTypes['Status_enum_comparison_exp']
      | undefined
      | null;
    tenantId?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    updatedAt?:
      | ResolverInputTypes['timestamp_comparison_exp']
      | undefined
      | null;
  };
  /** unique or primary key constraints on table "Currency" */
  ['Currency_constraint']: Currency_constraint;
  /** input type for inserting data into table "Currency" */
  ['Currency_insert_input']: {
    code?: string | undefined | null;
    country?: string | undefined | null;
    createdAt?: ResolverInputTypes['timestamp'] | undefined | null;
    exchangeRate?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamp'] | undefined | null;
  };
  /** aggregate max on columns */
  ['Currency_max_fields']: AliasType<{
    code?: boolean | `@${string}`;
    country?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    exchangeRate?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['Currency_min_fields']: AliasType<{
    code?: boolean | `@${string}`;
    country?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    exchangeRate?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "Currency" */
  ['Currency_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ResolverInputTypes['Currency'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "Currency" */
  ['Currency_on_conflict']: {
    constraint: ResolverInputTypes['Currency_constraint'];
    update_columns: Array<ResolverInputTypes['Currency_update_column']>;
    where?: ResolverInputTypes['Currency_bool_exp'] | undefined | null;
  };
  /** Ordering options when selecting data from "Currency". */
  ['Currency_order_by']: {
    code?: ResolverInputTypes['order_by'] | undefined | null;
    country?: ResolverInputTypes['order_by'] | undefined | null;
    createdAt?: ResolverInputTypes['order_by'] | undefined | null;
    exchangeRate?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    name?: ResolverInputTypes['order_by'] | undefined | null;
    status?: ResolverInputTypes['order_by'] | undefined | null;
    tenantId?: ResolverInputTypes['order_by'] | undefined | null;
    updatedAt?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** primary key columns input for table: Currency */
  ['Currency_pk_columns_input']: {
    id: ResolverInputTypes['uuid'];
  };
  /** select columns of table "Currency" */
  ['Currency_select_column']: Currency_select_column;
  /** input type for updating data in table "Currency" */
  ['Currency_set_input']: {
    code?: string | undefined | null;
    country?: string | undefined | null;
    createdAt?: ResolverInputTypes['timestamp'] | undefined | null;
    exchangeRate?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamp'] | undefined | null;
  };
  /** Streaming cursor of the table "Currency" */
  ['Currency_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ResolverInputTypes['Currency_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ResolverInputTypes['cursor_ordering'] | undefined | null;
  };
  /** Initial value of the column from where the streaming should start */
  ['Currency_stream_cursor_value_input']: {
    code?: string | undefined | null;
    country?: string | undefined | null;
    createdAt?: ResolverInputTypes['timestamp'] | undefined | null;
    exchangeRate?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamp'] | undefined | null;
  };
  /** update columns of table "Currency" */
  ['Currency_update_column']: Currency_update_column;
  ['Currency_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: ResolverInputTypes['Currency_set_input'] | undefined | null;
    /** filter the rows which have to be updated */
    where: ResolverInputTypes['Currency_bool_exp'];
  };
  /** columns and relationships of "CustomRole" */
  ['CustomRole']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "CustomRole" */
  ['CustomRole_aggregate']: AliasType<{
    aggregate?: ResolverInputTypes['CustomRole_aggregate_fields'];
    nodes?: ResolverInputTypes['CustomRole'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "CustomRole" */
  ['CustomRole_aggregate_fields']: AliasType<{
    avg?: ResolverInputTypes['CustomRole_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ResolverInputTypes['CustomRole_select_column']>
          | undefined
          | null;
        distinct?: boolean | undefined | null;
      },
      boolean | `@${string}`,
    ];
    max?: ResolverInputTypes['CustomRole_max_fields'];
    min?: ResolverInputTypes['CustomRole_min_fields'];
    stddev?: ResolverInputTypes['CustomRole_stddev_fields'];
    stddev_pop?: ResolverInputTypes['CustomRole_stddev_pop_fields'];
    stddev_samp?: ResolverInputTypes['CustomRole_stddev_samp_fields'];
    sum?: ResolverInputTypes['CustomRole_sum_fields'];
    var_pop?: ResolverInputTypes['CustomRole_var_pop_fields'];
    var_samp?: ResolverInputTypes['CustomRole_var_samp_fields'];
    variance?: ResolverInputTypes['CustomRole_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate avg on columns */
  ['CustomRole_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "CustomRole". All fields are combined with a logical 'AND'. */
  ['CustomRole_bool_exp']: {
    _and?: Array<ResolverInputTypes['CustomRole_bool_exp']> | undefined | null;
    _not?: ResolverInputTypes['CustomRole_bool_exp'] | undefined | null;
    _or?: Array<ResolverInputTypes['CustomRole_bool_exp']> | undefined | null;
    createdAt?:
      | ResolverInputTypes['timestamptz_comparison_exp']
      | undefined
      | null;
    createdById?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint_comparison_exp'] | undefined | null;
    description?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    id?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    name?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    status?:
      | ResolverInputTypes['Status_enum_comparison_exp']
      | undefined
      | null;
    tenantId?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    updatedAt?:
      | ResolverInputTypes['timestamptz_comparison_exp']
      | undefined
      | null;
    updatedById?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
  };
  /** unique or primary key constraints on table "CustomRole" */
  ['CustomRole_constraint']: CustomRole_constraint;
  /** input type for incrementing numeric columns in table "CustomRole" */
  ['CustomRole_inc_input']: {
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
  };
  /** input type for inserting data into table "CustomRole" */
  ['CustomRole_insert_input']: {
    createdAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** aggregate max on columns */
  ['CustomRole_max_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['CustomRole_min_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "CustomRole" */
  ['CustomRole_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ResolverInputTypes['CustomRole'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "CustomRole" */
  ['CustomRole_on_conflict']: {
    constraint: ResolverInputTypes['CustomRole_constraint'];
    update_columns: Array<ResolverInputTypes['CustomRole_update_column']>;
    where?: ResolverInputTypes['CustomRole_bool_exp'] | undefined | null;
  };
  /** Ordering options when selecting data from "CustomRole". */
  ['CustomRole_order_by']: {
    createdAt?: ResolverInputTypes['order_by'] | undefined | null;
    createdById?: ResolverInputTypes['order_by'] | undefined | null;
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
    description?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    name?: ResolverInputTypes['order_by'] | undefined | null;
    status?: ResolverInputTypes['order_by'] | undefined | null;
    tenantId?: ResolverInputTypes['order_by'] | undefined | null;
    updatedAt?: ResolverInputTypes['order_by'] | undefined | null;
    updatedById?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** primary key columns input for table: CustomRole */
  ['CustomRole_pk_columns_input']: {
    id: ResolverInputTypes['uuid'];
  };
  /** select columns of table "CustomRole" */
  ['CustomRole_select_column']: CustomRole_select_column;
  /** input type for updating data in table "CustomRole" */
  ['CustomRole_set_input']: {
    createdAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** aggregate stddev on columns */
  ['CustomRole_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_pop on columns */
  ['CustomRole_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_samp on columns */
  ['CustomRole_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Streaming cursor of the table "CustomRole" */
  ['CustomRole_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ResolverInputTypes['CustomRole_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ResolverInputTypes['cursor_ordering'] | undefined | null;
  };
  /** Initial value of the column from where the streaming should start */
  ['CustomRole_stream_cursor_value_input']: {
    createdAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** aggregate sum on columns */
  ['CustomRole_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** update columns of table "CustomRole" */
  ['CustomRole_update_column']: CustomRole_update_column;
  ['CustomRole_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: ResolverInputTypes['CustomRole_inc_input'] | undefined | null;
    /** sets the columns of the filtered rows to the given values */
    _set?: ResolverInputTypes['CustomRole_set_input'] | undefined | null;
    /** filter the rows which have to be updated */
    where: ResolverInputTypes['CustomRole_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['CustomRole_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate var_samp on columns */
  ['CustomRole_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate variance on columns */
  ['CustomRole_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "Group" */
  ['Group']: AliasType<{
    createdBy?: boolean | `@${string}`;
    created_at?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    lastModifiedBy?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    role?: boolean | `@${string}`;
    roles?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['GroupRole_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['GroupRole_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['GroupRole_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['GroupRole'],
    ];
    roles_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['GroupRole_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['GroupRole_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['GroupRole_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['GroupRole_aggregate'],
    ];
    status?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updated_at?: boolean | `@${string}`;
    users?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['UserGroup_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['UserGroup_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['UserGroup_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['UserGroup'],
    ];
    users_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['UserGroup_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['UserGroup_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['UserGroup_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['UserGroup_aggregate'],
    ];
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "GroupRole" */
  ['GroupRole']: AliasType<{
    /** An object relationship */
    group?: ResolverInputTypes['Group'];
    groupId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    /** An object relationship */
    role?: ResolverInputTypes['Role'];
    roleId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "GroupRole" */
  ['GroupRole_aggregate']: AliasType<{
    aggregate?: ResolverInputTypes['GroupRole_aggregate_fields'];
    nodes?: ResolverInputTypes['GroupRole'];
    __typename?: boolean | `@${string}`;
  }>;
  ['GroupRole_aggregate_bool_exp']: {
    count?:
      | ResolverInputTypes['GroupRole_aggregate_bool_exp_count']
      | undefined
      | null;
  };
  ['GroupRole_aggregate_bool_exp_count']: {
    arguments?:
      | Array<ResolverInputTypes['GroupRole_select_column']>
      | undefined
      | null;
    distinct?: boolean | undefined | null;
    filter?: ResolverInputTypes['GroupRole_bool_exp'] | undefined | null;
    predicate: ResolverInputTypes['Int_comparison_exp'];
  };
  /** aggregate fields of "GroupRole" */
  ['GroupRole_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?:
          | Array<ResolverInputTypes['GroupRole_select_column']>
          | undefined
          | null;
        distinct?: boolean | undefined | null;
      },
      boolean | `@${string}`,
    ];
    max?: ResolverInputTypes['GroupRole_max_fields'];
    min?: ResolverInputTypes['GroupRole_min_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** order by aggregate values of table "GroupRole" */
  ['GroupRole_aggregate_order_by']: {
    count?: ResolverInputTypes['order_by'] | undefined | null;
    max?: ResolverInputTypes['GroupRole_max_order_by'] | undefined | null;
    min?: ResolverInputTypes['GroupRole_min_order_by'] | undefined | null;
  };
  /** input type for inserting array relation for remote table "GroupRole" */
  ['GroupRole_arr_rel_insert_input']: {
    data: Array<ResolverInputTypes['GroupRole_insert_input']>;
    /** upsert condition */
    on_conflict?:
      | ResolverInputTypes['GroupRole_on_conflict']
      | undefined
      | null;
  };
  /** Boolean expression to filter rows from the table "GroupRole". All fields are combined with a logical 'AND'. */
  ['GroupRole_bool_exp']: {
    _and?: Array<ResolverInputTypes['GroupRole_bool_exp']> | undefined | null;
    _not?: ResolverInputTypes['GroupRole_bool_exp'] | undefined | null;
    _or?: Array<ResolverInputTypes['GroupRole_bool_exp']> | undefined | null;
    group?: ResolverInputTypes['Group_bool_exp'] | undefined | null;
    groupId?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    id?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    role?: ResolverInputTypes['Role_bool_exp'] | undefined | null;
    roleId?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
  };
  /** unique or primary key constraints on table "GroupRole" */
  ['GroupRole_constraint']: GroupRole_constraint;
  /** input type for inserting data into table "GroupRole" */
  ['GroupRole_insert_input']: {
    group?: ResolverInputTypes['Group_obj_rel_insert_input'] | undefined | null;
    groupId?: ResolverInputTypes['uuid'] | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    role?: ResolverInputTypes['Role_obj_rel_insert_input'] | undefined | null;
    roleId?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** aggregate max on columns */
  ['GroupRole_max_fields']: AliasType<{
    groupId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    roleId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by max() on columns of table "GroupRole" */
  ['GroupRole_max_order_by']: {
    groupId?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    roleId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** aggregate min on columns */
  ['GroupRole_min_fields']: AliasType<{
    groupId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    roleId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by min() on columns of table "GroupRole" */
  ['GroupRole_min_order_by']: {
    groupId?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    roleId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** response of any mutation on the table "GroupRole" */
  ['GroupRole_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ResolverInputTypes['GroupRole'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "GroupRole" */
  ['GroupRole_on_conflict']: {
    constraint: ResolverInputTypes['GroupRole_constraint'];
    update_columns: Array<ResolverInputTypes['GroupRole_update_column']>;
    where?: ResolverInputTypes['GroupRole_bool_exp'] | undefined | null;
  };
  /** Ordering options when selecting data from "GroupRole". */
  ['GroupRole_order_by']: {
    group?: ResolverInputTypes['Group_order_by'] | undefined | null;
    groupId?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    role?: ResolverInputTypes['Role_order_by'] | undefined | null;
    roleId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** primary key columns input for table: GroupRole */
  ['GroupRole_pk_columns_input']: {
    id: ResolverInputTypes['uuid'];
  };
  /** select columns of table "GroupRole" */
  ['GroupRole_select_column']: GroupRole_select_column;
  /** input type for updating data in table "GroupRole" */
  ['GroupRole_set_input']: {
    groupId?: ResolverInputTypes['uuid'] | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    roleId?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** Streaming cursor of the table "GroupRole" */
  ['GroupRole_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ResolverInputTypes['GroupRole_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ResolverInputTypes['cursor_ordering'] | undefined | null;
  };
  /** Initial value of the column from where the streaming should start */
  ['GroupRole_stream_cursor_value_input']: {
    groupId?: ResolverInputTypes['uuid'] | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    roleId?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** update columns of table "GroupRole" */
  ['GroupRole_update_column']: GroupRole_update_column;
  ['GroupRole_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: ResolverInputTypes['GroupRole_set_input'] | undefined | null;
    /** filter the rows which have to be updated */
    where: ResolverInputTypes['GroupRole_bool_exp'];
  };
  /** aggregated selection of "Group" */
  ['Group_aggregate']: AliasType<{
    aggregate?: ResolverInputTypes['Group_aggregate_fields'];
    nodes?: ResolverInputTypes['Group'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "Group" */
  ['Group_aggregate_fields']: AliasType<{
    avg?: ResolverInputTypes['Group_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ResolverInputTypes['Group_select_column']>
          | undefined
          | null;
        distinct?: boolean | undefined | null;
      },
      boolean | `@${string}`,
    ];
    max?: ResolverInputTypes['Group_max_fields'];
    min?: ResolverInputTypes['Group_min_fields'];
    stddev?: ResolverInputTypes['Group_stddev_fields'];
    stddev_pop?: ResolverInputTypes['Group_stddev_pop_fields'];
    stddev_samp?: ResolverInputTypes['Group_stddev_samp_fields'];
    sum?: ResolverInputTypes['Group_sum_fields'];
    var_pop?: ResolverInputTypes['Group_var_pop_fields'];
    var_samp?: ResolverInputTypes['Group_var_samp_fields'];
    variance?: ResolverInputTypes['Group_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate avg on columns */
  ['Group_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "Group". All fields are combined with a logical 'AND'. */
  ['Group_bool_exp']: {
    _and?: Array<ResolverInputTypes['Group_bool_exp']> | undefined | null;
    _not?: ResolverInputTypes['Group_bool_exp'] | undefined | null;
    _or?: Array<ResolverInputTypes['Group_bool_exp']> | undefined | null;
    createdBy?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    created_at?:
      | ResolverInputTypes['timestamptz_comparison_exp']
      | undefined
      | null;
    cursorId?: ResolverInputTypes['bigint_comparison_exp'] | undefined | null;
    description?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    id?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    lastModifiedBy?:
      | ResolverInputTypes['uuid_comparison_exp']
      | undefined
      | null;
    name?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    role?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    roles?: ResolverInputTypes['GroupRole_bool_exp'] | undefined | null;
    roles_aggregate?:
      | ResolverInputTypes['GroupRole_aggregate_bool_exp']
      | undefined
      | null;
    status?:
      | ResolverInputTypes['Status_enum_comparison_exp']
      | undefined
      | null;
    tenantId?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    updated_at?:
      | ResolverInputTypes['timestamptz_comparison_exp']
      | undefined
      | null;
    users?: ResolverInputTypes['UserGroup_bool_exp'] | undefined | null;
    users_aggregate?:
      | ResolverInputTypes['UserGroup_aggregate_bool_exp']
      | undefined
      | null;
  };
  /** unique or primary key constraints on table "Group" */
  ['Group_constraint']: Group_constraint;
  /** input type for incrementing numeric columns in table "Group" */
  ['Group_inc_input']: {
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
  };
  /** input type for inserting data into table "Group" */
  ['Group_insert_input']: {
    createdBy?: ResolverInputTypes['uuid'] | undefined | null;
    created_at?: ResolverInputTypes['timestamptz'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    lastModifiedBy?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    role?: string | undefined | null;
    roles?:
      | ResolverInputTypes['GroupRole_arr_rel_insert_input']
      | undefined
      | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updated_at?: ResolverInputTypes['timestamptz'] | undefined | null;
    users?:
      | ResolverInputTypes['UserGroup_arr_rel_insert_input']
      | undefined
      | null;
  };
  /** aggregate max on columns */
  ['Group_max_fields']: AliasType<{
    createdBy?: boolean | `@${string}`;
    created_at?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    lastModifiedBy?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    role?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updated_at?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['Group_min_fields']: AliasType<{
    createdBy?: boolean | `@${string}`;
    created_at?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    lastModifiedBy?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    role?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updated_at?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "Group" */
  ['Group_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ResolverInputTypes['Group'];
    __typename?: boolean | `@${string}`;
  }>;
  /** input type for inserting object relation for remote table "Group" */
  ['Group_obj_rel_insert_input']: {
    data: ResolverInputTypes['Group_insert_input'];
    /** upsert condition */
    on_conflict?: ResolverInputTypes['Group_on_conflict'] | undefined | null;
  };
  /** on_conflict condition type for table "Group" */
  ['Group_on_conflict']: {
    constraint: ResolverInputTypes['Group_constraint'];
    update_columns: Array<ResolverInputTypes['Group_update_column']>;
    where?: ResolverInputTypes['Group_bool_exp'] | undefined | null;
  };
  /** Ordering options when selecting data from "Group". */
  ['Group_order_by']: {
    createdBy?: ResolverInputTypes['order_by'] | undefined | null;
    created_at?: ResolverInputTypes['order_by'] | undefined | null;
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
    description?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    lastModifiedBy?: ResolverInputTypes['order_by'] | undefined | null;
    name?: ResolverInputTypes['order_by'] | undefined | null;
    role?: ResolverInputTypes['order_by'] | undefined | null;
    roles_aggregate?:
      | ResolverInputTypes['GroupRole_aggregate_order_by']
      | undefined
      | null;
    status?: ResolverInputTypes['order_by'] | undefined | null;
    tenantId?: ResolverInputTypes['order_by'] | undefined | null;
    updated_at?: ResolverInputTypes['order_by'] | undefined | null;
    users_aggregate?:
      | ResolverInputTypes['UserGroup_aggregate_order_by']
      | undefined
      | null;
  };
  /** primary key columns input for table: Group */
  ['Group_pk_columns_input']: {
    id: ResolverInputTypes['uuid'];
  };
  /** select columns of table "Group" */
  ['Group_select_column']: Group_select_column;
  /** input type for updating data in table "Group" */
  ['Group_set_input']: {
    createdBy?: ResolverInputTypes['uuid'] | undefined | null;
    created_at?: ResolverInputTypes['timestamptz'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    lastModifiedBy?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    role?: string | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updated_at?: ResolverInputTypes['timestamptz'] | undefined | null;
  };
  /** aggregate stddev on columns */
  ['Group_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_pop on columns */
  ['Group_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_samp on columns */
  ['Group_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Streaming cursor of the table "Group" */
  ['Group_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ResolverInputTypes['Group_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ResolverInputTypes['cursor_ordering'] | undefined | null;
  };
  /** Initial value of the column from where the streaming should start */
  ['Group_stream_cursor_value_input']: {
    createdBy?: ResolverInputTypes['uuid'] | undefined | null;
    created_at?: ResolverInputTypes['timestamptz'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    lastModifiedBy?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    role?: string | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updated_at?: ResolverInputTypes['timestamptz'] | undefined | null;
  };
  /** aggregate sum on columns */
  ['Group_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** update columns of table "Group" */
  ['Group_update_column']: Group_update_column;
  ['Group_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: ResolverInputTypes['Group_inc_input'] | undefined | null;
    /** sets the columns of the filtered rows to the given values */
    _set?: ResolverInputTypes['Group_set_input'] | undefined | null;
    /** filter the rows which have to be updated */
    where: ResolverInputTypes['Group_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['Group_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate var_samp on columns */
  ['Group_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate variance on columns */
  ['Group_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "Industry" */
  ['Industry']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "Industry" */
  ['Industry_aggregate']: AliasType<{
    aggregate?: ResolverInputTypes['Industry_aggregate_fields'];
    nodes?: ResolverInputTypes['Industry'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "Industry" */
  ['Industry_aggregate_fields']: AliasType<{
    avg?: ResolverInputTypes['Industry_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ResolverInputTypes['Industry_select_column']>
          | undefined
          | null;
        distinct?: boolean | undefined | null;
      },
      boolean | `@${string}`,
    ];
    max?: ResolverInputTypes['Industry_max_fields'];
    min?: ResolverInputTypes['Industry_min_fields'];
    stddev?: ResolverInputTypes['Industry_stddev_fields'];
    stddev_pop?: ResolverInputTypes['Industry_stddev_pop_fields'];
    stddev_samp?: ResolverInputTypes['Industry_stddev_samp_fields'];
    sum?: ResolverInputTypes['Industry_sum_fields'];
    var_pop?: ResolverInputTypes['Industry_var_pop_fields'];
    var_samp?: ResolverInputTypes['Industry_var_samp_fields'];
    variance?: ResolverInputTypes['Industry_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate avg on columns */
  ['Industry_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "Industry". All fields are combined with a logical 'AND'. */
  ['Industry_bool_exp']: {
    _and?: Array<ResolverInputTypes['Industry_bool_exp']> | undefined | null;
    _not?: ResolverInputTypes['Industry_bool_exp'] | undefined | null;
    _or?: Array<ResolverInputTypes['Industry_bool_exp']> | undefined | null;
    createdAt?:
      | ResolverInputTypes['timestamptz_comparison_exp']
      | undefined
      | null;
    createdById?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint_comparison_exp'] | undefined | null;
    description?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    id?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    name?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    status?:
      | ResolverInputTypes['Status_enum_comparison_exp']
      | undefined
      | null;
    tenantId?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    updatedAt?:
      | ResolverInputTypes['timestamptz_comparison_exp']
      | undefined
      | null;
    updatedById?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
  };
  /** unique or primary key constraints on table "Industry" */
  ['Industry_constraint']: Industry_constraint;
  /** input type for incrementing numeric columns in table "Industry" */
  ['Industry_inc_input']: {
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
  };
  /** input type for inserting data into table "Industry" */
  ['Industry_insert_input']: {
    createdAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** aggregate max on columns */
  ['Industry_max_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['Industry_min_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "Industry" */
  ['Industry_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ResolverInputTypes['Industry'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "Industry" */
  ['Industry_on_conflict']: {
    constraint: ResolverInputTypes['Industry_constraint'];
    update_columns: Array<ResolverInputTypes['Industry_update_column']>;
    where?: ResolverInputTypes['Industry_bool_exp'] | undefined | null;
  };
  /** Ordering options when selecting data from "Industry". */
  ['Industry_order_by']: {
    createdAt?: ResolverInputTypes['order_by'] | undefined | null;
    createdById?: ResolverInputTypes['order_by'] | undefined | null;
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
    description?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    name?: ResolverInputTypes['order_by'] | undefined | null;
    status?: ResolverInputTypes['order_by'] | undefined | null;
    tenantId?: ResolverInputTypes['order_by'] | undefined | null;
    updatedAt?: ResolverInputTypes['order_by'] | undefined | null;
    updatedById?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** primary key columns input for table: Industry */
  ['Industry_pk_columns_input']: {
    id: ResolverInputTypes['uuid'];
  };
  /** select columns of table "Industry" */
  ['Industry_select_column']: Industry_select_column;
  /** input type for updating data in table "Industry" */
  ['Industry_set_input']: {
    createdAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** aggregate stddev on columns */
  ['Industry_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_pop on columns */
  ['Industry_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_samp on columns */
  ['Industry_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Streaming cursor of the table "Industry" */
  ['Industry_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ResolverInputTypes['Industry_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ResolverInputTypes['cursor_ordering'] | undefined | null;
  };
  /** Initial value of the column from where the streaming should start */
  ['Industry_stream_cursor_value_input']: {
    createdAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** aggregate sum on columns */
  ['Industry_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** update columns of table "Industry" */
  ['Industry_update_column']: Industry_update_column;
  ['Industry_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: ResolverInputTypes['Industry_inc_input'] | undefined | null;
    /** sets the columns of the filtered rows to the given values */
    _set?: ResolverInputTypes['Industry_set_input'] | undefined | null;
    /** filter the rows which have to be updated */
    where: ResolverInputTypes['Industry_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['Industry_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate var_samp on columns */
  ['Industry_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate variance on columns */
  ['Industry_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
  ['Int_comparison_exp']: {
    _eq?: number | undefined | null;
    _gt?: number | undefined | null;
    _gte?: number | undefined | null;
    _in?: Array<number> | undefined | null;
    _is_null?: boolean | undefined | null;
    _lt?: number | undefined | null;
    _lte?: number | undefined | null;
    _neq?: number | undefined | null;
    _nin?: Array<number> | undefined | null;
  };
  /** columns and relationships of "IssueCategory" */
  ['IssueCategory']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "IssueCategory" */
  ['IssueCategory_aggregate']: AliasType<{
    aggregate?: ResolverInputTypes['IssueCategory_aggregate_fields'];
    nodes?: ResolverInputTypes['IssueCategory'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "IssueCategory" */
  ['IssueCategory_aggregate_fields']: AliasType<{
    avg?: ResolverInputTypes['IssueCategory_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ResolverInputTypes['IssueCategory_select_column']>
          | undefined
          | null;
        distinct?: boolean | undefined | null;
      },
      boolean | `@${string}`,
    ];
    max?: ResolverInputTypes['IssueCategory_max_fields'];
    min?: ResolverInputTypes['IssueCategory_min_fields'];
    stddev?: ResolverInputTypes['IssueCategory_stddev_fields'];
    stddev_pop?: ResolverInputTypes['IssueCategory_stddev_pop_fields'];
    stddev_samp?: ResolverInputTypes['IssueCategory_stddev_samp_fields'];
    sum?: ResolverInputTypes['IssueCategory_sum_fields'];
    var_pop?: ResolverInputTypes['IssueCategory_var_pop_fields'];
    var_samp?: ResolverInputTypes['IssueCategory_var_samp_fields'];
    variance?: ResolverInputTypes['IssueCategory_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate avg on columns */
  ['IssueCategory_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "IssueCategory". All fields are combined with a logical 'AND'. */
  ['IssueCategory_bool_exp']: {
    _and?:
      | Array<ResolverInputTypes['IssueCategory_bool_exp']>
      | undefined
      | null;
    _not?: ResolverInputTypes['IssueCategory_bool_exp'] | undefined | null;
    _or?:
      | Array<ResolverInputTypes['IssueCategory_bool_exp']>
      | undefined
      | null;
    createdAt?:
      | ResolverInputTypes['timestamptz_comparison_exp']
      | undefined
      | null;
    createdById?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint_comparison_exp'] | undefined | null;
    description?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    id?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    name?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    status?:
      | ResolverInputTypes['Status_enum_comparison_exp']
      | undefined
      | null;
    tenantId?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    updatedAt?:
      | ResolverInputTypes['timestamptz_comparison_exp']
      | undefined
      | null;
    updatedById?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
  };
  /** unique or primary key constraints on table "IssueCategory" */
  ['IssueCategory_constraint']: IssueCategory_constraint;
  /** input type for incrementing numeric columns in table "IssueCategory" */
  ['IssueCategory_inc_input']: {
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
  };
  /** input type for inserting data into table "IssueCategory" */
  ['IssueCategory_insert_input']: {
    createdAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** aggregate max on columns */
  ['IssueCategory_max_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['IssueCategory_min_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "IssueCategory" */
  ['IssueCategory_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ResolverInputTypes['IssueCategory'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "IssueCategory" */
  ['IssueCategory_on_conflict']: {
    constraint: ResolverInputTypes['IssueCategory_constraint'];
    update_columns: Array<ResolverInputTypes['IssueCategory_update_column']>;
    where?: ResolverInputTypes['IssueCategory_bool_exp'] | undefined | null;
  };
  /** Ordering options when selecting data from "IssueCategory". */
  ['IssueCategory_order_by']: {
    createdAt?: ResolverInputTypes['order_by'] | undefined | null;
    createdById?: ResolverInputTypes['order_by'] | undefined | null;
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
    description?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    name?: ResolverInputTypes['order_by'] | undefined | null;
    status?: ResolverInputTypes['order_by'] | undefined | null;
    tenantId?: ResolverInputTypes['order_by'] | undefined | null;
    updatedAt?: ResolverInputTypes['order_by'] | undefined | null;
    updatedById?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** primary key columns input for table: IssueCategory */
  ['IssueCategory_pk_columns_input']: {
    id: ResolverInputTypes['uuid'];
  };
  /** select columns of table "IssueCategory" */
  ['IssueCategory_select_column']: IssueCategory_select_column;
  /** input type for updating data in table "IssueCategory" */
  ['IssueCategory_set_input']: {
    createdAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** aggregate stddev on columns */
  ['IssueCategory_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_pop on columns */
  ['IssueCategory_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_samp on columns */
  ['IssueCategory_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Streaming cursor of the table "IssueCategory" */
  ['IssueCategory_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ResolverInputTypes['IssueCategory_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ResolverInputTypes['cursor_ordering'] | undefined | null;
  };
  /** Initial value of the column from where the streaming should start */
  ['IssueCategory_stream_cursor_value_input']: {
    createdAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** aggregate sum on columns */
  ['IssueCategory_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** update columns of table "IssueCategory" */
  ['IssueCategory_update_column']: IssueCategory_update_column;
  ['IssueCategory_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: ResolverInputTypes['IssueCategory_inc_input'] | undefined | null;
    /** sets the columns of the filtered rows to the given values */
    _set?: ResolverInputTypes['IssueCategory_set_input'] | undefined | null;
    /** filter the rows which have to be updated */
    where: ResolverInputTypes['IssueCategory_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['IssueCategory_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate var_samp on columns */
  ['IssueCategory_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate variance on columns */
  ['IssueCategory_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "Object" */
  ['Object']: AliasType<{
    /** An object relationship */
    application?: ResolverInputTypes['Application'];
    applicationId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "Object" */
  ['Object_aggregate']: AliasType<{
    aggregate?: ResolverInputTypes['Object_aggregate_fields'];
    nodes?: ResolverInputTypes['Object'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "Object" */
  ['Object_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?:
          | Array<ResolverInputTypes['Object_select_column']>
          | undefined
          | null;
        distinct?: boolean | undefined | null;
      },
      boolean | `@${string}`,
    ];
    max?: ResolverInputTypes['Object_max_fields'];
    min?: ResolverInputTypes['Object_min_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "Object". All fields are combined with a logical 'AND'. */
  ['Object_bool_exp']: {
    _and?: Array<ResolverInputTypes['Object_bool_exp']> | undefined | null;
    _not?: ResolverInputTypes['Object_bool_exp'] | undefined | null;
    _or?: Array<ResolverInputTypes['Object_bool_exp']> | undefined | null;
    application?: ResolverInputTypes['Application_bool_exp'] | undefined | null;
    applicationId?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    description?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    id?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    name?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
  };
  /** unique or primary key constraints on table "Object" */
  ['Object_constraint']: Object_constraint;
  /** input type for inserting data into table "Object" */
  ['Object_insert_input']: {
    application?:
      | ResolverInputTypes['Application_obj_rel_insert_input']
      | undefined
      | null;
    applicationId?: string | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
  };
  /** aggregate max on columns */
  ['Object_max_fields']: AliasType<{
    applicationId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['Object_min_fields']: AliasType<{
    applicationId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "Object" */
  ['Object_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ResolverInputTypes['Object'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "Object" */
  ['Object_on_conflict']: {
    constraint: ResolverInputTypes['Object_constraint'];
    update_columns: Array<ResolverInputTypes['Object_update_column']>;
    where?: ResolverInputTypes['Object_bool_exp'] | undefined | null;
  };
  /** Ordering options when selecting data from "Object". */
  ['Object_order_by']: {
    application?: ResolverInputTypes['Application_order_by'] | undefined | null;
    applicationId?: ResolverInputTypes['order_by'] | undefined | null;
    description?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    name?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** primary key columns input for table: Object */
  ['Object_pk_columns_input']: {
    id: ResolverInputTypes['uuid'];
  };
  /** select columns of table "Object" */
  ['Object_select_column']: Object_select_column;
  /** input type for updating data in table "Object" */
  ['Object_set_input']: {
    applicationId?: string | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
  };
  /** Streaming cursor of the table "Object" */
  ['Object_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ResolverInputTypes['Object_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ResolverInputTypes['cursor_ordering'] | undefined | null;
  };
  /** Initial value of the column from where the streaming should start */
  ['Object_stream_cursor_value_input']: {
    applicationId?: string | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
  };
  /** update columns of table "Object" */
  ['Object_update_column']: Object_update_column;
  ['Object_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: ResolverInputTypes['Object_set_input'] | undefined | null;
    /** filter the rows which have to be updated */
    where: ResolverInputTypes['Object_bool_exp'];
  };
  /** columns and relationships of "Organization" */
  ['Organization']: AliasType<{
    address?: boolean | `@${string}`;
    city?: boolean | `@${string}`;
    country?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    domain?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    industry?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    postalCode?: boolean | `@${string}`;
    state?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    type?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    websiteUrl?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "Organization" */
  ['Organization_aggregate']: AliasType<{
    aggregate?: ResolverInputTypes['Organization_aggregate_fields'];
    nodes?: ResolverInputTypes['Organization'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "Organization" */
  ['Organization_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?:
          | Array<ResolverInputTypes['Organization_select_column']>
          | undefined
          | null;
        distinct?: boolean | undefined | null;
      },
      boolean | `@${string}`,
    ];
    max?: ResolverInputTypes['Organization_max_fields'];
    min?: ResolverInputTypes['Organization_min_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "Organization". All fields are combined with a logical 'AND'. */
  ['Organization_bool_exp']: {
    _and?:
      | Array<ResolverInputTypes['Organization_bool_exp']>
      | undefined
      | null;
    _not?: ResolverInputTypes['Organization_bool_exp'] | undefined | null;
    _or?: Array<ResolverInputTypes['Organization_bool_exp']> | undefined | null;
    address?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    city?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    country?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    createdAt?:
      | ResolverInputTypes['timestamp_comparison_exp']
      | undefined
      | null;
    domain?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    id?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    industry?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    name?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    postalCode?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    state?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    type?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    updatedAt?:
      | ResolverInputTypes['timestamp_comparison_exp']
      | undefined
      | null;
    websiteUrl?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
  };
  /** unique or primary key constraints on table "Organization" */
  ['Organization_constraint']: Organization_constraint;
  /** input type for inserting data into table "Organization" */
  ['Organization_insert_input']: {
    address?: string | undefined | null;
    city?: string | undefined | null;
    country?: string | undefined | null;
    createdAt?: ResolverInputTypes['timestamp'] | undefined | null;
    domain?: string | undefined | null;
    id?: string | undefined | null;
    industry?: string | undefined | null;
    name?: string | undefined | null;
    postalCode?: string | undefined | null;
    state?: string | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    type?: string | undefined | null;
    updatedAt?: ResolverInputTypes['timestamp'] | undefined | null;
    websiteUrl?: string | undefined | null;
  };
  /** aggregate max on columns */
  ['Organization_max_fields']: AliasType<{
    address?: boolean | `@${string}`;
    city?: boolean | `@${string}`;
    country?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    domain?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    industry?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    postalCode?: boolean | `@${string}`;
    state?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    type?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    websiteUrl?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['Organization_min_fields']: AliasType<{
    address?: boolean | `@${string}`;
    city?: boolean | `@${string}`;
    country?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    domain?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    industry?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    postalCode?: boolean | `@${string}`;
    state?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    type?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    websiteUrl?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "Organization" */
  ['Organization_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ResolverInputTypes['Organization'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "Organization" */
  ['Organization_on_conflict']: {
    constraint: ResolverInputTypes['Organization_constraint'];
    update_columns: Array<ResolverInputTypes['Organization_update_column']>;
    where?: ResolverInputTypes['Organization_bool_exp'] | undefined | null;
  };
  /** Ordering options when selecting data from "Organization". */
  ['Organization_order_by']: {
    address?: ResolverInputTypes['order_by'] | undefined | null;
    city?: ResolverInputTypes['order_by'] | undefined | null;
    country?: ResolverInputTypes['order_by'] | undefined | null;
    createdAt?: ResolverInputTypes['order_by'] | undefined | null;
    domain?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    industry?: ResolverInputTypes['order_by'] | undefined | null;
    name?: ResolverInputTypes['order_by'] | undefined | null;
    postalCode?: ResolverInputTypes['order_by'] | undefined | null;
    state?: ResolverInputTypes['order_by'] | undefined | null;
    tenantId?: ResolverInputTypes['order_by'] | undefined | null;
    type?: ResolverInputTypes['order_by'] | undefined | null;
    updatedAt?: ResolverInputTypes['order_by'] | undefined | null;
    websiteUrl?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** primary key columns input for table: Organization */
  ['Organization_pk_columns_input']: {
    id: string;
  };
  /** select columns of table "Organization" */
  ['Organization_select_column']: Organization_select_column;
  /** input type for updating data in table "Organization" */
  ['Organization_set_input']: {
    address?: string | undefined | null;
    city?: string | undefined | null;
    country?: string | undefined | null;
    createdAt?: ResolverInputTypes['timestamp'] | undefined | null;
    domain?: string | undefined | null;
    id?: string | undefined | null;
    industry?: string | undefined | null;
    name?: string | undefined | null;
    postalCode?: string | undefined | null;
    state?: string | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    type?: string | undefined | null;
    updatedAt?: ResolverInputTypes['timestamp'] | undefined | null;
    websiteUrl?: string | undefined | null;
  };
  /** Streaming cursor of the table "Organization" */
  ['Organization_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ResolverInputTypes['Organization_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ResolverInputTypes['cursor_ordering'] | undefined | null;
  };
  /** Initial value of the column from where the streaming should start */
  ['Organization_stream_cursor_value_input']: {
    address?: string | undefined | null;
    city?: string | undefined | null;
    country?: string | undefined | null;
    createdAt?: ResolverInputTypes['timestamp'] | undefined | null;
    domain?: string | undefined | null;
    id?: string | undefined | null;
    industry?: string | undefined | null;
    name?: string | undefined | null;
    postalCode?: string | undefined | null;
    state?: string | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    type?: string | undefined | null;
    updatedAt?: ResolverInputTypes['timestamp'] | undefined | null;
    websiteUrl?: string | undefined | null;
  };
  /** update columns of table "Organization" */
  ['Organization_update_column']: Organization_update_column;
  ['Organization_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: ResolverInputTypes['Organization_set_input'] | undefined | null;
    /** filter the rows which have to be updated */
    where: ResolverInputTypes['Organization_bool_exp'];
  };
  /** columns and relationships of "Package" */
  ['Package']: AliasType<{
    applications?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['PackageApplication_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['PackageApplication_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?:
          | ResolverInputTypes['PackageApplication_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['PackageApplication'],
    ];
    applications_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['PackageApplication_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['PackageApplication_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?:
          | ResolverInputTypes['PackageApplication_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['PackageApplication_aggregate'],
    ];
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    objects?: boolean | `@${string}`;
    price?: boolean | `@${string}`;
    roles?: boolean | `@${string}`;
    tenants?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['TenantPackage_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['TenantPackage_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['TenantPackage_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['TenantPackage'],
    ];
    tenants_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['TenantPackage_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['TenantPackage_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['TenantPackage_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['TenantPackage_aggregate'],
    ];
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "PackageApplication" */
  ['PackageApplication']: AliasType<{
    /** An object relationship */
    application?: ResolverInputTypes['Application'];
    applicationId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    /** An object relationship */
    package?: ResolverInputTypes['Package'];
    packageId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "PackageApplication" */
  ['PackageApplication_aggregate']: AliasType<{
    aggregate?: ResolverInputTypes['PackageApplication_aggregate_fields'];
    nodes?: ResolverInputTypes['PackageApplication'];
    __typename?: boolean | `@${string}`;
  }>;
  ['PackageApplication_aggregate_bool_exp']: {
    count?:
      | ResolverInputTypes['PackageApplication_aggregate_bool_exp_count']
      | undefined
      | null;
  };
  ['PackageApplication_aggregate_bool_exp_count']: {
    arguments?:
      | Array<ResolverInputTypes['PackageApplication_select_column']>
      | undefined
      | null;
    distinct?: boolean | undefined | null;
    filter?:
      | ResolverInputTypes['PackageApplication_bool_exp']
      | undefined
      | null;
    predicate: ResolverInputTypes['Int_comparison_exp'];
  };
  /** aggregate fields of "PackageApplication" */
  ['PackageApplication_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?:
          | Array<ResolverInputTypes['PackageApplication_select_column']>
          | undefined
          | null;
        distinct?: boolean | undefined | null;
      },
      boolean | `@${string}`,
    ];
    max?: ResolverInputTypes['PackageApplication_max_fields'];
    min?: ResolverInputTypes['PackageApplication_min_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** order by aggregate values of table "PackageApplication" */
  ['PackageApplication_aggregate_order_by']: {
    count?: ResolverInputTypes['order_by'] | undefined | null;
    max?:
      | ResolverInputTypes['PackageApplication_max_order_by']
      | undefined
      | null;
    min?:
      | ResolverInputTypes['PackageApplication_min_order_by']
      | undefined
      | null;
  };
  /** input type for inserting array relation for remote table "PackageApplication" */
  ['PackageApplication_arr_rel_insert_input']: {
    data: Array<ResolverInputTypes['PackageApplication_insert_input']>;
    /** upsert condition */
    on_conflict?:
      | ResolverInputTypes['PackageApplication_on_conflict']
      | undefined
      | null;
  };
  /** Boolean expression to filter rows from the table "PackageApplication". All fields are combined with a logical 'AND'. */
  ['PackageApplication_bool_exp']: {
    _and?:
      | Array<ResolverInputTypes['PackageApplication_bool_exp']>
      | undefined
      | null;
    _not?: ResolverInputTypes['PackageApplication_bool_exp'] | undefined | null;
    _or?:
      | Array<ResolverInputTypes['PackageApplication_bool_exp']>
      | undefined
      | null;
    application?: ResolverInputTypes['Application_bool_exp'] | undefined | null;
    applicationId?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    id?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    package?: ResolverInputTypes['Package_bool_exp'] | undefined | null;
    packageId?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
  };
  /** unique or primary key constraints on table "PackageApplication" */
  ['PackageApplication_constraint']: PackageApplication_constraint;
  /** input type for inserting data into table "PackageApplication" */
  ['PackageApplication_insert_input']: {
    application?:
      | ResolverInputTypes['Application_obj_rel_insert_input']
      | undefined
      | null;
    applicationId?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    package?:
      | ResolverInputTypes['Package_obj_rel_insert_input']
      | undefined
      | null;
    packageId?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** aggregate max on columns */
  ['PackageApplication_max_fields']: AliasType<{
    applicationId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    packageId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by max() on columns of table "PackageApplication" */
  ['PackageApplication_max_order_by']: {
    applicationId?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    packageId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** aggregate min on columns */
  ['PackageApplication_min_fields']: AliasType<{
    applicationId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    packageId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by min() on columns of table "PackageApplication" */
  ['PackageApplication_min_order_by']: {
    applicationId?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    packageId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** response of any mutation on the table "PackageApplication" */
  ['PackageApplication_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ResolverInputTypes['PackageApplication'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "PackageApplication" */
  ['PackageApplication_on_conflict']: {
    constraint: ResolverInputTypes['PackageApplication_constraint'];
    update_columns: Array<
      ResolverInputTypes['PackageApplication_update_column']
    >;
    where?:
      | ResolverInputTypes['PackageApplication_bool_exp']
      | undefined
      | null;
  };
  /** Ordering options when selecting data from "PackageApplication". */
  ['PackageApplication_order_by']: {
    application?: ResolverInputTypes['Application_order_by'] | undefined | null;
    applicationId?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    package?: ResolverInputTypes['Package_order_by'] | undefined | null;
    packageId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** primary key columns input for table: PackageApplication */
  ['PackageApplication_pk_columns_input']: {
    id: ResolverInputTypes['uuid'];
  };
  /** select columns of table "PackageApplication" */
  ['PackageApplication_select_column']: PackageApplication_select_column;
  /** input type for updating data in table "PackageApplication" */
  ['PackageApplication_set_input']: {
    applicationId?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    packageId?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** Streaming cursor of the table "PackageApplication" */
  ['PackageApplication_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ResolverInputTypes['PackageApplication_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ResolverInputTypes['cursor_ordering'] | undefined | null;
  };
  /** Initial value of the column from where the streaming should start */
  ['PackageApplication_stream_cursor_value_input']: {
    applicationId?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    packageId?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** update columns of table "PackageApplication" */
  ['PackageApplication_update_column']: PackageApplication_update_column;
  ['PackageApplication_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?:
      | ResolverInputTypes['PackageApplication_set_input']
      | undefined
      | null;
    /** filter the rows which have to be updated */
    where: ResolverInputTypes['PackageApplication_bool_exp'];
  };
  /** aggregated selection of "Package" */
  ['Package_aggregate']: AliasType<{
    aggregate?: ResolverInputTypes['Package_aggregate_fields'];
    nodes?: ResolverInputTypes['Package'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "Package" */
  ['Package_aggregate_fields']: AliasType<{
    avg?: ResolverInputTypes['Package_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ResolverInputTypes['Package_select_column']>
          | undefined
          | null;
        distinct?: boolean | undefined | null;
      },
      boolean | `@${string}`,
    ];
    max?: ResolverInputTypes['Package_max_fields'];
    min?: ResolverInputTypes['Package_min_fields'];
    stddev?: ResolverInputTypes['Package_stddev_fields'];
    stddev_pop?: ResolverInputTypes['Package_stddev_pop_fields'];
    stddev_samp?: ResolverInputTypes['Package_stddev_samp_fields'];
    sum?: ResolverInputTypes['Package_sum_fields'];
    var_pop?: ResolverInputTypes['Package_var_pop_fields'];
    var_samp?: ResolverInputTypes['Package_var_samp_fields'];
    variance?: ResolverInputTypes['Package_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate avg on columns */
  ['Package_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "Package". All fields are combined with a logical 'AND'. */
  ['Package_bool_exp']: {
    _and?: Array<ResolverInputTypes['Package_bool_exp']> | undefined | null;
    _not?: ResolverInputTypes['Package_bool_exp'] | undefined | null;
    _or?: Array<ResolverInputTypes['Package_bool_exp']> | undefined | null;
    applications?:
      | ResolverInputTypes['PackageApplication_bool_exp']
      | undefined
      | null;
    applications_aggregate?:
      | ResolverInputTypes['PackageApplication_aggregate_bool_exp']
      | undefined
      | null;
    cursorId?: ResolverInputTypes['bigint_comparison_exp'] | undefined | null;
    description?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    id?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    name?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    objects?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    price?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    roles?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    tenants?: ResolverInputTypes['TenantPackage_bool_exp'] | undefined | null;
    tenants_aggregate?:
      | ResolverInputTypes['TenantPackage_aggregate_bool_exp']
      | undefined
      | null;
  };
  /** unique or primary key constraints on table "Package" */
  ['Package_constraint']: Package_constraint;
  /** input type for incrementing numeric columns in table "Package" */
  ['Package_inc_input']: {
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
  };
  /** input type for inserting data into table "Package" */
  ['Package_insert_input']: {
    applications?:
      | ResolverInputTypes['PackageApplication_arr_rel_insert_input']
      | undefined
      | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    objects?: string | undefined | null;
    price?: string | undefined | null;
    roles?: string | undefined | null;
    tenants?:
      | ResolverInputTypes['TenantPackage_arr_rel_insert_input']
      | undefined
      | null;
  };
  /** aggregate max on columns */
  ['Package_max_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    objects?: boolean | `@${string}`;
    price?: boolean | `@${string}`;
    roles?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['Package_min_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    objects?: boolean | `@${string}`;
    price?: boolean | `@${string}`;
    roles?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "Package" */
  ['Package_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ResolverInputTypes['Package'];
    __typename?: boolean | `@${string}`;
  }>;
  /** input type for inserting object relation for remote table "Package" */
  ['Package_obj_rel_insert_input']: {
    data: ResolverInputTypes['Package_insert_input'];
    /** upsert condition */
    on_conflict?: ResolverInputTypes['Package_on_conflict'] | undefined | null;
  };
  /** on_conflict condition type for table "Package" */
  ['Package_on_conflict']: {
    constraint: ResolverInputTypes['Package_constraint'];
    update_columns: Array<ResolverInputTypes['Package_update_column']>;
    where?: ResolverInputTypes['Package_bool_exp'] | undefined | null;
  };
  /** Ordering options when selecting data from "Package". */
  ['Package_order_by']: {
    applications_aggregate?:
      | ResolverInputTypes['PackageApplication_aggregate_order_by']
      | undefined
      | null;
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
    description?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    name?: ResolverInputTypes['order_by'] | undefined | null;
    objects?: ResolverInputTypes['order_by'] | undefined | null;
    price?: ResolverInputTypes['order_by'] | undefined | null;
    roles?: ResolverInputTypes['order_by'] | undefined | null;
    tenants_aggregate?:
      | ResolverInputTypes['TenantPackage_aggregate_order_by']
      | undefined
      | null;
  };
  /** primary key columns input for table: Package */
  ['Package_pk_columns_input']: {
    id: ResolverInputTypes['uuid'];
  };
  /** select columns of table "Package" */
  ['Package_select_column']: Package_select_column;
  /** input type for updating data in table "Package" */
  ['Package_set_input']: {
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    objects?: string | undefined | null;
    price?: string | undefined | null;
    roles?: string | undefined | null;
  };
  /** aggregate stddev on columns */
  ['Package_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_pop on columns */
  ['Package_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_samp on columns */
  ['Package_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Streaming cursor of the table "Package" */
  ['Package_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ResolverInputTypes['Package_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ResolverInputTypes['cursor_ordering'] | undefined | null;
  };
  /** Initial value of the column from where the streaming should start */
  ['Package_stream_cursor_value_input']: {
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    objects?: string | undefined | null;
    price?: string | undefined | null;
    roles?: string | undefined | null;
  };
  /** aggregate sum on columns */
  ['Package_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** update columns of table "Package" */
  ['Package_update_column']: Package_update_column;
  ['Package_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: ResolverInputTypes['Package_inc_input'] | undefined | null;
    /** sets the columns of the filtered rows to the given values */
    _set?: ResolverInputTypes['Package_set_input'] | undefined | null;
    /** filter the rows which have to be updated */
    where: ResolverInputTypes['Package_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['Package_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate var_samp on columns */
  ['Package_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate variance on columns */
  ['Package_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "Product" */
  ['Product']: AliasType<{
    code?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    metric?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    productCategories?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['ProductCategory_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['ProductCategory_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?:
          | ResolverInputTypes['ProductCategory_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['ProductCategory'],
    ];
    productCategories_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['ProductCategory_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['ProductCategory_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?:
          | ResolverInputTypes['ProductCategory_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['ProductCategory_aggregate'],
    ];
    productVersions?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['ProductVersion_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['ProductVersion_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?:
          | ResolverInputTypes['ProductVersion_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['ProductVersion'],
    ];
    productVersions_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['ProductVersion_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['ProductVersion_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?:
          | ResolverInputTypes['ProductVersion_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['ProductVersion_aggregate'],
    ];
    status?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    version?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "ProductCategory" */
  ['ProductCategory']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    /** An object relationship */
    product?: ResolverInputTypes['Product'];
    productId?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "ProductCategory" */
  ['ProductCategory_aggregate']: AliasType<{
    aggregate?: ResolverInputTypes['ProductCategory_aggregate_fields'];
    nodes?: ResolverInputTypes['ProductCategory'];
    __typename?: boolean | `@${string}`;
  }>;
  ['ProductCategory_aggregate_bool_exp']: {
    count?:
      | ResolverInputTypes['ProductCategory_aggregate_bool_exp_count']
      | undefined
      | null;
  };
  ['ProductCategory_aggregate_bool_exp_count']: {
    arguments?:
      | Array<ResolverInputTypes['ProductCategory_select_column']>
      | undefined
      | null;
    distinct?: boolean | undefined | null;
    filter?: ResolverInputTypes['ProductCategory_bool_exp'] | undefined | null;
    predicate: ResolverInputTypes['Int_comparison_exp'];
  };
  /** aggregate fields of "ProductCategory" */
  ['ProductCategory_aggregate_fields']: AliasType<{
    avg?: ResolverInputTypes['ProductCategory_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ResolverInputTypes['ProductCategory_select_column']>
          | undefined
          | null;
        distinct?: boolean | undefined | null;
      },
      boolean | `@${string}`,
    ];
    max?: ResolverInputTypes['ProductCategory_max_fields'];
    min?: ResolverInputTypes['ProductCategory_min_fields'];
    stddev?: ResolverInputTypes['ProductCategory_stddev_fields'];
    stddev_pop?: ResolverInputTypes['ProductCategory_stddev_pop_fields'];
    stddev_samp?: ResolverInputTypes['ProductCategory_stddev_samp_fields'];
    sum?: ResolverInputTypes['ProductCategory_sum_fields'];
    var_pop?: ResolverInputTypes['ProductCategory_var_pop_fields'];
    var_samp?: ResolverInputTypes['ProductCategory_var_samp_fields'];
    variance?: ResolverInputTypes['ProductCategory_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** order by aggregate values of table "ProductCategory" */
  ['ProductCategory_aggregate_order_by']: {
    avg?: ResolverInputTypes['ProductCategory_avg_order_by'] | undefined | null;
    count?: ResolverInputTypes['order_by'] | undefined | null;
    max?: ResolverInputTypes['ProductCategory_max_order_by'] | undefined | null;
    min?: ResolverInputTypes['ProductCategory_min_order_by'] | undefined | null;
    stddev?:
      | ResolverInputTypes['ProductCategory_stddev_order_by']
      | undefined
      | null;
    stddev_pop?:
      | ResolverInputTypes['ProductCategory_stddev_pop_order_by']
      | undefined
      | null;
    stddev_samp?:
      | ResolverInputTypes['ProductCategory_stddev_samp_order_by']
      | undefined
      | null;
    sum?: ResolverInputTypes['ProductCategory_sum_order_by'] | undefined | null;
    var_pop?:
      | ResolverInputTypes['ProductCategory_var_pop_order_by']
      | undefined
      | null;
    var_samp?:
      | ResolverInputTypes['ProductCategory_var_samp_order_by']
      | undefined
      | null;
    variance?:
      | ResolverInputTypes['ProductCategory_variance_order_by']
      | undefined
      | null;
  };
  /** input type for inserting array relation for remote table "ProductCategory" */
  ['ProductCategory_arr_rel_insert_input']: {
    data: Array<ResolverInputTypes['ProductCategory_insert_input']>;
    /** upsert condition */
    on_conflict?:
      | ResolverInputTypes['ProductCategory_on_conflict']
      | undefined
      | null;
  };
  /** aggregate avg on columns */
  ['ProductCategory_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by avg() on columns of table "ProductCategory" */
  ['ProductCategory_avg_order_by']: {
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** Boolean expression to filter rows from the table "ProductCategory". All fields are combined with a logical 'AND'. */
  ['ProductCategory_bool_exp']: {
    _and?:
      | Array<ResolverInputTypes['ProductCategory_bool_exp']>
      | undefined
      | null;
    _not?: ResolverInputTypes['ProductCategory_bool_exp'] | undefined | null;
    _or?:
      | Array<ResolverInputTypes['ProductCategory_bool_exp']>
      | undefined
      | null;
    createdAt?:
      | ResolverInputTypes['timestamptz_comparison_exp']
      | undefined
      | null;
    createdById?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint_comparison_exp'] | undefined | null;
    id?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    name?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    product?: ResolverInputTypes['Product_bool_exp'] | undefined | null;
    productId?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    status?:
      | ResolverInputTypes['Status_enum_comparison_exp']
      | undefined
      | null;
    tenantId?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    updatedAt?:
      | ResolverInputTypes['timestamptz_comparison_exp']
      | undefined
      | null;
    updatedById?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
  };
  /** unique or primary key constraints on table "ProductCategory" */
  ['ProductCategory_constraint']: ProductCategory_constraint;
  /** input type for incrementing numeric columns in table "ProductCategory" */
  ['ProductCategory_inc_input']: {
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
  };
  /** input type for inserting data into table "ProductCategory" */
  ['ProductCategory_insert_input']: {
    createdAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    product?:
      | ResolverInputTypes['Product_obj_rel_insert_input']
      | undefined
      | null;
    productId?: ResolverInputTypes['uuid'] | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** aggregate max on columns */
  ['ProductCategory_max_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    productId?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by max() on columns of table "ProductCategory" */
  ['ProductCategory_max_order_by']: {
    createdAt?: ResolverInputTypes['order_by'] | undefined | null;
    createdById?: ResolverInputTypes['order_by'] | undefined | null;
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    name?: ResolverInputTypes['order_by'] | undefined | null;
    productId?: ResolverInputTypes['order_by'] | undefined | null;
    tenantId?: ResolverInputTypes['order_by'] | undefined | null;
    updatedAt?: ResolverInputTypes['order_by'] | undefined | null;
    updatedById?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** aggregate min on columns */
  ['ProductCategory_min_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    productId?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by min() on columns of table "ProductCategory" */
  ['ProductCategory_min_order_by']: {
    createdAt?: ResolverInputTypes['order_by'] | undefined | null;
    createdById?: ResolverInputTypes['order_by'] | undefined | null;
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    name?: ResolverInputTypes['order_by'] | undefined | null;
    productId?: ResolverInputTypes['order_by'] | undefined | null;
    tenantId?: ResolverInputTypes['order_by'] | undefined | null;
    updatedAt?: ResolverInputTypes['order_by'] | undefined | null;
    updatedById?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** response of any mutation on the table "ProductCategory" */
  ['ProductCategory_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ResolverInputTypes['ProductCategory'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "ProductCategory" */
  ['ProductCategory_on_conflict']: {
    constraint: ResolverInputTypes['ProductCategory_constraint'];
    update_columns: Array<ResolverInputTypes['ProductCategory_update_column']>;
    where?: ResolverInputTypes['ProductCategory_bool_exp'] | undefined | null;
  };
  /** Ordering options when selecting data from "ProductCategory". */
  ['ProductCategory_order_by']: {
    createdAt?: ResolverInputTypes['order_by'] | undefined | null;
    createdById?: ResolverInputTypes['order_by'] | undefined | null;
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    name?: ResolverInputTypes['order_by'] | undefined | null;
    product?: ResolverInputTypes['Product_order_by'] | undefined | null;
    productId?: ResolverInputTypes['order_by'] | undefined | null;
    status?: ResolverInputTypes['order_by'] | undefined | null;
    tenantId?: ResolverInputTypes['order_by'] | undefined | null;
    updatedAt?: ResolverInputTypes['order_by'] | undefined | null;
    updatedById?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** primary key columns input for table: ProductCategory */
  ['ProductCategory_pk_columns_input']: {
    id: ResolverInputTypes['uuid'];
  };
  /** select columns of table "ProductCategory" */
  ['ProductCategory_select_column']: ProductCategory_select_column;
  /** input type for updating data in table "ProductCategory" */
  ['ProductCategory_set_input']: {
    createdAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    productId?: ResolverInputTypes['uuid'] | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** aggregate stddev on columns */
  ['ProductCategory_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by stddev() on columns of table "ProductCategory" */
  ['ProductCategory_stddev_order_by']: {
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** aggregate stddev_pop on columns */
  ['ProductCategory_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by stddev_pop() on columns of table "ProductCategory" */
  ['ProductCategory_stddev_pop_order_by']: {
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** aggregate stddev_samp on columns */
  ['ProductCategory_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by stddev_samp() on columns of table "ProductCategory" */
  ['ProductCategory_stddev_samp_order_by']: {
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** Streaming cursor of the table "ProductCategory" */
  ['ProductCategory_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ResolverInputTypes['ProductCategory_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ResolverInputTypes['cursor_ordering'] | undefined | null;
  };
  /** Initial value of the column from where the streaming should start */
  ['ProductCategory_stream_cursor_value_input']: {
    createdAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    productId?: ResolverInputTypes['uuid'] | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** aggregate sum on columns */
  ['ProductCategory_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by sum() on columns of table "ProductCategory" */
  ['ProductCategory_sum_order_by']: {
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** update columns of table "ProductCategory" */
  ['ProductCategory_update_column']: ProductCategory_update_column;
  ['ProductCategory_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: ResolverInputTypes['ProductCategory_inc_input'] | undefined | null;
    /** sets the columns of the filtered rows to the given values */
    _set?: ResolverInputTypes['ProductCategory_set_input'] | undefined | null;
    /** filter the rows which have to be updated */
    where: ResolverInputTypes['ProductCategory_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['ProductCategory_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by var_pop() on columns of table "ProductCategory" */
  ['ProductCategory_var_pop_order_by']: {
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** aggregate var_samp on columns */
  ['ProductCategory_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by var_samp() on columns of table "ProductCategory" */
  ['ProductCategory_var_samp_order_by']: {
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** aggregate variance on columns */
  ['ProductCategory_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by variance() on columns of table "ProductCategory" */
  ['ProductCategory_variance_order_by']: {
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** columns and relationships of "ProductVersion" */
  ['ProductVersion']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    /** An object relationship */
    product?: ResolverInputTypes['Product'];
    productId?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    version?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "ProductVersion" */
  ['ProductVersion_aggregate']: AliasType<{
    aggregate?: ResolverInputTypes['ProductVersion_aggregate_fields'];
    nodes?: ResolverInputTypes['ProductVersion'];
    __typename?: boolean | `@${string}`;
  }>;
  ['ProductVersion_aggregate_bool_exp']: {
    count?:
      | ResolverInputTypes['ProductVersion_aggregate_bool_exp_count']
      | undefined
      | null;
  };
  ['ProductVersion_aggregate_bool_exp_count']: {
    arguments?:
      | Array<ResolverInputTypes['ProductVersion_select_column']>
      | undefined
      | null;
    distinct?: boolean | undefined | null;
    filter?: ResolverInputTypes['ProductVersion_bool_exp'] | undefined | null;
    predicate: ResolverInputTypes['Int_comparison_exp'];
  };
  /** aggregate fields of "ProductVersion" */
  ['ProductVersion_aggregate_fields']: AliasType<{
    avg?: ResolverInputTypes['ProductVersion_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ResolverInputTypes['ProductVersion_select_column']>
          | undefined
          | null;
        distinct?: boolean | undefined | null;
      },
      boolean | `@${string}`,
    ];
    max?: ResolverInputTypes['ProductVersion_max_fields'];
    min?: ResolverInputTypes['ProductVersion_min_fields'];
    stddev?: ResolverInputTypes['ProductVersion_stddev_fields'];
    stddev_pop?: ResolverInputTypes['ProductVersion_stddev_pop_fields'];
    stddev_samp?: ResolverInputTypes['ProductVersion_stddev_samp_fields'];
    sum?: ResolverInputTypes['ProductVersion_sum_fields'];
    var_pop?: ResolverInputTypes['ProductVersion_var_pop_fields'];
    var_samp?: ResolverInputTypes['ProductVersion_var_samp_fields'];
    variance?: ResolverInputTypes['ProductVersion_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** order by aggregate values of table "ProductVersion" */
  ['ProductVersion_aggregate_order_by']: {
    avg?: ResolverInputTypes['ProductVersion_avg_order_by'] | undefined | null;
    count?: ResolverInputTypes['order_by'] | undefined | null;
    max?: ResolverInputTypes['ProductVersion_max_order_by'] | undefined | null;
    min?: ResolverInputTypes['ProductVersion_min_order_by'] | undefined | null;
    stddev?:
      | ResolverInputTypes['ProductVersion_stddev_order_by']
      | undefined
      | null;
    stddev_pop?:
      | ResolverInputTypes['ProductVersion_stddev_pop_order_by']
      | undefined
      | null;
    stddev_samp?:
      | ResolverInputTypes['ProductVersion_stddev_samp_order_by']
      | undefined
      | null;
    sum?: ResolverInputTypes['ProductVersion_sum_order_by'] | undefined | null;
    var_pop?:
      | ResolverInputTypes['ProductVersion_var_pop_order_by']
      | undefined
      | null;
    var_samp?:
      | ResolverInputTypes['ProductVersion_var_samp_order_by']
      | undefined
      | null;
    variance?:
      | ResolverInputTypes['ProductVersion_variance_order_by']
      | undefined
      | null;
  };
  /** input type for inserting array relation for remote table "ProductVersion" */
  ['ProductVersion_arr_rel_insert_input']: {
    data: Array<ResolverInputTypes['ProductVersion_insert_input']>;
    /** upsert condition */
    on_conflict?:
      | ResolverInputTypes['ProductVersion_on_conflict']
      | undefined
      | null;
  };
  /** aggregate avg on columns */
  ['ProductVersion_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by avg() on columns of table "ProductVersion" */
  ['ProductVersion_avg_order_by']: {
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** Boolean expression to filter rows from the table "ProductVersion". All fields are combined with a logical 'AND'. */
  ['ProductVersion_bool_exp']: {
    _and?:
      | Array<ResolverInputTypes['ProductVersion_bool_exp']>
      | undefined
      | null;
    _not?: ResolverInputTypes['ProductVersion_bool_exp'] | undefined | null;
    _or?:
      | Array<ResolverInputTypes['ProductVersion_bool_exp']>
      | undefined
      | null;
    createdAt?:
      | ResolverInputTypes['timestamptz_comparison_exp']
      | undefined
      | null;
    createdById?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint_comparison_exp'] | undefined | null;
    id?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    name?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    product?: ResolverInputTypes['Product_bool_exp'] | undefined | null;
    productId?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    status?:
      | ResolverInputTypes['Status_enum_comparison_exp']
      | undefined
      | null;
    tenantId?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    updatedAt?:
      | ResolverInputTypes['timestamptz_comparison_exp']
      | undefined
      | null;
    updatedById?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    version?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
  };
  /** unique or primary key constraints on table "ProductVersion" */
  ['ProductVersion_constraint']: ProductVersion_constraint;
  /** input type for incrementing numeric columns in table "ProductVersion" */
  ['ProductVersion_inc_input']: {
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
  };
  /** input type for inserting data into table "ProductVersion" */
  ['ProductVersion_insert_input']: {
    createdAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    product?:
      | ResolverInputTypes['Product_obj_rel_insert_input']
      | undefined
      | null;
    productId?: ResolverInputTypes['uuid'] | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
    version?: string | undefined | null;
  };
  /** aggregate max on columns */
  ['ProductVersion_max_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    productId?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    version?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by max() on columns of table "ProductVersion" */
  ['ProductVersion_max_order_by']: {
    createdAt?: ResolverInputTypes['order_by'] | undefined | null;
    createdById?: ResolverInputTypes['order_by'] | undefined | null;
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    name?: ResolverInputTypes['order_by'] | undefined | null;
    productId?: ResolverInputTypes['order_by'] | undefined | null;
    tenantId?: ResolverInputTypes['order_by'] | undefined | null;
    updatedAt?: ResolverInputTypes['order_by'] | undefined | null;
    updatedById?: ResolverInputTypes['order_by'] | undefined | null;
    version?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** aggregate min on columns */
  ['ProductVersion_min_fields']: AliasType<{
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    productId?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    version?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by min() on columns of table "ProductVersion" */
  ['ProductVersion_min_order_by']: {
    createdAt?: ResolverInputTypes['order_by'] | undefined | null;
    createdById?: ResolverInputTypes['order_by'] | undefined | null;
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    name?: ResolverInputTypes['order_by'] | undefined | null;
    productId?: ResolverInputTypes['order_by'] | undefined | null;
    tenantId?: ResolverInputTypes['order_by'] | undefined | null;
    updatedAt?: ResolverInputTypes['order_by'] | undefined | null;
    updatedById?: ResolverInputTypes['order_by'] | undefined | null;
    version?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** response of any mutation on the table "ProductVersion" */
  ['ProductVersion_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ResolverInputTypes['ProductVersion'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "ProductVersion" */
  ['ProductVersion_on_conflict']: {
    constraint: ResolverInputTypes['ProductVersion_constraint'];
    update_columns: Array<ResolverInputTypes['ProductVersion_update_column']>;
    where?: ResolverInputTypes['ProductVersion_bool_exp'] | undefined | null;
  };
  /** Ordering options when selecting data from "ProductVersion". */
  ['ProductVersion_order_by']: {
    createdAt?: ResolverInputTypes['order_by'] | undefined | null;
    createdById?: ResolverInputTypes['order_by'] | undefined | null;
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    name?: ResolverInputTypes['order_by'] | undefined | null;
    product?: ResolverInputTypes['Product_order_by'] | undefined | null;
    productId?: ResolverInputTypes['order_by'] | undefined | null;
    status?: ResolverInputTypes['order_by'] | undefined | null;
    tenantId?: ResolverInputTypes['order_by'] | undefined | null;
    updatedAt?: ResolverInputTypes['order_by'] | undefined | null;
    updatedById?: ResolverInputTypes['order_by'] | undefined | null;
    version?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** primary key columns input for table: ProductVersion */
  ['ProductVersion_pk_columns_input']: {
    id: ResolverInputTypes['uuid'];
  };
  /** select columns of table "ProductVersion" */
  ['ProductVersion_select_column']: ProductVersion_select_column;
  /** input type for updating data in table "ProductVersion" */
  ['ProductVersion_set_input']: {
    createdAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    productId?: ResolverInputTypes['uuid'] | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
    version?: string | undefined | null;
  };
  /** aggregate stddev on columns */
  ['ProductVersion_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by stddev() on columns of table "ProductVersion" */
  ['ProductVersion_stddev_order_by']: {
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** aggregate stddev_pop on columns */
  ['ProductVersion_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by stddev_pop() on columns of table "ProductVersion" */
  ['ProductVersion_stddev_pop_order_by']: {
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** aggregate stddev_samp on columns */
  ['ProductVersion_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by stddev_samp() on columns of table "ProductVersion" */
  ['ProductVersion_stddev_samp_order_by']: {
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** Streaming cursor of the table "ProductVersion" */
  ['ProductVersion_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ResolverInputTypes['ProductVersion_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ResolverInputTypes['cursor_ordering'] | undefined | null;
  };
  /** Initial value of the column from where the streaming should start */
  ['ProductVersion_stream_cursor_value_input']: {
    createdAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    productId?: ResolverInputTypes['uuid'] | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
    version?: string | undefined | null;
  };
  /** aggregate sum on columns */
  ['ProductVersion_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by sum() on columns of table "ProductVersion" */
  ['ProductVersion_sum_order_by']: {
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** update columns of table "ProductVersion" */
  ['ProductVersion_update_column']: ProductVersion_update_column;
  ['ProductVersion_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: ResolverInputTypes['ProductVersion_inc_input'] | undefined | null;
    /** sets the columns of the filtered rows to the given values */
    _set?: ResolverInputTypes['ProductVersion_set_input'] | undefined | null;
    /** filter the rows which have to be updated */
    where: ResolverInputTypes['ProductVersion_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['ProductVersion_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by var_pop() on columns of table "ProductVersion" */
  ['ProductVersion_var_pop_order_by']: {
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** aggregate var_samp on columns */
  ['ProductVersion_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by var_samp() on columns of table "ProductVersion" */
  ['ProductVersion_var_samp_order_by']: {
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** aggregate variance on columns */
  ['ProductVersion_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by variance() on columns of table "ProductVersion" */
  ['ProductVersion_variance_order_by']: {
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** aggregated selection of "Product" */
  ['Product_aggregate']: AliasType<{
    aggregate?: ResolverInputTypes['Product_aggregate_fields'];
    nodes?: ResolverInputTypes['Product'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "Product" */
  ['Product_aggregate_fields']: AliasType<{
    avg?: ResolverInputTypes['Product_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ResolverInputTypes['Product_select_column']>
          | undefined
          | null;
        distinct?: boolean | undefined | null;
      },
      boolean | `@${string}`,
    ];
    max?: ResolverInputTypes['Product_max_fields'];
    min?: ResolverInputTypes['Product_min_fields'];
    stddev?: ResolverInputTypes['Product_stddev_fields'];
    stddev_pop?: ResolverInputTypes['Product_stddev_pop_fields'];
    stddev_samp?: ResolverInputTypes['Product_stddev_samp_fields'];
    sum?: ResolverInputTypes['Product_sum_fields'];
    var_pop?: ResolverInputTypes['Product_var_pop_fields'];
    var_samp?: ResolverInputTypes['Product_var_samp_fields'];
    variance?: ResolverInputTypes['Product_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate avg on columns */
  ['Product_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "Product". All fields are combined with a logical 'AND'. */
  ['Product_bool_exp']: {
    _and?: Array<ResolverInputTypes['Product_bool_exp']> | undefined | null;
    _not?: ResolverInputTypes['Product_bool_exp'] | undefined | null;
    _or?: Array<ResolverInputTypes['Product_bool_exp']> | undefined | null;
    code?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    createdAt?:
      | ResolverInputTypes['timestamp_comparison_exp']
      | undefined
      | null;
    createdById?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint_comparison_exp'] | undefined | null;
    description?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    id?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    metric?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    name?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    productCategories?:
      | ResolverInputTypes['ProductCategory_bool_exp']
      | undefined
      | null;
    productCategories_aggregate?:
      | ResolverInputTypes['ProductCategory_aggregate_bool_exp']
      | undefined
      | null;
    productVersions?:
      | ResolverInputTypes['ProductVersion_bool_exp']
      | undefined
      | null;
    productVersions_aggregate?:
      | ResolverInputTypes['ProductVersion_aggregate_bool_exp']
      | undefined
      | null;
    status?:
      | ResolverInputTypes['Status_enum_comparison_exp']
      | undefined
      | null;
    tenantId?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    updatedAt?:
      | ResolverInputTypes['timestamptz_comparison_exp']
      | undefined
      | null;
    updatedById?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    version?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
  };
  /** unique or primary key constraints on table "Product" */
  ['Product_constraint']: Product_constraint;
  /** input type for incrementing numeric columns in table "Product" */
  ['Product_inc_input']: {
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
  };
  /** input type for inserting data into table "Product" */
  ['Product_insert_input']: {
    code?: string | undefined | null;
    createdAt?: ResolverInputTypes['timestamp'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    metric?: string | undefined | null;
    name?: string | undefined | null;
    productCategories?:
      | ResolverInputTypes['ProductCategory_arr_rel_insert_input']
      | undefined
      | null;
    productVersions?:
      | ResolverInputTypes['ProductVersion_arr_rel_insert_input']
      | undefined
      | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
    version?: string | undefined | null;
  };
  /** aggregate max on columns */
  ['Product_max_fields']: AliasType<{
    code?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    metric?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    version?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['Product_min_fields']: AliasType<{
    code?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    metric?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    version?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "Product" */
  ['Product_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ResolverInputTypes['Product'];
    __typename?: boolean | `@${string}`;
  }>;
  /** input type for inserting object relation for remote table "Product" */
  ['Product_obj_rel_insert_input']: {
    data: ResolverInputTypes['Product_insert_input'];
    /** upsert condition */
    on_conflict?: ResolverInputTypes['Product_on_conflict'] | undefined | null;
  };
  /** on_conflict condition type for table "Product" */
  ['Product_on_conflict']: {
    constraint: ResolverInputTypes['Product_constraint'];
    update_columns: Array<ResolverInputTypes['Product_update_column']>;
    where?: ResolverInputTypes['Product_bool_exp'] | undefined | null;
  };
  /** Ordering options when selecting data from "Product". */
  ['Product_order_by']: {
    code?: ResolverInputTypes['order_by'] | undefined | null;
    createdAt?: ResolverInputTypes['order_by'] | undefined | null;
    createdById?: ResolverInputTypes['order_by'] | undefined | null;
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
    description?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    metric?: ResolverInputTypes['order_by'] | undefined | null;
    name?: ResolverInputTypes['order_by'] | undefined | null;
    productCategories_aggregate?:
      | ResolverInputTypes['ProductCategory_aggregate_order_by']
      | undefined
      | null;
    productVersions_aggregate?:
      | ResolverInputTypes['ProductVersion_aggregate_order_by']
      | undefined
      | null;
    status?: ResolverInputTypes['order_by'] | undefined | null;
    tenantId?: ResolverInputTypes['order_by'] | undefined | null;
    updatedAt?: ResolverInputTypes['order_by'] | undefined | null;
    updatedById?: ResolverInputTypes['order_by'] | undefined | null;
    version?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** primary key columns input for table: Product */
  ['Product_pk_columns_input']: {
    id: ResolverInputTypes['uuid'];
  };
  /** select columns of table "Product" */
  ['Product_select_column']: Product_select_column;
  /** input type for updating data in table "Product" */
  ['Product_set_input']: {
    code?: string | undefined | null;
    createdAt?: ResolverInputTypes['timestamp'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    metric?: string | undefined | null;
    name?: string | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
    version?: string | undefined | null;
  };
  /** aggregate stddev on columns */
  ['Product_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_pop on columns */
  ['Product_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_samp on columns */
  ['Product_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Streaming cursor of the table "Product" */
  ['Product_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ResolverInputTypes['Product_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ResolverInputTypes['cursor_ordering'] | undefined | null;
  };
  /** Initial value of the column from where the streaming should start */
  ['Product_stream_cursor_value_input']: {
    code?: string | undefined | null;
    createdAt?: ResolverInputTypes['timestamp'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    metric?: string | undefined | null;
    name?: string | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamptz'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
    version?: string | undefined | null;
  };
  /** aggregate sum on columns */
  ['Product_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** update columns of table "Product" */
  ['Product_update_column']: Product_update_column;
  ['Product_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: ResolverInputTypes['Product_inc_input'] | undefined | null;
    /** sets the columns of the filtered rows to the given values */
    _set?: ResolverInputTypes['Product_set_input'] | undefined | null;
    /** filter the rows which have to be updated */
    where: ResolverInputTypes['Product_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['Product_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate var_samp on columns */
  ['Product_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate variance on columns */
  ['Product_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "Role" */
  ['Role']: AliasType<{
    /** An object relationship */
    application?: ResolverInputTypes['Application'];
    applicationId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    roleGroups?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['GroupRole_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['GroupRole_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['GroupRole_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['GroupRole'],
    ];
    roleGroups_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['GroupRole_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['GroupRole_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['GroupRole_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['GroupRole_aggregate'],
    ];
    userRoles?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['UserRole_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['UserRole_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['UserRole_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['UserRole'],
    ];
    userRoles_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['UserRole_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['UserRole_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['UserRole_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['UserRole_aggregate'],
    ];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "Role" */
  ['Role_aggregate']: AliasType<{
    aggregate?: ResolverInputTypes['Role_aggregate_fields'];
    nodes?: ResolverInputTypes['Role'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "Role" */
  ['Role_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?:
          | Array<ResolverInputTypes['Role_select_column']>
          | undefined
          | null;
        distinct?: boolean | undefined | null;
      },
      boolean | `@${string}`,
    ];
    max?: ResolverInputTypes['Role_max_fields'];
    min?: ResolverInputTypes['Role_min_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "Role". All fields are combined with a logical 'AND'. */
  ['Role_bool_exp']: {
    _and?: Array<ResolverInputTypes['Role_bool_exp']> | undefined | null;
    _not?: ResolverInputTypes['Role_bool_exp'] | undefined | null;
    _or?: Array<ResolverInputTypes['Role_bool_exp']> | undefined | null;
    application?: ResolverInputTypes['Application_bool_exp'] | undefined | null;
    applicationId?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    description?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    id?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    name?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    roleGroups?: ResolverInputTypes['GroupRole_bool_exp'] | undefined | null;
    roleGroups_aggregate?:
      | ResolverInputTypes['GroupRole_aggregate_bool_exp']
      | undefined
      | null;
    userRoles?: ResolverInputTypes['UserRole_bool_exp'] | undefined | null;
    userRoles_aggregate?:
      | ResolverInputTypes['UserRole_aggregate_bool_exp']
      | undefined
      | null;
  };
  /** unique or primary key constraints on table "Role" */
  ['Role_constraint']: Role_constraint;
  /** input type for inserting data into table "Role" */
  ['Role_insert_input']: {
    application?:
      | ResolverInputTypes['Application_obj_rel_insert_input']
      | undefined
      | null;
    applicationId?: string | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
    roleGroups?:
      | ResolverInputTypes['GroupRole_arr_rel_insert_input']
      | undefined
      | null;
    userRoles?:
      | ResolverInputTypes['UserRole_arr_rel_insert_input']
      | undefined
      | null;
  };
  /** aggregate max on columns */
  ['Role_max_fields']: AliasType<{
    applicationId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['Role_min_fields']: AliasType<{
    applicationId?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "Role" */
  ['Role_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ResolverInputTypes['Role'];
    __typename?: boolean | `@${string}`;
  }>;
  /** input type for inserting object relation for remote table "Role" */
  ['Role_obj_rel_insert_input']: {
    data: ResolverInputTypes['Role_insert_input'];
    /** upsert condition */
    on_conflict?: ResolverInputTypes['Role_on_conflict'] | undefined | null;
  };
  /** on_conflict condition type for table "Role" */
  ['Role_on_conflict']: {
    constraint: ResolverInputTypes['Role_constraint'];
    update_columns: Array<ResolverInputTypes['Role_update_column']>;
    where?: ResolverInputTypes['Role_bool_exp'] | undefined | null;
  };
  /** Ordering options when selecting data from "Role". */
  ['Role_order_by']: {
    application?: ResolverInputTypes['Application_order_by'] | undefined | null;
    applicationId?: ResolverInputTypes['order_by'] | undefined | null;
    description?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    name?: ResolverInputTypes['order_by'] | undefined | null;
    roleGroups_aggregate?:
      | ResolverInputTypes['GroupRole_aggregate_order_by']
      | undefined
      | null;
    userRoles_aggregate?:
      | ResolverInputTypes['UserRole_aggregate_order_by']
      | undefined
      | null;
  };
  /** primary key columns input for table: Role */
  ['Role_pk_columns_input']: {
    id: ResolverInputTypes['uuid'];
  };
  /** select columns of table "Role" */
  ['Role_select_column']: Role_select_column;
  /** input type for updating data in table "Role" */
  ['Role_set_input']: {
    applicationId?: string | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
  };
  /** Streaming cursor of the table "Role" */
  ['Role_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ResolverInputTypes['Role_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ResolverInputTypes['cursor_ordering'] | undefined | null;
  };
  /** Initial value of the column from where the streaming should start */
  ['Role_stream_cursor_value_input']: {
    applicationId?: string | undefined | null;
    description?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    name?: string | undefined | null;
  };
  /** update columns of table "Role" */
  ['Role_update_column']: Role_update_column;
  ['Role_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: ResolverInputTypes['Role_set_input'] | undefined | null;
    /** filter the rows which have to be updated */
    where: ResolverInputTypes['Role_bool_exp'];
  };
  /** columns and relationships of "Status" */
  ['Status']: AliasType<{
    value?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "Status" */
  ['Status_aggregate']: AliasType<{
    aggregate?: ResolverInputTypes['Status_aggregate_fields'];
    nodes?: ResolverInputTypes['Status'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "Status" */
  ['Status_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?:
          | Array<ResolverInputTypes['Status_select_column']>
          | undefined
          | null;
        distinct?: boolean | undefined | null;
      },
      boolean | `@${string}`,
    ];
    max?: ResolverInputTypes['Status_max_fields'];
    min?: ResolverInputTypes['Status_min_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "Status". All fields are combined with a logical 'AND'. */
  ['Status_bool_exp']: {
    _and?: Array<ResolverInputTypes['Status_bool_exp']> | undefined | null;
    _not?: ResolverInputTypes['Status_bool_exp'] | undefined | null;
    _or?: Array<ResolverInputTypes['Status_bool_exp']> | undefined | null;
    value?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
  };
  /** unique or primary key constraints on table "Status" */
  ['Status_constraint']: Status_constraint;
  ['Status_enum']: Status_enum;
  /** Boolean expression to compare columns of type "Status_enum". All fields are combined with logical 'AND'. */
  ['Status_enum_comparison_exp']: {
    _eq?: ResolverInputTypes['Status_enum'] | undefined | null;
    _in?: Array<ResolverInputTypes['Status_enum']> | undefined | null;
    _is_null?: boolean | undefined | null;
    _neq?: ResolverInputTypes['Status_enum'] | undefined | null;
    _nin?: Array<ResolverInputTypes['Status_enum']> | undefined | null;
  };
  /** input type for inserting data into table "Status" */
  ['Status_insert_input']: {
    value?: string | undefined | null;
  };
  /** aggregate max on columns */
  ['Status_max_fields']: AliasType<{
    value?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['Status_min_fields']: AliasType<{
    value?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "Status" */
  ['Status_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ResolverInputTypes['Status'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "Status" */
  ['Status_on_conflict']: {
    constraint: ResolverInputTypes['Status_constraint'];
    update_columns: Array<ResolverInputTypes['Status_update_column']>;
    where?: ResolverInputTypes['Status_bool_exp'] | undefined | null;
  };
  /** Ordering options when selecting data from "Status". */
  ['Status_order_by']: {
    value?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** primary key columns input for table: Status */
  ['Status_pk_columns_input']: {
    value: string;
  };
  /** select columns of table "Status" */
  ['Status_select_column']: Status_select_column;
  /** input type for updating data in table "Status" */
  ['Status_set_input']: {
    value?: string | undefined | null;
  };
  /** Streaming cursor of the table "Status" */
  ['Status_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ResolverInputTypes['Status_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ResolverInputTypes['cursor_ordering'] | undefined | null;
  };
  /** Initial value of the column from where the streaming should start */
  ['Status_stream_cursor_value_input']: {
    value?: string | undefined | null;
  };
  /** update columns of table "Status" */
  ['Status_update_column']: Status_update_column;
  ['Status_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: ResolverInputTypes['Status_set_input'] | undefined | null;
    /** filter the rows which have to be updated */
    where: ResolverInputTypes['Status_bool_exp'];
  };
  /** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
  ['String_comparison_exp']: {
    _eq?: string | undefined | null;
    _gt?: string | undefined | null;
    _gte?: string | undefined | null;
    /** does the column match the given case-insensitive pattern */
    _ilike?: string | undefined | null;
    _in?: Array<string> | undefined | null;
    /** does the column match the given POSIX regular expression, case insensitive */
    _iregex?: string | undefined | null;
    _is_null?: boolean | undefined | null;
    /** does the column match the given pattern */
    _like?: string | undefined | null;
    _lt?: string | undefined | null;
    _lte?: string | undefined | null;
    _neq?: string | undefined | null;
    /** does the column NOT match the given case-insensitive pattern */
    _nilike?: string | undefined | null;
    _nin?: Array<string> | undefined | null;
    /** does the column NOT match the given POSIX regular expression, case insensitive */
    _niregex?: string | undefined | null;
    /** does the column NOT match the given pattern */
    _nlike?: string | undefined | null;
    /** does the column NOT match the given POSIX regular expression, case sensitive */
    _nregex?: string | undefined | null;
    /** does the column NOT match the given SQL regular expression */
    _nsimilar?: string | undefined | null;
    /** does the column match the given POSIX regular expression, case sensitive */
    _regex?: string | undefined | null;
    /** does the column match the given SQL regular expression */
    _similar?: string | undefined | null;
  };
  /** columns and relationships of "Task" */
  ['Task']: AliasType<{
    closureReason?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    hasSensitiveInfo?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    isRejected?: boolean | `@${string}`;
    isSupportEngineerIdentityHidden?: boolean | `@${string}`;
    issueCategory?: boolean | `@${string}`;
    linkedTickets?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    organizationId?: boolean | `@${string}`;
    productDocId?: boolean | `@${string}`;
    productVersion?: boolean | `@${string}`;
    requestForInformation?: boolean | `@${string}`;
    requestedByUserId?: boolean | `@${string}`;
    reviewedByUserId?: boolean | `@${string}`;
    rootChapterId?: boolean | `@${string}`;
    rootChapterVersion?: boolean | `@${string}`;
    salesForceTicketId?: boolean | `@${string}`;
    severity?: boolean | `@${string}`;
    severityUpdatedAt?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    subCategory?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    ticketRef?: boolean | `@${string}`;
    type?: boolean | `@${string}`;
    usersToNotify?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "Task" */
  ['Task_aggregate']: AliasType<{
    aggregate?: ResolverInputTypes['Task_aggregate_fields'];
    nodes?: ResolverInputTypes['Task'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "Task" */
  ['Task_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?:
          | Array<ResolverInputTypes['Task_select_column']>
          | undefined
          | null;
        distinct?: boolean | undefined | null;
      },
      boolean | `@${string}`,
    ];
    max?: ResolverInputTypes['Task_max_fields'];
    min?: ResolverInputTypes['Task_min_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "Task". All fields are combined with a logical 'AND'. */
  ['Task_bool_exp']: {
    _and?: Array<ResolverInputTypes['Task_bool_exp']> | undefined | null;
    _not?: ResolverInputTypes['Task_bool_exp'] | undefined | null;
    _or?: Array<ResolverInputTypes['Task_bool_exp']> | undefined | null;
    closureReason?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    description?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    hasSensitiveInfo?:
      | ResolverInputTypes['Boolean_comparison_exp']
      | undefined
      | null;
    id?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    isRejected?:
      | ResolverInputTypes['Boolean_comparison_exp']
      | undefined
      | null;
    isSupportEngineerIdentityHidden?:
      | ResolverInputTypes['Boolean_comparison_exp']
      | undefined
      | null;
    issueCategory?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    linkedTickets?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    name?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    organizationId?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    productDocId?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    productVersion?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    requestForInformation?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    requestedByUserId?:
      | ResolverInputTypes['uuid_comparison_exp']
      | undefined
      | null;
    reviewedByUserId?:
      | ResolverInputTypes['uuid_comparison_exp']
      | undefined
      | null;
    rootChapterId?:
      | ResolverInputTypes['uuid_comparison_exp']
      | undefined
      | null;
    rootChapterVersion?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    salesForceTicketId?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    severity?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    severityUpdatedAt?:
      | ResolverInputTypes['timestamp_comparison_exp']
      | undefined
      | null;
    status?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    subCategory?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    tenantId?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    ticketRef?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    type?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    usersToNotify?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
  };
  /** unique or primary key constraints on table "Task" */
  ['Task_constraint']: Task_constraint;
  /** input type for inserting data into table "Task" */
  ['Task_insert_input']: {
    closureReason?: string | undefined | null;
    description?: string | undefined | null;
    hasSensitiveInfo?: boolean | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    isRejected?: boolean | undefined | null;
    isSupportEngineerIdentityHidden?: boolean | undefined | null;
    issueCategory?: string | undefined | null;
    linkedTickets?: string | undefined | null;
    name?: string | undefined | null;
    organizationId?: string | undefined | null;
    productDocId?: ResolverInputTypes['uuid'] | undefined | null;
    productVersion?: string | undefined | null;
    requestForInformation?: string | undefined | null;
    requestedByUserId?: ResolverInputTypes['uuid'] | undefined | null;
    reviewedByUserId?: ResolverInputTypes['uuid'] | undefined | null;
    rootChapterId?: ResolverInputTypes['uuid'] | undefined | null;
    rootChapterVersion?: string | undefined | null;
    salesForceTicketId?: string | undefined | null;
    severity?: string | undefined | null;
    severityUpdatedAt?: ResolverInputTypes['timestamp'] | undefined | null;
    status?: string | undefined | null;
    subCategory?: string | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    ticketRef?: string | undefined | null;
    type?: string | undefined | null;
    usersToNotify?: string | undefined | null;
  };
  /** aggregate max on columns */
  ['Task_max_fields']: AliasType<{
    closureReason?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    issueCategory?: boolean | `@${string}`;
    linkedTickets?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    organizationId?: boolean | `@${string}`;
    productDocId?: boolean | `@${string}`;
    productVersion?: boolean | `@${string}`;
    requestForInformation?: boolean | `@${string}`;
    requestedByUserId?: boolean | `@${string}`;
    reviewedByUserId?: boolean | `@${string}`;
    rootChapterId?: boolean | `@${string}`;
    rootChapterVersion?: boolean | `@${string}`;
    salesForceTicketId?: boolean | `@${string}`;
    severity?: boolean | `@${string}`;
    severityUpdatedAt?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    subCategory?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    ticketRef?: boolean | `@${string}`;
    type?: boolean | `@${string}`;
    usersToNotify?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['Task_min_fields']: AliasType<{
    closureReason?: boolean | `@${string}`;
    description?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    issueCategory?: boolean | `@${string}`;
    linkedTickets?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    organizationId?: boolean | `@${string}`;
    productDocId?: boolean | `@${string}`;
    productVersion?: boolean | `@${string}`;
    requestForInformation?: boolean | `@${string}`;
    requestedByUserId?: boolean | `@${string}`;
    reviewedByUserId?: boolean | `@${string}`;
    rootChapterId?: boolean | `@${string}`;
    rootChapterVersion?: boolean | `@${string}`;
    salesForceTicketId?: boolean | `@${string}`;
    severity?: boolean | `@${string}`;
    severityUpdatedAt?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    subCategory?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    ticketRef?: boolean | `@${string}`;
    type?: boolean | `@${string}`;
    usersToNotify?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "Task" */
  ['Task_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ResolverInputTypes['Task'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "Task" */
  ['Task_on_conflict']: {
    constraint: ResolverInputTypes['Task_constraint'];
    update_columns: Array<ResolverInputTypes['Task_update_column']>;
    where?: ResolverInputTypes['Task_bool_exp'] | undefined | null;
  };
  /** Ordering options when selecting data from "Task". */
  ['Task_order_by']: {
    closureReason?: ResolverInputTypes['order_by'] | undefined | null;
    description?: ResolverInputTypes['order_by'] | undefined | null;
    hasSensitiveInfo?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    isRejected?: ResolverInputTypes['order_by'] | undefined | null;
    isSupportEngineerIdentityHidden?:
      | ResolverInputTypes['order_by']
      | undefined
      | null;
    issueCategory?: ResolverInputTypes['order_by'] | undefined | null;
    linkedTickets?: ResolverInputTypes['order_by'] | undefined | null;
    name?: ResolverInputTypes['order_by'] | undefined | null;
    organizationId?: ResolverInputTypes['order_by'] | undefined | null;
    productDocId?: ResolverInputTypes['order_by'] | undefined | null;
    productVersion?: ResolverInputTypes['order_by'] | undefined | null;
    requestForInformation?: ResolverInputTypes['order_by'] | undefined | null;
    requestedByUserId?: ResolverInputTypes['order_by'] | undefined | null;
    reviewedByUserId?: ResolverInputTypes['order_by'] | undefined | null;
    rootChapterId?: ResolverInputTypes['order_by'] | undefined | null;
    rootChapterVersion?: ResolverInputTypes['order_by'] | undefined | null;
    salesForceTicketId?: ResolverInputTypes['order_by'] | undefined | null;
    severity?: ResolverInputTypes['order_by'] | undefined | null;
    severityUpdatedAt?: ResolverInputTypes['order_by'] | undefined | null;
    status?: ResolverInputTypes['order_by'] | undefined | null;
    subCategory?: ResolverInputTypes['order_by'] | undefined | null;
    tenantId?: ResolverInputTypes['order_by'] | undefined | null;
    ticketRef?: ResolverInputTypes['order_by'] | undefined | null;
    type?: ResolverInputTypes['order_by'] | undefined | null;
    usersToNotify?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** primary key columns input for table: Task */
  ['Task_pk_columns_input']: {
    id: ResolverInputTypes['uuid'];
  };
  /** select columns of table "Task" */
  ['Task_select_column']: Task_select_column;
  /** input type for updating data in table "Task" */
  ['Task_set_input']: {
    closureReason?: string | undefined | null;
    description?: string | undefined | null;
    hasSensitiveInfo?: boolean | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    isRejected?: boolean | undefined | null;
    isSupportEngineerIdentityHidden?: boolean | undefined | null;
    issueCategory?: string | undefined | null;
    linkedTickets?: string | undefined | null;
    name?: string | undefined | null;
    organizationId?: string | undefined | null;
    productDocId?: ResolverInputTypes['uuid'] | undefined | null;
    productVersion?: string | undefined | null;
    requestForInformation?: string | undefined | null;
    requestedByUserId?: ResolverInputTypes['uuid'] | undefined | null;
    reviewedByUserId?: ResolverInputTypes['uuid'] | undefined | null;
    rootChapterId?: ResolverInputTypes['uuid'] | undefined | null;
    rootChapterVersion?: string | undefined | null;
    salesForceTicketId?: string | undefined | null;
    severity?: string | undefined | null;
    severityUpdatedAt?: ResolverInputTypes['timestamp'] | undefined | null;
    status?: string | undefined | null;
    subCategory?: string | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    ticketRef?: string | undefined | null;
    type?: string | undefined | null;
    usersToNotify?: string | undefined | null;
  };
  /** Streaming cursor of the table "Task" */
  ['Task_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ResolverInputTypes['Task_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ResolverInputTypes['cursor_ordering'] | undefined | null;
  };
  /** Initial value of the column from where the streaming should start */
  ['Task_stream_cursor_value_input']: {
    closureReason?: string | undefined | null;
    description?: string | undefined | null;
    hasSensitiveInfo?: boolean | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    isRejected?: boolean | undefined | null;
    isSupportEngineerIdentityHidden?: boolean | undefined | null;
    issueCategory?: string | undefined | null;
    linkedTickets?: string | undefined | null;
    name?: string | undefined | null;
    organizationId?: string | undefined | null;
    productDocId?: ResolverInputTypes['uuid'] | undefined | null;
    productVersion?: string | undefined | null;
    requestForInformation?: string | undefined | null;
    requestedByUserId?: ResolverInputTypes['uuid'] | undefined | null;
    reviewedByUserId?: ResolverInputTypes['uuid'] | undefined | null;
    rootChapterId?: ResolverInputTypes['uuid'] | undefined | null;
    rootChapterVersion?: string | undefined | null;
    salesForceTicketId?: string | undefined | null;
    severity?: string | undefined | null;
    severityUpdatedAt?: ResolverInputTypes['timestamp'] | undefined | null;
    status?: string | undefined | null;
    subCategory?: string | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    ticketRef?: string | undefined | null;
    type?: string | undefined | null;
    usersToNotify?: string | undefined | null;
  };
  /** update columns of table "Task" */
  ['Task_update_column']: Task_update_column;
  ['Task_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: ResolverInputTypes['Task_set_input'] | undefined | null;
    /** filter the rows which have to be updated */
    where: ResolverInputTypes['Task_bool_exp'];
  };
  /** columns and relationships of "Tenant" */
  ['Tenant']: AliasType<{
    address?: boolean | `@${string}`;
    contact?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    emailId?: boolean | `@${string}`;
    firstName?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    lastName?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    organizationId?: boolean | `@${string}`;
    packages?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['TenantPackage_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['TenantPackage_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['TenantPackage_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['TenantPackage'],
    ];
    packages_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['TenantPackage_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['TenantPackage_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['TenantPackage_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['TenantPackage_aggregate'],
    ];
    sidebarLinkId?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    tenantCustomizationId?: boolean | `@${string}`;
    totalSpaceForDoc?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    usedSpaceByDoc?: boolean | `@${string}`;
    verificationStatus?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "TenantPackage" */
  ['TenantPackage']: AliasType<{
    id?: boolean | `@${string}`;
    /** An object relationship */
    package?: ResolverInputTypes['Package'];
    packageId?: boolean | `@${string}`;
    /** An object relationship */
    tenant?: ResolverInputTypes['Tenant'];
    tenantId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "TenantPackage" */
  ['TenantPackage_aggregate']: AliasType<{
    aggregate?: ResolverInputTypes['TenantPackage_aggregate_fields'];
    nodes?: ResolverInputTypes['TenantPackage'];
    __typename?: boolean | `@${string}`;
  }>;
  ['TenantPackage_aggregate_bool_exp']: {
    count?:
      | ResolverInputTypes['TenantPackage_aggregate_bool_exp_count']
      | undefined
      | null;
  };
  ['TenantPackage_aggregate_bool_exp_count']: {
    arguments?:
      | Array<ResolverInputTypes['TenantPackage_select_column']>
      | undefined
      | null;
    distinct?: boolean | undefined | null;
    filter?: ResolverInputTypes['TenantPackage_bool_exp'] | undefined | null;
    predicate: ResolverInputTypes['Int_comparison_exp'];
  };
  /** aggregate fields of "TenantPackage" */
  ['TenantPackage_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?:
          | Array<ResolverInputTypes['TenantPackage_select_column']>
          | undefined
          | null;
        distinct?: boolean | undefined | null;
      },
      boolean | `@${string}`,
    ];
    max?: ResolverInputTypes['TenantPackage_max_fields'];
    min?: ResolverInputTypes['TenantPackage_min_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** order by aggregate values of table "TenantPackage" */
  ['TenantPackage_aggregate_order_by']: {
    count?: ResolverInputTypes['order_by'] | undefined | null;
    max?: ResolverInputTypes['TenantPackage_max_order_by'] | undefined | null;
    min?: ResolverInputTypes['TenantPackage_min_order_by'] | undefined | null;
  };
  /** input type for inserting array relation for remote table "TenantPackage" */
  ['TenantPackage_arr_rel_insert_input']: {
    data: Array<ResolverInputTypes['TenantPackage_insert_input']>;
    /** upsert condition */
    on_conflict?:
      | ResolverInputTypes['TenantPackage_on_conflict']
      | undefined
      | null;
  };
  /** Boolean expression to filter rows from the table "TenantPackage". All fields are combined with a logical 'AND'. */
  ['TenantPackage_bool_exp']: {
    _and?:
      | Array<ResolverInputTypes['TenantPackage_bool_exp']>
      | undefined
      | null;
    _not?: ResolverInputTypes['TenantPackage_bool_exp'] | undefined | null;
    _or?:
      | Array<ResolverInputTypes['TenantPackage_bool_exp']>
      | undefined
      | null;
    id?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    package?: ResolverInputTypes['Package_bool_exp'] | undefined | null;
    packageId?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    tenant?: ResolverInputTypes['Tenant_bool_exp'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
  };
  /** unique or primary key constraints on table "TenantPackage" */
  ['TenantPackage_constraint']: TenantPackage_constraint;
  /** input type for inserting data into table "TenantPackage" */
  ['TenantPackage_insert_input']: {
    id?: ResolverInputTypes['uuid'] | undefined | null;
    package?:
      | ResolverInputTypes['Package_obj_rel_insert_input']
      | undefined
      | null;
    packageId?: ResolverInputTypes['uuid'] | undefined | null;
    tenant?:
      | ResolverInputTypes['Tenant_obj_rel_insert_input']
      | undefined
      | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** aggregate max on columns */
  ['TenantPackage_max_fields']: AliasType<{
    id?: boolean | `@${string}`;
    packageId?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by max() on columns of table "TenantPackage" */
  ['TenantPackage_max_order_by']: {
    id?: ResolverInputTypes['order_by'] | undefined | null;
    packageId?: ResolverInputTypes['order_by'] | undefined | null;
    tenantId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** aggregate min on columns */
  ['TenantPackage_min_fields']: AliasType<{
    id?: boolean | `@${string}`;
    packageId?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by min() on columns of table "TenantPackage" */
  ['TenantPackage_min_order_by']: {
    id?: ResolverInputTypes['order_by'] | undefined | null;
    packageId?: ResolverInputTypes['order_by'] | undefined | null;
    tenantId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** response of any mutation on the table "TenantPackage" */
  ['TenantPackage_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ResolverInputTypes['TenantPackage'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "TenantPackage" */
  ['TenantPackage_on_conflict']: {
    constraint: ResolverInputTypes['TenantPackage_constraint'];
    update_columns: Array<ResolverInputTypes['TenantPackage_update_column']>;
    where?: ResolverInputTypes['TenantPackage_bool_exp'] | undefined | null;
  };
  /** Ordering options when selecting data from "TenantPackage". */
  ['TenantPackage_order_by']: {
    id?: ResolverInputTypes['order_by'] | undefined | null;
    package?: ResolverInputTypes['Package_order_by'] | undefined | null;
    packageId?: ResolverInputTypes['order_by'] | undefined | null;
    tenant?: ResolverInputTypes['Tenant_order_by'] | undefined | null;
    tenantId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** primary key columns input for table: TenantPackage */
  ['TenantPackage_pk_columns_input']: {
    id: ResolverInputTypes['uuid'];
  };
  /** select columns of table "TenantPackage" */
  ['TenantPackage_select_column']: TenantPackage_select_column;
  /** input type for updating data in table "TenantPackage" */
  ['TenantPackage_set_input']: {
    id?: ResolverInputTypes['uuid'] | undefined | null;
    packageId?: ResolverInputTypes['uuid'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** Streaming cursor of the table "TenantPackage" */
  ['TenantPackage_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ResolverInputTypes['TenantPackage_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ResolverInputTypes['cursor_ordering'] | undefined | null;
  };
  /** Initial value of the column from where the streaming should start */
  ['TenantPackage_stream_cursor_value_input']: {
    id?: ResolverInputTypes['uuid'] | undefined | null;
    packageId?: ResolverInputTypes['uuid'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** update columns of table "TenantPackage" */
  ['TenantPackage_update_column']: TenantPackage_update_column;
  ['TenantPackage_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: ResolverInputTypes['TenantPackage_set_input'] | undefined | null;
    /** filter the rows which have to be updated */
    where: ResolverInputTypes['TenantPackage_bool_exp'];
  };
  /** aggregated selection of "Tenant" */
  ['Tenant_aggregate']: AliasType<{
    aggregate?: ResolverInputTypes['Tenant_aggregate_fields'];
    nodes?: ResolverInputTypes['Tenant'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "Tenant" */
  ['Tenant_aggregate_fields']: AliasType<{
    avg?: ResolverInputTypes['Tenant_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ResolverInputTypes['Tenant_select_column']>
          | undefined
          | null;
        distinct?: boolean | undefined | null;
      },
      boolean | `@${string}`,
    ];
    max?: ResolverInputTypes['Tenant_max_fields'];
    min?: ResolverInputTypes['Tenant_min_fields'];
    stddev?: ResolverInputTypes['Tenant_stddev_fields'];
    stddev_pop?: ResolverInputTypes['Tenant_stddev_pop_fields'];
    stddev_samp?: ResolverInputTypes['Tenant_stddev_samp_fields'];
    sum?: ResolverInputTypes['Tenant_sum_fields'];
    var_pop?: ResolverInputTypes['Tenant_var_pop_fields'];
    var_samp?: ResolverInputTypes['Tenant_var_samp_fields'];
    variance?: ResolverInputTypes['Tenant_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate avg on columns */
  ['Tenant_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "Tenant". All fields are combined with a logical 'AND'. */
  ['Tenant_bool_exp']: {
    _and?: Array<ResolverInputTypes['Tenant_bool_exp']> | undefined | null;
    _not?: ResolverInputTypes['Tenant_bool_exp'] | undefined | null;
    _or?: Array<ResolverInputTypes['Tenant_bool_exp']> | undefined | null;
    address?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    contact?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    createdAt?:
      | ResolverInputTypes['timestamp_comparison_exp']
      | undefined
      | null;
    createdById?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint_comparison_exp'] | undefined | null;
    emailId?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    firstName?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    id?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    lastName?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    name?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    organizationId?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    packages?: ResolverInputTypes['TenantPackage_bool_exp'] | undefined | null;
    packages_aggregate?:
      | ResolverInputTypes['TenantPackage_aggregate_bool_exp']
      | undefined
      | null;
    sidebarLinkId?:
      | ResolverInputTypes['uuid_comparison_exp']
      | undefined
      | null;
    status?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    tenantCustomizationId?:
      | ResolverInputTypes['uuid_comparison_exp']
      | undefined
      | null;
    totalSpaceForDoc?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    updatedAt?:
      | ResolverInputTypes['timestamp_comparison_exp']
      | undefined
      | null;
    updatedById?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    usedSpaceByDoc?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    verificationStatus?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
  };
  /** unique or primary key constraints on table "Tenant" */
  ['Tenant_constraint']: Tenant_constraint;
  /** input type for incrementing numeric columns in table "Tenant" */
  ['Tenant_inc_input']: {
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
  };
  /** input type for inserting data into table "Tenant" */
  ['Tenant_insert_input']: {
    address?: string | undefined | null;
    contact?: string | undefined | null;
    createdAt?: ResolverInputTypes['timestamp'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    emailId?: string | undefined | null;
    firstName?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    lastName?: string | undefined | null;
    name?: string | undefined | null;
    organizationId?: string | undefined | null;
    packages?:
      | ResolverInputTypes['TenantPackage_arr_rel_insert_input']
      | undefined
      | null;
    sidebarLinkId?: ResolverInputTypes['uuid'] | undefined | null;
    status?: string | undefined | null;
    tenantCustomizationId?: ResolverInputTypes['uuid'] | undefined | null;
    totalSpaceForDoc?: string | undefined | null;
    updatedAt?: ResolverInputTypes['timestamp'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
    usedSpaceByDoc?: string | undefined | null;
    verificationStatus?: string | undefined | null;
  };
  /** aggregate max on columns */
  ['Tenant_max_fields']: AliasType<{
    address?: boolean | `@${string}`;
    contact?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    emailId?: boolean | `@${string}`;
    firstName?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    lastName?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    organizationId?: boolean | `@${string}`;
    sidebarLinkId?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    tenantCustomizationId?: boolean | `@${string}`;
    totalSpaceForDoc?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    usedSpaceByDoc?: boolean | `@${string}`;
    verificationStatus?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['Tenant_min_fields']: AliasType<{
    address?: boolean | `@${string}`;
    contact?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    emailId?: boolean | `@${string}`;
    firstName?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    lastName?: boolean | `@${string}`;
    name?: boolean | `@${string}`;
    organizationId?: boolean | `@${string}`;
    sidebarLinkId?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    tenantCustomizationId?: boolean | `@${string}`;
    totalSpaceForDoc?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    usedSpaceByDoc?: boolean | `@${string}`;
    verificationStatus?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "Tenant" */
  ['Tenant_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ResolverInputTypes['Tenant'];
    __typename?: boolean | `@${string}`;
  }>;
  /** input type for inserting object relation for remote table "Tenant" */
  ['Tenant_obj_rel_insert_input']: {
    data: ResolverInputTypes['Tenant_insert_input'];
    /** upsert condition */
    on_conflict?: ResolverInputTypes['Tenant_on_conflict'] | undefined | null;
  };
  /** on_conflict condition type for table "Tenant" */
  ['Tenant_on_conflict']: {
    constraint: ResolverInputTypes['Tenant_constraint'];
    update_columns: Array<ResolverInputTypes['Tenant_update_column']>;
    where?: ResolverInputTypes['Tenant_bool_exp'] | undefined | null;
  };
  /** Ordering options when selecting data from "Tenant". */
  ['Tenant_order_by']: {
    address?: ResolverInputTypes['order_by'] | undefined | null;
    contact?: ResolverInputTypes['order_by'] | undefined | null;
    createdAt?: ResolverInputTypes['order_by'] | undefined | null;
    createdById?: ResolverInputTypes['order_by'] | undefined | null;
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
    emailId?: ResolverInputTypes['order_by'] | undefined | null;
    firstName?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    lastName?: ResolverInputTypes['order_by'] | undefined | null;
    name?: ResolverInputTypes['order_by'] | undefined | null;
    organizationId?: ResolverInputTypes['order_by'] | undefined | null;
    packages_aggregate?:
      | ResolverInputTypes['TenantPackage_aggregate_order_by']
      | undefined
      | null;
    sidebarLinkId?: ResolverInputTypes['order_by'] | undefined | null;
    status?: ResolverInputTypes['order_by'] | undefined | null;
    tenantCustomizationId?: ResolverInputTypes['order_by'] | undefined | null;
    totalSpaceForDoc?: ResolverInputTypes['order_by'] | undefined | null;
    updatedAt?: ResolverInputTypes['order_by'] | undefined | null;
    updatedById?: ResolverInputTypes['order_by'] | undefined | null;
    usedSpaceByDoc?: ResolverInputTypes['order_by'] | undefined | null;
    verificationStatus?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** primary key columns input for table: Tenant */
  ['Tenant_pk_columns_input']: {
    id: ResolverInputTypes['uuid'];
  };
  /** select columns of table "Tenant" */
  ['Tenant_select_column']: Tenant_select_column;
  /** input type for updating data in table "Tenant" */
  ['Tenant_set_input']: {
    address?: string | undefined | null;
    contact?: string | undefined | null;
    createdAt?: ResolverInputTypes['timestamp'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    emailId?: string | undefined | null;
    firstName?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    lastName?: string | undefined | null;
    name?: string | undefined | null;
    organizationId?: string | undefined | null;
    sidebarLinkId?: ResolverInputTypes['uuid'] | undefined | null;
    status?: string | undefined | null;
    tenantCustomizationId?: ResolverInputTypes['uuid'] | undefined | null;
    totalSpaceForDoc?: string | undefined | null;
    updatedAt?: ResolverInputTypes['timestamp'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
    usedSpaceByDoc?: string | undefined | null;
    verificationStatus?: string | undefined | null;
  };
  /** aggregate stddev on columns */
  ['Tenant_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_pop on columns */
  ['Tenant_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_samp on columns */
  ['Tenant_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Streaming cursor of the table "Tenant" */
  ['Tenant_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ResolverInputTypes['Tenant_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ResolverInputTypes['cursor_ordering'] | undefined | null;
  };
  /** Initial value of the column from where the streaming should start */
  ['Tenant_stream_cursor_value_input']: {
    address?: string | undefined | null;
    contact?: string | undefined | null;
    createdAt?: ResolverInputTypes['timestamp'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    emailId?: string | undefined | null;
    firstName?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    lastName?: string | undefined | null;
    name?: string | undefined | null;
    organizationId?: string | undefined | null;
    sidebarLinkId?: ResolverInputTypes['uuid'] | undefined | null;
    status?: string | undefined | null;
    tenantCustomizationId?: ResolverInputTypes['uuid'] | undefined | null;
    totalSpaceForDoc?: string | undefined | null;
    updatedAt?: ResolverInputTypes['timestamp'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
    usedSpaceByDoc?: string | undefined | null;
    verificationStatus?: string | undefined | null;
  };
  /** aggregate sum on columns */
  ['Tenant_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** update columns of table "Tenant" */
  ['Tenant_update_column']: Tenant_update_column;
  ['Tenant_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: ResolverInputTypes['Tenant_inc_input'] | undefined | null;
    /** sets the columns of the filtered rows to the given values */
    _set?: ResolverInputTypes['Tenant_set_input'] | undefined | null;
    /** filter the rows which have to be updated */
    where: ResolverInputTypes['Tenant_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['Tenant_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate var_samp on columns */
  ['Tenant_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate variance on columns */
  ['Tenant_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "User" */
  ['User']: AliasType<{
    address?: boolean | `@${string}`;
    city?: boolean | `@${string}`;
    country?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    displayName?: boolean | `@${string}`;
    email?: boolean | `@${string}`;
    firstName?: boolean | `@${string}`;
    groups?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['UserGroup_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['UserGroup_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['UserGroup_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['UserGroup'],
    ];
    groups_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['UserGroup_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['UserGroup_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['UserGroup_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['UserGroup_aggregate'],
    ];
    id?: boolean | `@${string}`;
    isMigrated?: boolean | `@${string}`;
    isTenantAdmin?: boolean | `@${string}`;
    jobTitle?: boolean | `@${string}`;
    lastName?: boolean | `@${string}`;
    organizationId?: boolean | `@${string}`;
    postalCode?: boolean | `@${string}`;
    preferredCurrency?: boolean | `@${string}`;
    profilePictureUrl?: boolean | `@${string}`;
    role?: boolean | `@${string}`;
    roles?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['UserRole_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['UserRole_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['UserRole_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['UserRole'],
    ];
    roles_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['UserRole_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['UserRole_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['UserRole_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['UserRole_aggregate'],
    ];
    secondaryEmail?: boolean | `@${string}`;
    state?: boolean | `@${string}`;
    status?: boolean | `@${string}`;
    /** An object relationship */
    tenant?: ResolverInputTypes['Tenant'];
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    userType?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** columns and relationships of "UserGroup" */
  ['UserGroup']: AliasType<{
    /** An object relationship */
    group?: ResolverInputTypes['Group'];
    groupId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    /** An object relationship */
    user?: ResolverInputTypes['User'];
    userId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "UserGroup" */
  ['UserGroup_aggregate']: AliasType<{
    aggregate?: ResolverInputTypes['UserGroup_aggregate_fields'];
    nodes?: ResolverInputTypes['UserGroup'];
    __typename?: boolean | `@${string}`;
  }>;
  ['UserGroup_aggregate_bool_exp']: {
    count?:
      | ResolverInputTypes['UserGroup_aggregate_bool_exp_count']
      | undefined
      | null;
  };
  ['UserGroup_aggregate_bool_exp_count']: {
    arguments?:
      | Array<ResolverInputTypes['UserGroup_select_column']>
      | undefined
      | null;
    distinct?: boolean | undefined | null;
    filter?: ResolverInputTypes['UserGroup_bool_exp'] | undefined | null;
    predicate: ResolverInputTypes['Int_comparison_exp'];
  };
  /** aggregate fields of "UserGroup" */
  ['UserGroup_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?:
          | Array<ResolverInputTypes['UserGroup_select_column']>
          | undefined
          | null;
        distinct?: boolean | undefined | null;
      },
      boolean | `@${string}`,
    ];
    max?: ResolverInputTypes['UserGroup_max_fields'];
    min?: ResolverInputTypes['UserGroup_min_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** order by aggregate values of table "UserGroup" */
  ['UserGroup_aggregate_order_by']: {
    count?: ResolverInputTypes['order_by'] | undefined | null;
    max?: ResolverInputTypes['UserGroup_max_order_by'] | undefined | null;
    min?: ResolverInputTypes['UserGroup_min_order_by'] | undefined | null;
  };
  /** input type for inserting array relation for remote table "UserGroup" */
  ['UserGroup_arr_rel_insert_input']: {
    data: Array<ResolverInputTypes['UserGroup_insert_input']>;
    /** upsert condition */
    on_conflict?:
      | ResolverInputTypes['UserGroup_on_conflict']
      | undefined
      | null;
  };
  /** Boolean expression to filter rows from the table "UserGroup". All fields are combined with a logical 'AND'. */
  ['UserGroup_bool_exp']: {
    _and?: Array<ResolverInputTypes['UserGroup_bool_exp']> | undefined | null;
    _not?: ResolverInputTypes['UserGroup_bool_exp'] | undefined | null;
    _or?: Array<ResolverInputTypes['UserGroup_bool_exp']> | undefined | null;
    group?: ResolverInputTypes['Group_bool_exp'] | undefined | null;
    groupId?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    id?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    user?: ResolverInputTypes['User_bool_exp'] | undefined | null;
    userId?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
  };
  /** unique or primary key constraints on table "UserGroup" */
  ['UserGroup_constraint']: UserGroup_constraint;
  /** input type for inserting data into table "UserGroup" */
  ['UserGroup_insert_input']: {
    group?: ResolverInputTypes['Group_obj_rel_insert_input'] | undefined | null;
    groupId?: ResolverInputTypes['uuid'] | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    user?: ResolverInputTypes['User_obj_rel_insert_input'] | undefined | null;
    userId?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** aggregate max on columns */
  ['UserGroup_max_fields']: AliasType<{
    groupId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    userId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by max() on columns of table "UserGroup" */
  ['UserGroup_max_order_by']: {
    groupId?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    userId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** aggregate min on columns */
  ['UserGroup_min_fields']: AliasType<{
    groupId?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    userId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by min() on columns of table "UserGroup" */
  ['UserGroup_min_order_by']: {
    groupId?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    userId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** response of any mutation on the table "UserGroup" */
  ['UserGroup_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ResolverInputTypes['UserGroup'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "UserGroup" */
  ['UserGroup_on_conflict']: {
    constraint: ResolverInputTypes['UserGroup_constraint'];
    update_columns: Array<ResolverInputTypes['UserGroup_update_column']>;
    where?: ResolverInputTypes['UserGroup_bool_exp'] | undefined | null;
  };
  /** Ordering options when selecting data from "UserGroup". */
  ['UserGroup_order_by']: {
    group?: ResolverInputTypes['Group_order_by'] | undefined | null;
    groupId?: ResolverInputTypes['order_by'] | undefined | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    user?: ResolverInputTypes['User_order_by'] | undefined | null;
    userId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** primary key columns input for table: UserGroup */
  ['UserGroup_pk_columns_input']: {
    id: ResolverInputTypes['uuid'];
  };
  /** select columns of table "UserGroup" */
  ['UserGroup_select_column']: UserGroup_select_column;
  /** input type for updating data in table "UserGroup" */
  ['UserGroup_set_input']: {
    groupId?: ResolverInputTypes['uuid'] | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    userId?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** Streaming cursor of the table "UserGroup" */
  ['UserGroup_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ResolverInputTypes['UserGroup_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ResolverInputTypes['cursor_ordering'] | undefined | null;
  };
  /** Initial value of the column from where the streaming should start */
  ['UserGroup_stream_cursor_value_input']: {
    groupId?: ResolverInputTypes['uuid'] | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    userId?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** update columns of table "UserGroup" */
  ['UserGroup_update_column']: UserGroup_update_column;
  ['UserGroup_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: ResolverInputTypes['UserGroup_set_input'] | undefined | null;
    /** filter the rows which have to be updated */
    where: ResolverInputTypes['UserGroup_bool_exp'];
  };
  /** columns and relationships of "UserRole" */
  ['UserRole']: AliasType<{
    id?: boolean | `@${string}`;
    /** An object relationship */
    role?: ResolverInputTypes['Role'];
    roleId?: boolean | `@${string}`;
    /** An object relationship */
    user?: ResolverInputTypes['User'];
    userId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "UserRole" */
  ['UserRole_aggregate']: AliasType<{
    aggregate?: ResolverInputTypes['UserRole_aggregate_fields'];
    nodes?: ResolverInputTypes['UserRole'];
    __typename?: boolean | `@${string}`;
  }>;
  ['UserRole_aggregate_bool_exp']: {
    count?:
      | ResolverInputTypes['UserRole_aggregate_bool_exp_count']
      | undefined
      | null;
  };
  ['UserRole_aggregate_bool_exp_count']: {
    arguments?:
      | Array<ResolverInputTypes['UserRole_select_column']>
      | undefined
      | null;
    distinct?: boolean | undefined | null;
    filter?: ResolverInputTypes['UserRole_bool_exp'] | undefined | null;
    predicate: ResolverInputTypes['Int_comparison_exp'];
  };
  /** aggregate fields of "UserRole" */
  ['UserRole_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?:
          | Array<ResolverInputTypes['UserRole_select_column']>
          | undefined
          | null;
        distinct?: boolean | undefined | null;
      },
      boolean | `@${string}`,
    ];
    max?: ResolverInputTypes['UserRole_max_fields'];
    min?: ResolverInputTypes['UserRole_min_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** order by aggregate values of table "UserRole" */
  ['UserRole_aggregate_order_by']: {
    count?: ResolverInputTypes['order_by'] | undefined | null;
    max?: ResolverInputTypes['UserRole_max_order_by'] | undefined | null;
    min?: ResolverInputTypes['UserRole_min_order_by'] | undefined | null;
  };
  /** input type for inserting array relation for remote table "UserRole" */
  ['UserRole_arr_rel_insert_input']: {
    data: Array<ResolverInputTypes['UserRole_insert_input']>;
    /** upsert condition */
    on_conflict?: ResolverInputTypes['UserRole_on_conflict'] | undefined | null;
  };
  /** Boolean expression to filter rows from the table "UserRole". All fields are combined with a logical 'AND'. */
  ['UserRole_bool_exp']: {
    _and?: Array<ResolverInputTypes['UserRole_bool_exp']> | undefined | null;
    _not?: ResolverInputTypes['UserRole_bool_exp'] | undefined | null;
    _or?: Array<ResolverInputTypes['UserRole_bool_exp']> | undefined | null;
    id?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    role?: ResolverInputTypes['Role_bool_exp'] | undefined | null;
    roleId?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    user?: ResolverInputTypes['User_bool_exp'] | undefined | null;
    userId?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
  };
  /** unique or primary key constraints on table "UserRole" */
  ['UserRole_constraint']: UserRole_constraint;
  /** input type for inserting data into table "UserRole" */
  ['UserRole_insert_input']: {
    id?: ResolverInputTypes['uuid'] | undefined | null;
    role?: ResolverInputTypes['Role_obj_rel_insert_input'] | undefined | null;
    roleId?: ResolverInputTypes['uuid'] | undefined | null;
    user?: ResolverInputTypes['User_obj_rel_insert_input'] | undefined | null;
    userId?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** aggregate max on columns */
  ['UserRole_max_fields']: AliasType<{
    id?: boolean | `@${string}`;
    roleId?: boolean | `@${string}`;
    userId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by max() on columns of table "UserRole" */
  ['UserRole_max_order_by']: {
    id?: ResolverInputTypes['order_by'] | undefined | null;
    roleId?: ResolverInputTypes['order_by'] | undefined | null;
    userId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** aggregate min on columns */
  ['UserRole_min_fields']: AliasType<{
    id?: boolean | `@${string}`;
    roleId?: boolean | `@${string}`;
    userId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** order by min() on columns of table "UserRole" */
  ['UserRole_min_order_by']: {
    id?: ResolverInputTypes['order_by'] | undefined | null;
    roleId?: ResolverInputTypes['order_by'] | undefined | null;
    userId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** response of any mutation on the table "UserRole" */
  ['UserRole_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ResolverInputTypes['UserRole'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "UserRole" */
  ['UserRole_on_conflict']: {
    constraint: ResolverInputTypes['UserRole_constraint'];
    update_columns: Array<ResolverInputTypes['UserRole_update_column']>;
    where?: ResolverInputTypes['UserRole_bool_exp'] | undefined | null;
  };
  /** Ordering options when selecting data from "UserRole". */
  ['UserRole_order_by']: {
    id?: ResolverInputTypes['order_by'] | undefined | null;
    role?: ResolverInputTypes['Role_order_by'] | undefined | null;
    roleId?: ResolverInputTypes['order_by'] | undefined | null;
    user?: ResolverInputTypes['User_order_by'] | undefined | null;
    userId?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** primary key columns input for table: UserRole */
  ['UserRole_pk_columns_input']: {
    id: ResolverInputTypes['uuid'];
  };
  /** select columns of table "UserRole" */
  ['UserRole_select_column']: UserRole_select_column;
  /** input type for updating data in table "UserRole" */
  ['UserRole_set_input']: {
    id?: ResolverInputTypes['uuid'] | undefined | null;
    roleId?: ResolverInputTypes['uuid'] | undefined | null;
    userId?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** Streaming cursor of the table "UserRole" */
  ['UserRole_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ResolverInputTypes['UserRole_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ResolverInputTypes['cursor_ordering'] | undefined | null;
  };
  /** Initial value of the column from where the streaming should start */
  ['UserRole_stream_cursor_value_input']: {
    id?: ResolverInputTypes['uuid'] | undefined | null;
    roleId?: ResolverInputTypes['uuid'] | undefined | null;
    userId?: ResolverInputTypes['uuid'] | undefined | null;
  };
  /** update columns of table "UserRole" */
  ['UserRole_update_column']: UserRole_update_column;
  ['UserRole_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: ResolverInputTypes['UserRole_set_input'] | undefined | null;
    /** filter the rows which have to be updated */
    where: ResolverInputTypes['UserRole_bool_exp'];
  };
  /** columns and relationships of "UserType" */
  ['UserType']: AliasType<{
    value?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregated selection of "UserType" */
  ['UserType_aggregate']: AliasType<{
    aggregate?: ResolverInputTypes['UserType_aggregate_fields'];
    nodes?: ResolverInputTypes['UserType'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "UserType" */
  ['UserType_aggregate_fields']: AliasType<{
    count?: [
      {
        columns?:
          | Array<ResolverInputTypes['UserType_select_column']>
          | undefined
          | null;
        distinct?: boolean | undefined | null;
      },
      boolean | `@${string}`,
    ];
    max?: ResolverInputTypes['UserType_max_fields'];
    min?: ResolverInputTypes['UserType_min_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "UserType". All fields are combined with a logical 'AND'. */
  ['UserType_bool_exp']: {
    _and?: Array<ResolverInputTypes['UserType_bool_exp']> | undefined | null;
    _not?: ResolverInputTypes['UserType_bool_exp'] | undefined | null;
    _or?: Array<ResolverInputTypes['UserType_bool_exp']> | undefined | null;
    value?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
  };
  /** unique or primary key constraints on table "UserType" */
  ['UserType_constraint']: UserType_constraint;
  ['UserType_enum']: UserType_enum;
  /** Boolean expression to compare columns of type "UserType_enum". All fields are combined with logical 'AND'. */
  ['UserType_enum_comparison_exp']: {
    _eq?: ResolverInputTypes['UserType_enum'] | undefined | null;
    _in?: Array<ResolverInputTypes['UserType_enum']> | undefined | null;
    _is_null?: boolean | undefined | null;
    _neq?: ResolverInputTypes['UserType_enum'] | undefined | null;
    _nin?: Array<ResolverInputTypes['UserType_enum']> | undefined | null;
  };
  /** input type for inserting data into table "UserType" */
  ['UserType_insert_input']: {
    value?: string | undefined | null;
  };
  /** aggregate max on columns */
  ['UserType_max_fields']: AliasType<{
    value?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['UserType_min_fields']: AliasType<{
    value?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "UserType" */
  ['UserType_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ResolverInputTypes['UserType'];
    __typename?: boolean | `@${string}`;
  }>;
  /** on_conflict condition type for table "UserType" */
  ['UserType_on_conflict']: {
    constraint: ResolverInputTypes['UserType_constraint'];
    update_columns: Array<ResolverInputTypes['UserType_update_column']>;
    where?: ResolverInputTypes['UserType_bool_exp'] | undefined | null;
  };
  /** Ordering options when selecting data from "UserType". */
  ['UserType_order_by']: {
    value?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** primary key columns input for table: UserType */
  ['UserType_pk_columns_input']: {
    value: string;
  };
  /** select columns of table "UserType" */
  ['UserType_select_column']: UserType_select_column;
  /** input type for updating data in table "UserType" */
  ['UserType_set_input']: {
    value?: string | undefined | null;
  };
  /** Streaming cursor of the table "UserType" */
  ['UserType_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ResolverInputTypes['UserType_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ResolverInputTypes['cursor_ordering'] | undefined | null;
  };
  /** Initial value of the column from where the streaming should start */
  ['UserType_stream_cursor_value_input']: {
    value?: string | undefined | null;
  };
  /** update columns of table "UserType" */
  ['UserType_update_column']: UserType_update_column;
  ['UserType_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: ResolverInputTypes['UserType_set_input'] | undefined | null;
    /** filter the rows which have to be updated */
    where: ResolverInputTypes['UserType_bool_exp'];
  };
  /** aggregated selection of "User" */
  ['User_aggregate']: AliasType<{
    aggregate?: ResolverInputTypes['User_aggregate_fields'];
    nodes?: ResolverInputTypes['User'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate fields of "User" */
  ['User_aggregate_fields']: AliasType<{
    avg?: ResolverInputTypes['User_avg_fields'];
    count?: [
      {
        columns?:
          | Array<ResolverInputTypes['User_select_column']>
          | undefined
          | null;
        distinct?: boolean | undefined | null;
      },
      boolean | `@${string}`,
    ];
    max?: ResolverInputTypes['User_max_fields'];
    min?: ResolverInputTypes['User_min_fields'];
    stddev?: ResolverInputTypes['User_stddev_fields'];
    stddev_pop?: ResolverInputTypes['User_stddev_pop_fields'];
    stddev_samp?: ResolverInputTypes['User_stddev_samp_fields'];
    sum?: ResolverInputTypes['User_sum_fields'];
    var_pop?: ResolverInputTypes['User_var_pop_fields'];
    var_samp?: ResolverInputTypes['User_var_samp_fields'];
    variance?: ResolverInputTypes['User_variance_fields'];
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate avg on columns */
  ['User_avg_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Boolean expression to filter rows from the table "User". All fields are combined with a logical 'AND'. */
  ['User_bool_exp']: {
    _and?: Array<ResolverInputTypes['User_bool_exp']> | undefined | null;
    _not?: ResolverInputTypes['User_bool_exp'] | undefined | null;
    _or?: Array<ResolverInputTypes['User_bool_exp']> | undefined | null;
    address?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    city?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    country?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    createdAt?:
      | ResolverInputTypes['timestamp_comparison_exp']
      | undefined
      | null;
    createdById?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint_comparison_exp'] | undefined | null;
    displayName?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    email?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    firstName?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    groups?: ResolverInputTypes['UserGroup_bool_exp'] | undefined | null;
    groups_aggregate?:
      | ResolverInputTypes['UserGroup_aggregate_bool_exp']
      | undefined
      | null;
    id?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    isMigrated?:
      | ResolverInputTypes['Boolean_comparison_exp']
      | undefined
      | null;
    isTenantAdmin?:
      | ResolverInputTypes['Boolean_comparison_exp']
      | undefined
      | null;
    jobTitle?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    lastName?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    organizationId?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    postalCode?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    preferredCurrency?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    profilePictureUrl?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    role?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    roles?: ResolverInputTypes['UserRole_bool_exp'] | undefined | null;
    roles_aggregate?:
      | ResolverInputTypes['UserRole_aggregate_bool_exp']
      | undefined
      | null;
    secondaryEmail?:
      | ResolverInputTypes['String_comparison_exp']
      | undefined
      | null;
    state?: ResolverInputTypes['String_comparison_exp'] | undefined | null;
    status?:
      | ResolverInputTypes['Status_enum_comparison_exp']
      | undefined
      | null;
    tenant?: ResolverInputTypes['Tenant_bool_exp'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    updatedAt?:
      | ResolverInputTypes['timestamp_comparison_exp']
      | undefined
      | null;
    updatedById?: ResolverInputTypes['uuid_comparison_exp'] | undefined | null;
    userType?:
      | ResolverInputTypes['UserType_enum_comparison_exp']
      | undefined
      | null;
  };
  /** unique or primary key constraints on table "User" */
  ['User_constraint']: User_constraint;
  /** input type for incrementing numeric columns in table "User" */
  ['User_inc_input']: {
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
  };
  /** input type for inserting data into table "User" */
  ['User_insert_input']: {
    address?: string | undefined | null;
    city?: string | undefined | null;
    country?: string | undefined | null;
    createdAt?: ResolverInputTypes['timestamp'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    displayName?: string | undefined | null;
    email?: string | undefined | null;
    firstName?: string | undefined | null;
    groups?:
      | ResolverInputTypes['UserGroup_arr_rel_insert_input']
      | undefined
      | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    isMigrated?: boolean | undefined | null;
    isTenantAdmin?: boolean | undefined | null;
    jobTitle?: string | undefined | null;
    lastName?: string | undefined | null;
    organizationId?: string | undefined | null;
    postalCode?: string | undefined | null;
    preferredCurrency?: string | undefined | null;
    profilePictureUrl?: string | undefined | null;
    role?: string | undefined | null;
    roles?:
      | ResolverInputTypes['UserRole_arr_rel_insert_input']
      | undefined
      | null;
    secondaryEmail?: string | undefined | null;
    state?: string | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenant?:
      | ResolverInputTypes['Tenant_obj_rel_insert_input']
      | undefined
      | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamp'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
    userType?: ResolverInputTypes['UserType_enum'] | undefined | null;
  };
  /** aggregate max on columns */
  ['User_max_fields']: AliasType<{
    address?: boolean | `@${string}`;
    city?: boolean | `@${string}`;
    country?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    displayName?: boolean | `@${string}`;
    email?: boolean | `@${string}`;
    firstName?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    jobTitle?: boolean | `@${string}`;
    lastName?: boolean | `@${string}`;
    organizationId?: boolean | `@${string}`;
    postalCode?: boolean | `@${string}`;
    preferredCurrency?: boolean | `@${string}`;
    profilePictureUrl?: boolean | `@${string}`;
    role?: boolean | `@${string}`;
    secondaryEmail?: boolean | `@${string}`;
    state?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate min on columns */
  ['User_min_fields']: AliasType<{
    address?: boolean | `@${string}`;
    city?: boolean | `@${string}`;
    country?: boolean | `@${string}`;
    createdAt?: boolean | `@${string}`;
    createdById?: boolean | `@${string}`;
    cursorId?: boolean | `@${string}`;
    displayName?: boolean | `@${string}`;
    email?: boolean | `@${string}`;
    firstName?: boolean | `@${string}`;
    id?: boolean | `@${string}`;
    jobTitle?: boolean | `@${string}`;
    lastName?: boolean | `@${string}`;
    organizationId?: boolean | `@${string}`;
    postalCode?: boolean | `@${string}`;
    preferredCurrency?: boolean | `@${string}`;
    profilePictureUrl?: boolean | `@${string}`;
    role?: boolean | `@${string}`;
    secondaryEmail?: boolean | `@${string}`;
    state?: boolean | `@${string}`;
    tenantId?: boolean | `@${string}`;
    updatedAt?: boolean | `@${string}`;
    updatedById?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** response of any mutation on the table "User" */
  ['User_mutation_response']: AliasType<{
    /** number of rows affected by the mutation */
    affected_rows?: boolean | `@${string}`;
    /** data from the rows affected by the mutation */
    returning?: ResolverInputTypes['User'];
    __typename?: boolean | `@${string}`;
  }>;
  /** input type for inserting object relation for remote table "User" */
  ['User_obj_rel_insert_input']: {
    data: ResolverInputTypes['User_insert_input'];
    /** upsert condition */
    on_conflict?: ResolverInputTypes['User_on_conflict'] | undefined | null;
  };
  /** on_conflict condition type for table "User" */
  ['User_on_conflict']: {
    constraint: ResolverInputTypes['User_constraint'];
    update_columns: Array<ResolverInputTypes['User_update_column']>;
    where?: ResolverInputTypes['User_bool_exp'] | undefined | null;
  };
  /** Ordering options when selecting data from "User". */
  ['User_order_by']: {
    address?: ResolverInputTypes['order_by'] | undefined | null;
    city?: ResolverInputTypes['order_by'] | undefined | null;
    country?: ResolverInputTypes['order_by'] | undefined | null;
    createdAt?: ResolverInputTypes['order_by'] | undefined | null;
    createdById?: ResolverInputTypes['order_by'] | undefined | null;
    cursorId?: ResolverInputTypes['order_by'] | undefined | null;
    displayName?: ResolverInputTypes['order_by'] | undefined | null;
    email?: ResolverInputTypes['order_by'] | undefined | null;
    firstName?: ResolverInputTypes['order_by'] | undefined | null;
    groups_aggregate?:
      | ResolverInputTypes['UserGroup_aggregate_order_by']
      | undefined
      | null;
    id?: ResolverInputTypes['order_by'] | undefined | null;
    isMigrated?: ResolverInputTypes['order_by'] | undefined | null;
    isTenantAdmin?: ResolverInputTypes['order_by'] | undefined | null;
    jobTitle?: ResolverInputTypes['order_by'] | undefined | null;
    lastName?: ResolverInputTypes['order_by'] | undefined | null;
    organizationId?: ResolverInputTypes['order_by'] | undefined | null;
    postalCode?: ResolverInputTypes['order_by'] | undefined | null;
    preferredCurrency?: ResolverInputTypes['order_by'] | undefined | null;
    profilePictureUrl?: ResolverInputTypes['order_by'] | undefined | null;
    role?: ResolverInputTypes['order_by'] | undefined | null;
    roles_aggregate?:
      | ResolverInputTypes['UserRole_aggregate_order_by']
      | undefined
      | null;
    secondaryEmail?: ResolverInputTypes['order_by'] | undefined | null;
    state?: ResolverInputTypes['order_by'] | undefined | null;
    status?: ResolverInputTypes['order_by'] | undefined | null;
    tenant?: ResolverInputTypes['Tenant_order_by'] | undefined | null;
    tenantId?: ResolverInputTypes['order_by'] | undefined | null;
    updatedAt?: ResolverInputTypes['order_by'] | undefined | null;
    updatedById?: ResolverInputTypes['order_by'] | undefined | null;
    userType?: ResolverInputTypes['order_by'] | undefined | null;
  };
  /** primary key columns input for table: User */
  ['User_pk_columns_input']: {
    id: ResolverInputTypes['uuid'];
  };
  /** select columns of table "User" */
  ['User_select_column']: User_select_column;
  /** input type for updating data in table "User" */
  ['User_set_input']: {
    address?: string | undefined | null;
    city?: string | undefined | null;
    country?: string | undefined | null;
    createdAt?: ResolverInputTypes['timestamp'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    displayName?: string | undefined | null;
    email?: string | undefined | null;
    firstName?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    isMigrated?: boolean | undefined | null;
    isTenantAdmin?: boolean | undefined | null;
    jobTitle?: string | undefined | null;
    lastName?: string | undefined | null;
    organizationId?: string | undefined | null;
    postalCode?: string | undefined | null;
    preferredCurrency?: string | undefined | null;
    profilePictureUrl?: string | undefined | null;
    role?: string | undefined | null;
    secondaryEmail?: string | undefined | null;
    state?: string | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamp'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
    userType?: ResolverInputTypes['UserType_enum'] | undefined | null;
  };
  /** aggregate stddev on columns */
  ['User_stddev_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_pop on columns */
  ['User_stddev_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate stddev_samp on columns */
  ['User_stddev_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** Streaming cursor of the table "User" */
  ['User_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ResolverInputTypes['User_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ResolverInputTypes['cursor_ordering'] | undefined | null;
  };
  /** Initial value of the column from where the streaming should start */
  ['User_stream_cursor_value_input']: {
    address?: string | undefined | null;
    city?: string | undefined | null;
    country?: string | undefined | null;
    createdAt?: ResolverInputTypes['timestamp'] | undefined | null;
    createdById?: ResolverInputTypes['uuid'] | undefined | null;
    cursorId?: ResolverInputTypes['bigint'] | undefined | null;
    displayName?: string | undefined | null;
    email?: string | undefined | null;
    firstName?: string | undefined | null;
    id?: ResolverInputTypes['uuid'] | undefined | null;
    isMigrated?: boolean | undefined | null;
    isTenantAdmin?: boolean | undefined | null;
    jobTitle?: string | undefined | null;
    lastName?: string | undefined | null;
    organizationId?: string | undefined | null;
    postalCode?: string | undefined | null;
    preferredCurrency?: string | undefined | null;
    profilePictureUrl?: string | undefined | null;
    role?: string | undefined | null;
    secondaryEmail?: string | undefined | null;
    state?: string | undefined | null;
    status?: ResolverInputTypes['Status_enum'] | undefined | null;
    tenantId?: ResolverInputTypes['uuid'] | undefined | null;
    updatedAt?: ResolverInputTypes['timestamp'] | undefined | null;
    updatedById?: ResolverInputTypes['uuid'] | undefined | null;
    userType?: ResolverInputTypes['UserType_enum'] | undefined | null;
  };
  /** aggregate sum on columns */
  ['User_sum_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** update columns of table "User" */
  ['User_update_column']: User_update_column;
  ['User_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: ResolverInputTypes['User_inc_input'] | undefined | null;
    /** sets the columns of the filtered rows to the given values */
    _set?: ResolverInputTypes['User_set_input'] | undefined | null;
    /** filter the rows which have to be updated */
    where: ResolverInputTypes['User_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['User_var_pop_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate var_samp on columns */
  ['User_var_samp_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  /** aggregate variance on columns */
  ['User_variance_fields']: AliasType<{
    cursorId?: boolean | `@${string}`;
    __typename?: boolean | `@${string}`;
  }>;
  ['bigint']: unknown;
  /** Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'. */
  ['bigint_comparison_exp']: {
    _eq?: ResolverInputTypes['bigint'] | undefined | null;
    _gt?: ResolverInputTypes['bigint'] | undefined | null;
    _gte?: ResolverInputTypes['bigint'] | undefined | null;
    _in?: Array<ResolverInputTypes['bigint']> | undefined | null;
    _is_null?: boolean | undefined | null;
    _lt?: ResolverInputTypes['bigint'] | undefined | null;
    _lte?: ResolverInputTypes['bigint'] | undefined | null;
    _neq?: ResolverInputTypes['bigint'] | undefined | null;
    _nin?: Array<ResolverInputTypes['bigint']> | undefined | null;
  };
  /** ordering argument of a cursor */
  ['cursor_ordering']: cursor_ordering;
  /** mutation root */
  ['mutation_root']: AliasType<{
    delete_Application?: [
      {
        /** filter the rows which have to be deleted */
        where: ResolverInputTypes['Application_bool_exp'];
      },
      ResolverInputTypes['Application_mutation_response'],
    ];
    delete_ApplicationIntegration?: [
      {
        /** filter the rows which have to be deleted */
        where: ResolverInputTypes['ApplicationIntegration_bool_exp'];
      },
      ResolverInputTypes['ApplicationIntegration_mutation_response'],
    ];
    delete_ApplicationIntegration_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['ApplicationIntegration'],
    ];
    delete_Application_by_pk?: [
      { id: string },
      ResolverInputTypes['Application'],
    ];
    delete_CaseSeverity?: [
      {
        /** filter the rows which have to be deleted */
        where: ResolverInputTypes['CaseSeverity_bool_exp'];
      },
      ResolverInputTypes['CaseSeverity_mutation_response'],
    ];
    delete_CaseSeverity_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['CaseSeverity'],
    ];
    delete_ClosureReason?: [
      {
        /** filter the rows which have to be deleted */
        where: ResolverInputTypes['ClosureReason_bool_exp'];
      },
      ResolverInputTypes['ClosureReason_mutation_response'],
    ];
    delete_ClosureReason_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['ClosureReason'],
    ];
    delete_Currency?: [
      {
        /** filter the rows which have to be deleted */
        where: ResolverInputTypes['Currency_bool_exp'];
      },
      ResolverInputTypes['Currency_mutation_response'],
    ];
    delete_Currency_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['Currency'],
    ];
    delete_CustomRole?: [
      {
        /** filter the rows which have to be deleted */
        where: ResolverInputTypes['CustomRole_bool_exp'];
      },
      ResolverInputTypes['CustomRole_mutation_response'],
    ];
    delete_CustomRole_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['CustomRole'],
    ];
    delete_Group?: [
      {
        /** filter the rows which have to be deleted */
        where: ResolverInputTypes['Group_bool_exp'];
      },
      ResolverInputTypes['Group_mutation_response'],
    ];
    delete_GroupRole?: [
      {
        /** filter the rows which have to be deleted */
        where: ResolverInputTypes['GroupRole_bool_exp'];
      },
      ResolverInputTypes['GroupRole_mutation_response'],
    ];
    delete_GroupRole_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['GroupRole'],
    ];
    delete_Group_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['Group'],
    ];
    delete_Industry?: [
      {
        /** filter the rows which have to be deleted */
        where: ResolverInputTypes['Industry_bool_exp'];
      },
      ResolverInputTypes['Industry_mutation_response'],
    ];
    delete_Industry_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['Industry'],
    ];
    delete_IssueCategory?: [
      {
        /** filter the rows which have to be deleted */
        where: ResolverInputTypes['IssueCategory_bool_exp'];
      },
      ResolverInputTypes['IssueCategory_mutation_response'],
    ];
    delete_IssueCategory_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['IssueCategory'],
    ];
    delete_Object?: [
      {
        /** filter the rows which have to be deleted */
        where: ResolverInputTypes['Object_bool_exp'];
      },
      ResolverInputTypes['Object_mutation_response'],
    ];
    delete_Object_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['Object'],
    ];
    delete_Organization?: [
      {
        /** filter the rows which have to be deleted */
        where: ResolverInputTypes['Organization_bool_exp'];
      },
      ResolverInputTypes['Organization_mutation_response'],
    ];
    delete_Organization_by_pk?: [
      { id: string },
      ResolverInputTypes['Organization'],
    ];
    delete_Package?: [
      {
        /** filter the rows which have to be deleted */
        where: ResolverInputTypes['Package_bool_exp'];
      },
      ResolverInputTypes['Package_mutation_response'],
    ];
    delete_PackageApplication?: [
      {
        /** filter the rows which have to be deleted */
        where: ResolverInputTypes['PackageApplication_bool_exp'];
      },
      ResolverInputTypes['PackageApplication_mutation_response'],
    ];
    delete_PackageApplication_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['PackageApplication'],
    ];
    delete_Package_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['Package'],
    ];
    delete_Product?: [
      {
        /** filter the rows which have to be deleted */
        where: ResolverInputTypes['Product_bool_exp'];
      },
      ResolverInputTypes['Product_mutation_response'],
    ];
    delete_ProductCategory?: [
      {
        /** filter the rows which have to be deleted */
        where: ResolverInputTypes['ProductCategory_bool_exp'];
      },
      ResolverInputTypes['ProductCategory_mutation_response'],
    ];
    delete_ProductCategory_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['ProductCategory'],
    ];
    delete_ProductVersion?: [
      {
        /** filter the rows which have to be deleted */
        where: ResolverInputTypes['ProductVersion_bool_exp'];
      },
      ResolverInputTypes['ProductVersion_mutation_response'],
    ];
    delete_ProductVersion_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['ProductVersion'],
    ];
    delete_Product_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['Product'],
    ];
    delete_Role?: [
      {
        /** filter the rows which have to be deleted */
        where: ResolverInputTypes['Role_bool_exp'];
      },
      ResolverInputTypes['Role_mutation_response'],
    ];
    delete_Role_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['Role'],
    ];
    delete_Status?: [
      {
        /** filter the rows which have to be deleted */
        where: ResolverInputTypes['Status_bool_exp'];
      },
      ResolverInputTypes['Status_mutation_response'],
    ];
    delete_Status_by_pk?: [{ value: string }, ResolverInputTypes['Status']];
    delete_Task?: [
      {
        /** filter the rows which have to be deleted */
        where: ResolverInputTypes['Task_bool_exp'];
      },
      ResolverInputTypes['Task_mutation_response'],
    ];
    delete_Task_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['Task'],
    ];
    delete_Tenant?: [
      {
        /** filter the rows which have to be deleted */
        where: ResolverInputTypes['Tenant_bool_exp'];
      },
      ResolverInputTypes['Tenant_mutation_response'],
    ];
    delete_TenantPackage?: [
      {
        /** filter the rows which have to be deleted */
        where: ResolverInputTypes['TenantPackage_bool_exp'];
      },
      ResolverInputTypes['TenantPackage_mutation_response'],
    ];
    delete_TenantPackage_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['TenantPackage'],
    ];
    delete_Tenant_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['Tenant'],
    ];
    delete_User?: [
      {
        /** filter the rows which have to be deleted */
        where: ResolverInputTypes['User_bool_exp'];
      },
      ResolverInputTypes['User_mutation_response'],
    ];
    delete_UserGroup?: [
      {
        /** filter the rows which have to be deleted */
        where: ResolverInputTypes['UserGroup_bool_exp'];
      },
      ResolverInputTypes['UserGroup_mutation_response'],
    ];
    delete_UserGroup_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['UserGroup'],
    ];
    delete_UserRole?: [
      {
        /** filter the rows which have to be deleted */
        where: ResolverInputTypes['UserRole_bool_exp'];
      },
      ResolverInputTypes['UserRole_mutation_response'],
    ];
    delete_UserRole_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['UserRole'],
    ];
    delete_UserType?: [
      {
        /** filter the rows which have to be deleted */
        where: ResolverInputTypes['UserType_bool_exp'];
      },
      ResolverInputTypes['UserType_mutation_response'],
    ];
    delete_UserType_by_pk?: [{ value: string }, ResolverInputTypes['UserType']];
    delete_User_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['User'],
    ];
    insert_Application?: [
      {
        /** the rows to be inserted */
        objects: Array<
          ResolverInputTypes['Application_insert_input']
        > /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['Application_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['Application_mutation_response'],
    ];
    insert_ApplicationIntegration?: [
      {
        /** the rows to be inserted */
        objects: Array<
          ResolverInputTypes['ApplicationIntegration_insert_input']
        > /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['ApplicationIntegration_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['ApplicationIntegration_mutation_response'],
    ];
    insert_ApplicationIntegration_one?: [
      {
        /** the row to be inserted */
        object: ResolverInputTypes['ApplicationIntegration_insert_input'] /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['ApplicationIntegration_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['ApplicationIntegration'],
    ];
    insert_Application_one?: [
      {
        /** the row to be inserted */
        object: ResolverInputTypes['Application_insert_input'] /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['Application_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['Application'],
    ];
    insert_CaseSeverity?: [
      {
        /** the rows to be inserted */
        objects: Array<
          ResolverInputTypes['CaseSeverity_insert_input']
        > /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['CaseSeverity_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['CaseSeverity_mutation_response'],
    ];
    insert_CaseSeverity_one?: [
      {
        /** the row to be inserted */
        object: ResolverInputTypes['CaseSeverity_insert_input'] /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['CaseSeverity_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['CaseSeverity'],
    ];
    insert_ClosureReason?: [
      {
        /** the rows to be inserted */
        objects: Array<
          ResolverInputTypes['ClosureReason_insert_input']
        > /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['ClosureReason_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['ClosureReason_mutation_response'],
    ];
    insert_ClosureReason_one?: [
      {
        /** the row to be inserted */
        object: ResolverInputTypes['ClosureReason_insert_input'] /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['ClosureReason_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['ClosureReason'],
    ];
    insert_Currency?: [
      {
        /** the rows to be inserted */
        objects: Array<
          ResolverInputTypes['Currency_insert_input']
        > /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['Currency_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['Currency_mutation_response'],
    ];
    insert_Currency_one?: [
      {
        /** the row to be inserted */
        object: ResolverInputTypes['Currency_insert_input'] /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['Currency_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['Currency'],
    ];
    insert_CustomRole?: [
      {
        /** the rows to be inserted */
        objects: Array<
          ResolverInputTypes['CustomRole_insert_input']
        > /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['CustomRole_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['CustomRole_mutation_response'],
    ];
    insert_CustomRole_one?: [
      {
        /** the row to be inserted */
        object: ResolverInputTypes['CustomRole_insert_input'] /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['CustomRole_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['CustomRole'],
    ];
    insert_Group?: [
      {
        /** the rows to be inserted */
        objects: Array<
          ResolverInputTypes['Group_insert_input']
        > /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['Group_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['Group_mutation_response'],
    ];
    insert_GroupRole?: [
      {
        /** the rows to be inserted */
        objects: Array<
          ResolverInputTypes['GroupRole_insert_input']
        > /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['GroupRole_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['GroupRole_mutation_response'],
    ];
    insert_GroupRole_one?: [
      {
        /** the row to be inserted */
        object: ResolverInputTypes['GroupRole_insert_input'] /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['GroupRole_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['GroupRole'],
    ];
    insert_Group_one?: [
      {
        /** the row to be inserted */
        object: ResolverInputTypes['Group_insert_input'] /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['Group_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['Group'],
    ];
    insert_Industry?: [
      {
        /** the rows to be inserted */
        objects: Array<
          ResolverInputTypes['Industry_insert_input']
        > /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['Industry_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['Industry_mutation_response'],
    ];
    insert_Industry_one?: [
      {
        /** the row to be inserted */
        object: ResolverInputTypes['Industry_insert_input'] /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['Industry_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['Industry'],
    ];
    insert_IssueCategory?: [
      {
        /** the rows to be inserted */
        objects: Array<
          ResolverInputTypes['IssueCategory_insert_input']
        > /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['IssueCategory_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['IssueCategory_mutation_response'],
    ];
    insert_IssueCategory_one?: [
      {
        /** the row to be inserted */
        object: ResolverInputTypes['IssueCategory_insert_input'] /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['IssueCategory_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['IssueCategory'],
    ];
    insert_Object?: [
      {
        /** the rows to be inserted */
        objects: Array<
          ResolverInputTypes['Object_insert_input']
        > /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['Object_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['Object_mutation_response'],
    ];
    insert_Object_one?: [
      {
        /** the row to be inserted */
        object: ResolverInputTypes['Object_insert_input'] /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['Object_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['Object'],
    ];
    insert_Organization?: [
      {
        /** the rows to be inserted */
        objects: Array<
          ResolverInputTypes['Organization_insert_input']
        > /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['Organization_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['Organization_mutation_response'],
    ];
    insert_Organization_one?: [
      {
        /** the row to be inserted */
        object: ResolverInputTypes['Organization_insert_input'] /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['Organization_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['Organization'],
    ];
    insert_Package?: [
      {
        /** the rows to be inserted */
        objects: Array<
          ResolverInputTypes['Package_insert_input']
        > /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['Package_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['Package_mutation_response'],
    ];
    insert_PackageApplication?: [
      {
        /** the rows to be inserted */
        objects: Array<
          ResolverInputTypes['PackageApplication_insert_input']
        > /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['PackageApplication_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['PackageApplication_mutation_response'],
    ];
    insert_PackageApplication_one?: [
      {
        /** the row to be inserted */
        object: ResolverInputTypes['PackageApplication_insert_input'] /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['PackageApplication_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['PackageApplication'],
    ];
    insert_Package_one?: [
      {
        /** the row to be inserted */
        object: ResolverInputTypes['Package_insert_input'] /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['Package_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['Package'],
    ];
    insert_Product?: [
      {
        /** the rows to be inserted */
        objects: Array<
          ResolverInputTypes['Product_insert_input']
        > /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['Product_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['Product_mutation_response'],
    ];
    insert_ProductCategory?: [
      {
        /** the rows to be inserted */
        objects: Array<
          ResolverInputTypes['ProductCategory_insert_input']
        > /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['ProductCategory_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['ProductCategory_mutation_response'],
    ];
    insert_ProductCategory_one?: [
      {
        /** the row to be inserted */
        object: ResolverInputTypes['ProductCategory_insert_input'] /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['ProductCategory_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['ProductCategory'],
    ];
    insert_ProductVersion?: [
      {
        /** the rows to be inserted */
        objects: Array<
          ResolverInputTypes['ProductVersion_insert_input']
        > /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['ProductVersion_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['ProductVersion_mutation_response'],
    ];
    insert_ProductVersion_one?: [
      {
        /** the row to be inserted */
        object: ResolverInputTypes['ProductVersion_insert_input'] /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['ProductVersion_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['ProductVersion'],
    ];
    insert_Product_one?: [
      {
        /** the row to be inserted */
        object: ResolverInputTypes['Product_insert_input'] /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['Product_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['Product'],
    ];
    insert_Role?: [
      {
        /** the rows to be inserted */
        objects: Array<
          ResolverInputTypes['Role_insert_input']
        > /** upsert condition */;
        on_conflict?: ResolverInputTypes['Role_on_conflict'] | undefined | null;
      },
      ResolverInputTypes['Role_mutation_response'],
    ];
    insert_Role_one?: [
      {
        /** the row to be inserted */
        object: ResolverInputTypes['Role_insert_input'] /** upsert condition */;
        on_conflict?: ResolverInputTypes['Role_on_conflict'] | undefined | null;
      },
      ResolverInputTypes['Role'],
    ];
    insert_Status?: [
      {
        /** the rows to be inserted */
        objects: Array<
          ResolverInputTypes['Status_insert_input']
        > /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['Status_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['Status_mutation_response'],
    ];
    insert_Status_one?: [
      {
        /** the row to be inserted */
        object: ResolverInputTypes['Status_insert_input'] /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['Status_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['Status'],
    ];
    insert_Task?: [
      {
        /** the rows to be inserted */
        objects: Array<
          ResolverInputTypes['Task_insert_input']
        > /** upsert condition */;
        on_conflict?: ResolverInputTypes['Task_on_conflict'] | undefined | null;
      },
      ResolverInputTypes['Task_mutation_response'],
    ];
    insert_Task_one?: [
      {
        /** the row to be inserted */
        object: ResolverInputTypes['Task_insert_input'] /** upsert condition */;
        on_conflict?: ResolverInputTypes['Task_on_conflict'] | undefined | null;
      },
      ResolverInputTypes['Task'],
    ];
    insert_Tenant?: [
      {
        /** the rows to be inserted */
        objects: Array<
          ResolverInputTypes['Tenant_insert_input']
        > /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['Tenant_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['Tenant_mutation_response'],
    ];
    insert_TenantPackage?: [
      {
        /** the rows to be inserted */
        objects: Array<
          ResolverInputTypes['TenantPackage_insert_input']
        > /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['TenantPackage_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['TenantPackage_mutation_response'],
    ];
    insert_TenantPackage_one?: [
      {
        /** the row to be inserted */
        object: ResolverInputTypes['TenantPackage_insert_input'] /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['TenantPackage_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['TenantPackage'],
    ];
    insert_Tenant_one?: [
      {
        /** the row to be inserted */
        object: ResolverInputTypes['Tenant_insert_input'] /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['Tenant_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['Tenant'],
    ];
    insert_User?: [
      {
        /** the rows to be inserted */
        objects: Array<
          ResolverInputTypes['User_insert_input']
        > /** upsert condition */;
        on_conflict?: ResolverInputTypes['User_on_conflict'] | undefined | null;
      },
      ResolverInputTypes['User_mutation_response'],
    ];
    insert_UserGroup?: [
      {
        /** the rows to be inserted */
        objects: Array<
          ResolverInputTypes['UserGroup_insert_input']
        > /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['UserGroup_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['UserGroup_mutation_response'],
    ];
    insert_UserGroup_one?: [
      {
        /** the row to be inserted */
        object: ResolverInputTypes['UserGroup_insert_input'] /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['UserGroup_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['UserGroup'],
    ];
    insert_UserRole?: [
      {
        /** the rows to be inserted */
        objects: Array<
          ResolverInputTypes['UserRole_insert_input']
        > /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['UserRole_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['UserRole_mutation_response'],
    ];
    insert_UserRole_one?: [
      {
        /** the row to be inserted */
        object: ResolverInputTypes['UserRole_insert_input'] /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['UserRole_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['UserRole'],
    ];
    insert_UserType?: [
      {
        /** the rows to be inserted */
        objects: Array<
          ResolverInputTypes['UserType_insert_input']
        > /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['UserType_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['UserType_mutation_response'],
    ];
    insert_UserType_one?: [
      {
        /** the row to be inserted */
        object: ResolverInputTypes['UserType_insert_input'] /** upsert condition */;
        on_conflict?:
          | ResolverInputTypes['UserType_on_conflict']
          | undefined
          | null;
      },
      ResolverInputTypes['UserType'],
    ];
    insert_User_one?: [
      {
        /** the row to be inserted */
        object: ResolverInputTypes['User_insert_input'] /** upsert condition */;
        on_conflict?: ResolverInputTypes['User_on_conflict'] | undefined | null;
      },
      ResolverInputTypes['User'],
    ];
    update_Application?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['Application_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ResolverInputTypes['Application_set_input']
          | undefined
          | null /** filter the rows which have to be updated */;
        where: ResolverInputTypes['Application_bool_exp'];
      },
      ResolverInputTypes['Application_mutation_response'],
    ];
    update_ApplicationIntegration?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['ApplicationIntegration_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ResolverInputTypes['ApplicationIntegration_set_input']
          | undefined
          | null /** filter the rows which have to be updated */;
        where: ResolverInputTypes['ApplicationIntegration_bool_exp'];
      },
      ResolverInputTypes['ApplicationIntegration_mutation_response'],
    ];
    update_ApplicationIntegration_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['ApplicationIntegration_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ResolverInputTypes['ApplicationIntegration_set_input']
          | undefined
          | null;
        pk_columns: ResolverInputTypes['ApplicationIntegration_pk_columns_input'];
      },
      ResolverInputTypes['ApplicationIntegration'],
    ];
    update_ApplicationIntegration_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ResolverInputTypes['ApplicationIntegration_updates']>;
      },
      ResolverInputTypes['ApplicationIntegration_mutation_response'],
    ];
    update_Application_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['Application_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ResolverInputTypes['Application_set_input'] | undefined | null;
        pk_columns: ResolverInputTypes['Application_pk_columns_input'];
      },
      ResolverInputTypes['Application'],
    ];
    update_Application_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ResolverInputTypes['Application_updates']>;
      },
      ResolverInputTypes['Application_mutation_response'],
    ];
    update_CaseSeverity?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['CaseSeverity_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ResolverInputTypes['CaseSeverity_set_input']
          | undefined
          | null /** filter the rows which have to be updated */;
        where: ResolverInputTypes['CaseSeverity_bool_exp'];
      },
      ResolverInputTypes['CaseSeverity_mutation_response'],
    ];
    update_CaseSeverity_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['CaseSeverity_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ResolverInputTypes['CaseSeverity_set_input'] | undefined | null;
        pk_columns: ResolverInputTypes['CaseSeverity_pk_columns_input'];
      },
      ResolverInputTypes['CaseSeverity'],
    ];
    update_CaseSeverity_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ResolverInputTypes['CaseSeverity_updates']>;
      },
      ResolverInputTypes['CaseSeverity_mutation_response'],
    ];
    update_ClosureReason?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['ClosureReason_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ResolverInputTypes['ClosureReason_set_input']
          | undefined
          | null /** filter the rows which have to be updated */;
        where: ResolverInputTypes['ClosureReason_bool_exp'];
      },
      ResolverInputTypes['ClosureReason_mutation_response'],
    ];
    update_ClosureReason_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['ClosureReason_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ResolverInputTypes['ClosureReason_set_input'] | undefined | null;
        pk_columns: ResolverInputTypes['ClosureReason_pk_columns_input'];
      },
      ResolverInputTypes['ClosureReason'],
    ];
    update_ClosureReason_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ResolverInputTypes['ClosureReason_updates']>;
      },
      ResolverInputTypes['ClosureReason_mutation_response'],
    ];
    update_Currency?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ResolverInputTypes['Currency_set_input']
          | undefined
          | null /** filter the rows which have to be updated */;
        where: ResolverInputTypes['Currency_bool_exp'];
      },
      ResolverInputTypes['Currency_mutation_response'],
    ];
    update_Currency_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ResolverInputTypes['Currency_set_input'] | undefined | null;
        pk_columns: ResolverInputTypes['Currency_pk_columns_input'];
      },
      ResolverInputTypes['Currency'],
    ];
    update_Currency_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ResolverInputTypes['Currency_updates']>;
      },
      ResolverInputTypes['Currency_mutation_response'],
    ];
    update_CustomRole?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['CustomRole_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ResolverInputTypes['CustomRole_set_input']
          | undefined
          | null /** filter the rows which have to be updated */;
        where: ResolverInputTypes['CustomRole_bool_exp'];
      },
      ResolverInputTypes['CustomRole_mutation_response'],
    ];
    update_CustomRole_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['CustomRole_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ResolverInputTypes['CustomRole_set_input'] | undefined | null;
        pk_columns: ResolverInputTypes['CustomRole_pk_columns_input'];
      },
      ResolverInputTypes['CustomRole'],
    ];
    update_CustomRole_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ResolverInputTypes['CustomRole_updates']>;
      },
      ResolverInputTypes['CustomRole_mutation_response'],
    ];
    update_Group?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['Group_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ResolverInputTypes['Group_set_input']
          | undefined
          | null /** filter the rows which have to be updated */;
        where: ResolverInputTypes['Group_bool_exp'];
      },
      ResolverInputTypes['Group_mutation_response'],
    ];
    update_GroupRole?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ResolverInputTypes['GroupRole_set_input']
          | undefined
          | null /** filter the rows which have to be updated */;
        where: ResolverInputTypes['GroupRole_bool_exp'];
      },
      ResolverInputTypes['GroupRole_mutation_response'],
    ];
    update_GroupRole_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ResolverInputTypes['GroupRole_set_input'] | undefined | null;
        pk_columns: ResolverInputTypes['GroupRole_pk_columns_input'];
      },
      ResolverInputTypes['GroupRole'],
    ];
    update_GroupRole_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ResolverInputTypes['GroupRole_updates']>;
      },
      ResolverInputTypes['GroupRole_mutation_response'],
    ];
    update_Group_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['Group_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ResolverInputTypes['Group_set_input'] | undefined | null;
        pk_columns: ResolverInputTypes['Group_pk_columns_input'];
      },
      ResolverInputTypes['Group'],
    ];
    update_Group_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ResolverInputTypes['Group_updates']>;
      },
      ResolverInputTypes['Group_mutation_response'],
    ];
    update_Industry?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['Industry_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ResolverInputTypes['Industry_set_input']
          | undefined
          | null /** filter the rows which have to be updated */;
        where: ResolverInputTypes['Industry_bool_exp'];
      },
      ResolverInputTypes['Industry_mutation_response'],
    ];
    update_Industry_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['Industry_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ResolverInputTypes['Industry_set_input'] | undefined | null;
        pk_columns: ResolverInputTypes['Industry_pk_columns_input'];
      },
      ResolverInputTypes['Industry'],
    ];
    update_Industry_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ResolverInputTypes['Industry_updates']>;
      },
      ResolverInputTypes['Industry_mutation_response'],
    ];
    update_IssueCategory?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['IssueCategory_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ResolverInputTypes['IssueCategory_set_input']
          | undefined
          | null /** filter the rows which have to be updated */;
        where: ResolverInputTypes['IssueCategory_bool_exp'];
      },
      ResolverInputTypes['IssueCategory_mutation_response'],
    ];
    update_IssueCategory_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['IssueCategory_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ResolverInputTypes['IssueCategory_set_input'] | undefined | null;
        pk_columns: ResolverInputTypes['IssueCategory_pk_columns_input'];
      },
      ResolverInputTypes['IssueCategory'],
    ];
    update_IssueCategory_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ResolverInputTypes['IssueCategory_updates']>;
      },
      ResolverInputTypes['IssueCategory_mutation_response'],
    ];
    update_Object?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ResolverInputTypes['Object_set_input']
          | undefined
          | null /** filter the rows which have to be updated */;
        where: ResolverInputTypes['Object_bool_exp'];
      },
      ResolverInputTypes['Object_mutation_response'],
    ];
    update_Object_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ResolverInputTypes['Object_set_input'] | undefined | null;
        pk_columns: ResolverInputTypes['Object_pk_columns_input'];
      },
      ResolverInputTypes['Object'],
    ];
    update_Object_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ResolverInputTypes['Object_updates']>;
      },
      ResolverInputTypes['Object_mutation_response'],
    ];
    update_Organization?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ResolverInputTypes['Organization_set_input']
          | undefined
          | null /** filter the rows which have to be updated */;
        where: ResolverInputTypes['Organization_bool_exp'];
      },
      ResolverInputTypes['Organization_mutation_response'],
    ];
    update_Organization_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ResolverInputTypes['Organization_set_input'] | undefined | null;
        pk_columns: ResolverInputTypes['Organization_pk_columns_input'];
      },
      ResolverInputTypes['Organization'],
    ];
    update_Organization_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ResolverInputTypes['Organization_updates']>;
      },
      ResolverInputTypes['Organization_mutation_response'],
    ];
    update_Package?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['Package_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ResolverInputTypes['Package_set_input']
          | undefined
          | null /** filter the rows which have to be updated */;
        where: ResolverInputTypes['Package_bool_exp'];
      },
      ResolverInputTypes['Package_mutation_response'],
    ];
    update_PackageApplication?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ResolverInputTypes['PackageApplication_set_input']
          | undefined
          | null /** filter the rows which have to be updated */;
        where: ResolverInputTypes['PackageApplication_bool_exp'];
      },
      ResolverInputTypes['PackageApplication_mutation_response'],
    ];
    update_PackageApplication_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ResolverInputTypes['PackageApplication_set_input']
          | undefined
          | null;
        pk_columns: ResolverInputTypes['PackageApplication_pk_columns_input'];
      },
      ResolverInputTypes['PackageApplication'],
    ];
    update_PackageApplication_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ResolverInputTypes['PackageApplication_updates']>;
      },
      ResolverInputTypes['PackageApplication_mutation_response'],
    ];
    update_Package_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['Package_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ResolverInputTypes['Package_set_input'] | undefined | null;
        pk_columns: ResolverInputTypes['Package_pk_columns_input'];
      },
      ResolverInputTypes['Package'],
    ];
    update_Package_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ResolverInputTypes['Package_updates']>;
      },
      ResolverInputTypes['Package_mutation_response'],
    ];
    update_Product?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['Product_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ResolverInputTypes['Product_set_input']
          | undefined
          | null /** filter the rows which have to be updated */;
        where: ResolverInputTypes['Product_bool_exp'];
      },
      ResolverInputTypes['Product_mutation_response'],
    ];
    update_ProductCategory?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['ProductCategory_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ResolverInputTypes['ProductCategory_set_input']
          | undefined
          | null /** filter the rows which have to be updated */;
        where: ResolverInputTypes['ProductCategory_bool_exp'];
      },
      ResolverInputTypes['ProductCategory_mutation_response'],
    ];
    update_ProductCategory_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['ProductCategory_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ResolverInputTypes['ProductCategory_set_input']
          | undefined
          | null;
        pk_columns: ResolverInputTypes['ProductCategory_pk_columns_input'];
      },
      ResolverInputTypes['ProductCategory'],
    ];
    update_ProductCategory_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ResolverInputTypes['ProductCategory_updates']>;
      },
      ResolverInputTypes['ProductCategory_mutation_response'],
    ];
    update_ProductVersion?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['ProductVersion_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ResolverInputTypes['ProductVersion_set_input']
          | undefined
          | null /** filter the rows which have to be updated */;
        where: ResolverInputTypes['ProductVersion_bool_exp'];
      },
      ResolverInputTypes['ProductVersion_mutation_response'],
    ];
    update_ProductVersion_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['ProductVersion_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ResolverInputTypes['ProductVersion_set_input']
          | undefined
          | null;
        pk_columns: ResolverInputTypes['ProductVersion_pk_columns_input'];
      },
      ResolverInputTypes['ProductVersion'],
    ];
    update_ProductVersion_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ResolverInputTypes['ProductVersion_updates']>;
      },
      ResolverInputTypes['ProductVersion_mutation_response'],
    ];
    update_Product_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['Product_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ResolverInputTypes['Product_set_input'] | undefined | null;
        pk_columns: ResolverInputTypes['Product_pk_columns_input'];
      },
      ResolverInputTypes['Product'],
    ];
    update_Product_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ResolverInputTypes['Product_updates']>;
      },
      ResolverInputTypes['Product_mutation_response'],
    ];
    update_Role?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ResolverInputTypes['Role_set_input']
          | undefined
          | null /** filter the rows which have to be updated */;
        where: ResolverInputTypes['Role_bool_exp'];
      },
      ResolverInputTypes['Role_mutation_response'],
    ];
    update_Role_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ResolverInputTypes['Role_set_input'] | undefined | null;
        pk_columns: ResolverInputTypes['Role_pk_columns_input'];
      },
      ResolverInputTypes['Role'],
    ];
    update_Role_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ResolverInputTypes['Role_updates']>;
      },
      ResolverInputTypes['Role_mutation_response'],
    ];
    update_Status?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ResolverInputTypes['Status_set_input']
          | undefined
          | null /** filter the rows which have to be updated */;
        where: ResolverInputTypes['Status_bool_exp'];
      },
      ResolverInputTypes['Status_mutation_response'],
    ];
    update_Status_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ResolverInputTypes['Status_set_input'] | undefined | null;
        pk_columns: ResolverInputTypes['Status_pk_columns_input'];
      },
      ResolverInputTypes['Status'],
    ];
    update_Status_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ResolverInputTypes['Status_updates']>;
      },
      ResolverInputTypes['Status_mutation_response'],
    ];
    update_Task?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ResolverInputTypes['Task_set_input']
          | undefined
          | null /** filter the rows which have to be updated */;
        where: ResolverInputTypes['Task_bool_exp'];
      },
      ResolverInputTypes['Task_mutation_response'],
    ];
    update_Task_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ResolverInputTypes['Task_set_input'] | undefined | null;
        pk_columns: ResolverInputTypes['Task_pk_columns_input'];
      },
      ResolverInputTypes['Task'],
    ];
    update_Task_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ResolverInputTypes['Task_updates']>;
      },
      ResolverInputTypes['Task_mutation_response'],
    ];
    update_Tenant?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['Tenant_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ResolverInputTypes['Tenant_set_input']
          | undefined
          | null /** filter the rows which have to be updated */;
        where: ResolverInputTypes['Tenant_bool_exp'];
      },
      ResolverInputTypes['Tenant_mutation_response'],
    ];
    update_TenantPackage?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ResolverInputTypes['TenantPackage_set_input']
          | undefined
          | null /** filter the rows which have to be updated */;
        where: ResolverInputTypes['TenantPackage_bool_exp'];
      },
      ResolverInputTypes['TenantPackage_mutation_response'],
    ];
    update_TenantPackage_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ResolverInputTypes['TenantPackage_set_input'] | undefined | null;
        pk_columns: ResolverInputTypes['TenantPackage_pk_columns_input'];
      },
      ResolverInputTypes['TenantPackage'],
    ];
    update_TenantPackage_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ResolverInputTypes['TenantPackage_updates']>;
      },
      ResolverInputTypes['TenantPackage_mutation_response'],
    ];
    update_Tenant_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['Tenant_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ResolverInputTypes['Tenant_set_input'] | undefined | null;
        pk_columns: ResolverInputTypes['Tenant_pk_columns_input'];
      },
      ResolverInputTypes['Tenant'],
    ];
    update_Tenant_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ResolverInputTypes['Tenant_updates']>;
      },
      ResolverInputTypes['Tenant_mutation_response'],
    ];
    update_User?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['User_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?:
          | ResolverInputTypes['User_set_input']
          | undefined
          | null /** filter the rows which have to be updated */;
        where: ResolverInputTypes['User_bool_exp'];
      },
      ResolverInputTypes['User_mutation_response'],
    ];
    update_UserGroup?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ResolverInputTypes['UserGroup_set_input']
          | undefined
          | null /** filter the rows which have to be updated */;
        where: ResolverInputTypes['UserGroup_bool_exp'];
      },
      ResolverInputTypes['UserGroup_mutation_response'],
    ];
    update_UserGroup_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ResolverInputTypes['UserGroup_set_input'] | undefined | null;
        pk_columns: ResolverInputTypes['UserGroup_pk_columns_input'];
      },
      ResolverInputTypes['UserGroup'],
    ];
    update_UserGroup_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ResolverInputTypes['UserGroup_updates']>;
      },
      ResolverInputTypes['UserGroup_mutation_response'],
    ];
    update_UserRole?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ResolverInputTypes['UserRole_set_input']
          | undefined
          | null /** filter the rows which have to be updated */;
        where: ResolverInputTypes['UserRole_bool_exp'];
      },
      ResolverInputTypes['UserRole_mutation_response'],
    ];
    update_UserRole_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ResolverInputTypes['UserRole_set_input'] | undefined | null;
        pk_columns: ResolverInputTypes['UserRole_pk_columns_input'];
      },
      ResolverInputTypes['UserRole'],
    ];
    update_UserRole_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ResolverInputTypes['UserRole_updates']>;
      },
      ResolverInputTypes['UserRole_mutation_response'],
    ];
    update_UserType?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?:
          | ResolverInputTypes['UserType_set_input']
          | undefined
          | null /** filter the rows which have to be updated */;
        where: ResolverInputTypes['UserType_bool_exp'];
      },
      ResolverInputTypes['UserType_mutation_response'],
    ];
    update_UserType_by_pk?: [
      {
        /** sets the columns of the filtered rows to the given values */
        _set?: ResolverInputTypes['UserType_set_input'] | undefined | null;
        pk_columns: ResolverInputTypes['UserType_pk_columns_input'];
      },
      ResolverInputTypes['UserType'],
    ];
    update_UserType_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ResolverInputTypes['UserType_updates']>;
      },
      ResolverInputTypes['UserType_mutation_response'],
    ];
    update_User_by_pk?: [
      {
        /** increments the numeric columns with given value of the filtered values */
        _inc?:
          | ResolverInputTypes['User_inc_input']
          | undefined
          | null /** sets the columns of the filtered rows to the given values */;
        _set?: ResolverInputTypes['User_set_input'] | undefined | null;
        pk_columns: ResolverInputTypes['User_pk_columns_input'];
      },
      ResolverInputTypes['User'],
    ];
    update_User_many?: [
      {
        /** updates to execute, in order */
        updates: Array<ResolverInputTypes['User_updates']>;
      },
      ResolverInputTypes['User_mutation_response'],
    ];
    __typename?: boolean | `@${string}`;
  }>;
  /** column ordering options */
  ['order_by']: order_by;
  ['query_root']: AliasType<{
    Application?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Application_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Application_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Application_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Application'],
    ];
    ApplicationIntegration?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['ApplicationIntegration_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['ApplicationIntegration_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?:
          | ResolverInputTypes['ApplicationIntegration_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['ApplicationIntegration'],
    ];
    ApplicationIntegration_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['ApplicationIntegration_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['ApplicationIntegration_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?:
          | ResolverInputTypes['ApplicationIntegration_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['ApplicationIntegration_aggregate'],
    ];
    ApplicationIntegration_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['ApplicationIntegration'],
    ];
    Application_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Application_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Application_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Application_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Application_aggregate'],
    ];
    Application_by_pk?: [{ id: string }, ResolverInputTypes['Application']];
    CaseSeverity?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['CaseSeverity_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['CaseSeverity_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['CaseSeverity_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['CaseSeverity'],
    ];
    CaseSeverity_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['CaseSeverity_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['CaseSeverity_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['CaseSeverity_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['CaseSeverity_aggregate'],
    ];
    CaseSeverity_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['CaseSeverity'],
    ];
    ClosureReason?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['ClosureReason_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['ClosureReason_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['ClosureReason_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['ClosureReason'],
    ];
    ClosureReason_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['ClosureReason_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['ClosureReason_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['ClosureReason_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['ClosureReason_aggregate'],
    ];
    ClosureReason_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['ClosureReason'],
    ];
    Currency?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Currency_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Currency_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Currency_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Currency'],
    ];
    Currency_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Currency_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Currency_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Currency_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Currency_aggregate'],
    ];
    Currency_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['Currency'],
    ];
    CustomRole?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['CustomRole_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['CustomRole_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['CustomRole_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['CustomRole'],
    ];
    CustomRole_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['CustomRole_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['CustomRole_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['CustomRole_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['CustomRole_aggregate'],
    ];
    CustomRole_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['CustomRole'],
    ];
    Group?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Group_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Group_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Group_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Group'],
    ];
    GroupRole?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['GroupRole_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['GroupRole_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['GroupRole_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['GroupRole'],
    ];
    GroupRole_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['GroupRole_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['GroupRole_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['GroupRole_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['GroupRole_aggregate'],
    ];
    GroupRole_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['GroupRole'],
    ];
    Group_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Group_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Group_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Group_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Group_aggregate'],
    ];
    Group_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['Group'],
    ];
    Industry?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Industry_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Industry_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Industry_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Industry'],
    ];
    Industry_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Industry_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Industry_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Industry_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Industry_aggregate'],
    ];
    Industry_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['Industry'],
    ];
    IssueCategory?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['IssueCategory_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['IssueCategory_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['IssueCategory_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['IssueCategory'],
    ];
    IssueCategory_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['IssueCategory_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['IssueCategory_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['IssueCategory_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['IssueCategory_aggregate'],
    ];
    IssueCategory_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['IssueCategory'],
    ];
    Object?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Object_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Object_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Object_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Object'],
    ];
    Object_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Object_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Object_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Object_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Object_aggregate'],
    ];
    Object_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['Object'],
    ];
    Organization?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Organization_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Organization_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Organization_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Organization'],
    ];
    Organization_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Organization_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Organization_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Organization_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Organization_aggregate'],
    ];
    Organization_by_pk?: [{ id: string }, ResolverInputTypes['Organization']];
    Package?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Package_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Package_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Package_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Package'],
    ];
    PackageApplication?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['PackageApplication_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['PackageApplication_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?:
          | ResolverInputTypes['PackageApplication_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['PackageApplication'],
    ];
    PackageApplication_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['PackageApplication_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['PackageApplication_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?:
          | ResolverInputTypes['PackageApplication_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['PackageApplication_aggregate'],
    ];
    PackageApplication_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['PackageApplication'],
    ];
    Package_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Package_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Package_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Package_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Package_aggregate'],
    ];
    Package_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['Package'],
    ];
    Product?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Product_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Product_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Product_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Product'],
    ];
    ProductCategory?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['ProductCategory_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['ProductCategory_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?:
          | ResolverInputTypes['ProductCategory_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['ProductCategory'],
    ];
    ProductCategory_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['ProductCategory_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['ProductCategory_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?:
          | ResolverInputTypes['ProductCategory_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['ProductCategory_aggregate'],
    ];
    ProductCategory_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['ProductCategory'],
    ];
    ProductVersion?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['ProductVersion_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['ProductVersion_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?:
          | ResolverInputTypes['ProductVersion_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['ProductVersion'],
    ];
    ProductVersion_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['ProductVersion_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['ProductVersion_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?:
          | ResolverInputTypes['ProductVersion_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['ProductVersion_aggregate'],
    ];
    ProductVersion_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['ProductVersion'],
    ];
    Product_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Product_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Product_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Product_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Product_aggregate'],
    ];
    Product_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['Product'],
    ];
    Role?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Role_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Role_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Role_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Role'],
    ];
    Role_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Role_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Role_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Role_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Role_aggregate'],
    ];
    Role_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['Role'],
    ];
    Status?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Status_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Status_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Status_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Status'],
    ];
    Status_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Status_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Status_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Status_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Status_aggregate'],
    ];
    Status_by_pk?: [{ value: string }, ResolverInputTypes['Status']];
    Task?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Task_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Task_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Task_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Task'],
    ];
    Task_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Task_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Task_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Task_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Task_aggregate'],
    ];
    Task_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['Task'],
    ];
    Tenant?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Tenant_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Tenant_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Tenant_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Tenant'],
    ];
    TenantPackage?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['TenantPackage_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['TenantPackage_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['TenantPackage_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['TenantPackage'],
    ];
    TenantPackage_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['TenantPackage_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['TenantPackage_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['TenantPackage_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['TenantPackage_aggregate'],
    ];
    TenantPackage_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['TenantPackage'],
    ];
    Tenant_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Tenant_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Tenant_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Tenant_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Tenant_aggregate'],
    ];
    Tenant_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['Tenant'],
    ];
    User?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['User_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['User_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['User_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['User'],
    ];
    UserGroup?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['UserGroup_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['UserGroup_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['UserGroup_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['UserGroup'],
    ];
    UserGroup_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['UserGroup_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['UserGroup_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['UserGroup_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['UserGroup_aggregate'],
    ];
    UserGroup_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['UserGroup'],
    ];
    UserRole?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['UserRole_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['UserRole_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['UserRole_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['UserRole'],
    ];
    UserRole_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['UserRole_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['UserRole_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['UserRole_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['UserRole_aggregate'],
    ];
    UserRole_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['UserRole'],
    ];
    UserType?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['UserType_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['UserType_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['UserType_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['UserType'],
    ];
    UserType_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['UserType_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['UserType_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['UserType_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['UserType_aggregate'],
    ];
    UserType_by_pk?: [{ value: string }, ResolverInputTypes['UserType']];
    User_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['User_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['User_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['User_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['User_aggregate'],
    ];
    User_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['User'],
    ];
    __typename?: boolean | `@${string}`;
  }>;
  ['subscription_root']: AliasType<{
    Application?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Application_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Application_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Application_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Application'],
    ];
    ApplicationIntegration?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['ApplicationIntegration_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['ApplicationIntegration_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?:
          | ResolverInputTypes['ApplicationIntegration_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['ApplicationIntegration'],
    ];
    ApplicationIntegration_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['ApplicationIntegration_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['ApplicationIntegration_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?:
          | ResolverInputTypes['ApplicationIntegration_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['ApplicationIntegration_aggregate'],
    ];
    ApplicationIntegration_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['ApplicationIntegration'],
    ];
    ApplicationIntegration_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size: number /** cursor to stream the results returned by the query */;
        cursor: Array<
          | ResolverInputTypes['ApplicationIntegration_stream_cursor_input']
          | undefined
          | null
        > /** filter the rows returned */;
        where?:
          | ResolverInputTypes['ApplicationIntegration_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['ApplicationIntegration'],
    ];
    Application_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Application_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Application_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Application_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Application_aggregate'],
    ];
    Application_by_pk?: [{ id: string }, ResolverInputTypes['Application']];
    Application_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size: number /** cursor to stream the results returned by the query */;
        cursor: Array<
          | ResolverInputTypes['Application_stream_cursor_input']
          | undefined
          | null
        > /** filter the rows returned */;
        where?: ResolverInputTypes['Application_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Application'],
    ];
    CaseSeverity?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['CaseSeverity_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['CaseSeverity_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['CaseSeverity_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['CaseSeverity'],
    ];
    CaseSeverity_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['CaseSeverity_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['CaseSeverity_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['CaseSeverity_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['CaseSeverity_aggregate'],
    ];
    CaseSeverity_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['CaseSeverity'],
    ];
    CaseSeverity_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size: number /** cursor to stream the results returned by the query */;
        cursor: Array<
          | ResolverInputTypes['CaseSeverity_stream_cursor_input']
          | undefined
          | null
        > /** filter the rows returned */;
        where?: ResolverInputTypes['CaseSeverity_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['CaseSeverity'],
    ];
    ClosureReason?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['ClosureReason_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['ClosureReason_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['ClosureReason_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['ClosureReason'],
    ];
    ClosureReason_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['ClosureReason_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['ClosureReason_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['ClosureReason_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['ClosureReason_aggregate'],
    ];
    ClosureReason_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['ClosureReason'],
    ];
    ClosureReason_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size: number /** cursor to stream the results returned by the query */;
        cursor: Array<
          | ResolverInputTypes['ClosureReason_stream_cursor_input']
          | undefined
          | null
        > /** filter the rows returned */;
        where?: ResolverInputTypes['ClosureReason_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['ClosureReason'],
    ];
    Currency?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Currency_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Currency_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Currency_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Currency'],
    ];
    Currency_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Currency_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Currency_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Currency_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Currency_aggregate'],
    ];
    Currency_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['Currency'],
    ];
    Currency_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size: number /** cursor to stream the results returned by the query */;
        cursor: Array<
          ResolverInputTypes['Currency_stream_cursor_input'] | undefined | null
        > /** filter the rows returned */;
        where?: ResolverInputTypes['Currency_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Currency'],
    ];
    CustomRole?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['CustomRole_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['CustomRole_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['CustomRole_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['CustomRole'],
    ];
    CustomRole_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['CustomRole_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['CustomRole_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['CustomRole_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['CustomRole_aggregate'],
    ];
    CustomRole_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['CustomRole'],
    ];
    CustomRole_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size: number /** cursor to stream the results returned by the query */;
        cursor: Array<
          | ResolverInputTypes['CustomRole_stream_cursor_input']
          | undefined
          | null
        > /** filter the rows returned */;
        where?: ResolverInputTypes['CustomRole_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['CustomRole'],
    ];
    Group?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Group_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Group_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Group_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Group'],
    ];
    GroupRole?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['GroupRole_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['GroupRole_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['GroupRole_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['GroupRole'],
    ];
    GroupRole_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['GroupRole_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['GroupRole_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['GroupRole_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['GroupRole_aggregate'],
    ];
    GroupRole_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['GroupRole'],
    ];
    GroupRole_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size: number /** cursor to stream the results returned by the query */;
        cursor: Array<
          ResolverInputTypes['GroupRole_stream_cursor_input'] | undefined | null
        > /** filter the rows returned */;
        where?: ResolverInputTypes['GroupRole_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['GroupRole'],
    ];
    Group_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Group_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Group_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Group_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Group_aggregate'],
    ];
    Group_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['Group'],
    ];
    Group_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size: number /** cursor to stream the results returned by the query */;
        cursor: Array<
          ResolverInputTypes['Group_stream_cursor_input'] | undefined | null
        > /** filter the rows returned */;
        where?: ResolverInputTypes['Group_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Group'],
    ];
    Industry?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Industry_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Industry_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Industry_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Industry'],
    ];
    Industry_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Industry_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Industry_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Industry_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Industry_aggregate'],
    ];
    Industry_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['Industry'],
    ];
    Industry_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size: number /** cursor to stream the results returned by the query */;
        cursor: Array<
          ResolverInputTypes['Industry_stream_cursor_input'] | undefined | null
        > /** filter the rows returned */;
        where?: ResolverInputTypes['Industry_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Industry'],
    ];
    IssueCategory?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['IssueCategory_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['IssueCategory_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['IssueCategory_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['IssueCategory'],
    ];
    IssueCategory_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['IssueCategory_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['IssueCategory_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['IssueCategory_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['IssueCategory_aggregate'],
    ];
    IssueCategory_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['IssueCategory'],
    ];
    IssueCategory_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size: number /** cursor to stream the results returned by the query */;
        cursor: Array<
          | ResolverInputTypes['IssueCategory_stream_cursor_input']
          | undefined
          | null
        > /** filter the rows returned */;
        where?: ResolverInputTypes['IssueCategory_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['IssueCategory'],
    ];
    Object?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Object_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Object_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Object_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Object'],
    ];
    Object_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Object_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Object_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Object_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Object_aggregate'],
    ];
    Object_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['Object'],
    ];
    Object_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size: number /** cursor to stream the results returned by the query */;
        cursor: Array<
          ResolverInputTypes['Object_stream_cursor_input'] | undefined | null
        > /** filter the rows returned */;
        where?: ResolverInputTypes['Object_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Object'],
    ];
    Organization?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Organization_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Organization_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Organization_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Organization'],
    ];
    Organization_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Organization_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Organization_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Organization_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Organization_aggregate'],
    ];
    Organization_by_pk?: [{ id: string }, ResolverInputTypes['Organization']];
    Organization_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size: number /** cursor to stream the results returned by the query */;
        cursor: Array<
          | ResolverInputTypes['Organization_stream_cursor_input']
          | undefined
          | null
        > /** filter the rows returned */;
        where?: ResolverInputTypes['Organization_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Organization'],
    ];
    Package?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Package_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Package_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Package_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Package'],
    ];
    PackageApplication?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['PackageApplication_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['PackageApplication_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?:
          | ResolverInputTypes['PackageApplication_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['PackageApplication'],
    ];
    PackageApplication_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['PackageApplication_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['PackageApplication_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?:
          | ResolverInputTypes['PackageApplication_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['PackageApplication_aggregate'],
    ];
    PackageApplication_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['PackageApplication'],
    ];
    PackageApplication_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size: number /** cursor to stream the results returned by the query */;
        cursor: Array<
          | ResolverInputTypes['PackageApplication_stream_cursor_input']
          | undefined
          | null
        > /** filter the rows returned */;
        where?:
          | ResolverInputTypes['PackageApplication_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['PackageApplication'],
    ];
    Package_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Package_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Package_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Package_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Package_aggregate'],
    ];
    Package_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['Package'],
    ];
    Package_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size: number /** cursor to stream the results returned by the query */;
        cursor: Array<
          ResolverInputTypes['Package_stream_cursor_input'] | undefined | null
        > /** filter the rows returned */;
        where?: ResolverInputTypes['Package_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Package'],
    ];
    Product?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Product_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Product_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Product_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Product'],
    ];
    ProductCategory?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['ProductCategory_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['ProductCategory_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?:
          | ResolverInputTypes['ProductCategory_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['ProductCategory'],
    ];
    ProductCategory_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['ProductCategory_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['ProductCategory_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?:
          | ResolverInputTypes['ProductCategory_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['ProductCategory_aggregate'],
    ];
    ProductCategory_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['ProductCategory'],
    ];
    ProductCategory_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size: number /** cursor to stream the results returned by the query */;
        cursor: Array<
          | ResolverInputTypes['ProductCategory_stream_cursor_input']
          | undefined
          | null
        > /** filter the rows returned */;
        where?:
          | ResolverInputTypes['ProductCategory_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['ProductCategory'],
    ];
    ProductVersion?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['ProductVersion_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['ProductVersion_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?:
          | ResolverInputTypes['ProductVersion_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['ProductVersion'],
    ];
    ProductVersion_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['ProductVersion_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['ProductVersion_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?:
          | ResolverInputTypes['ProductVersion_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['ProductVersion_aggregate'],
    ];
    ProductVersion_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['ProductVersion'],
    ];
    ProductVersion_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size: number /** cursor to stream the results returned by the query */;
        cursor: Array<
          | ResolverInputTypes['ProductVersion_stream_cursor_input']
          | undefined
          | null
        > /** filter the rows returned */;
        where?:
          | ResolverInputTypes['ProductVersion_bool_exp']
          | undefined
          | null;
      },
      ResolverInputTypes['ProductVersion'],
    ];
    Product_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Product_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Product_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Product_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Product_aggregate'],
    ];
    Product_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['Product'],
    ];
    Product_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size: number /** cursor to stream the results returned by the query */;
        cursor: Array<
          ResolverInputTypes['Product_stream_cursor_input'] | undefined | null
        > /** filter the rows returned */;
        where?: ResolverInputTypes['Product_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Product'],
    ];
    Role?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Role_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Role_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Role_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Role'],
    ];
    Role_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Role_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Role_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Role_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Role_aggregate'],
    ];
    Role_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['Role'],
    ];
    Role_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size: number /** cursor to stream the results returned by the query */;
        cursor: Array<
          ResolverInputTypes['Role_stream_cursor_input'] | undefined | null
        > /** filter the rows returned */;
        where?: ResolverInputTypes['Role_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Role'],
    ];
    Status?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Status_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Status_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Status_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Status'],
    ];
    Status_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Status_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Status_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Status_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Status_aggregate'],
    ];
    Status_by_pk?: [{ value: string }, ResolverInputTypes['Status']];
    Status_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size: number /** cursor to stream the results returned by the query */;
        cursor: Array<
          ResolverInputTypes['Status_stream_cursor_input'] | undefined | null
        > /** filter the rows returned */;
        where?: ResolverInputTypes['Status_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Status'],
    ];
    Task?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Task_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Task_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Task_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Task'],
    ];
    Task_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Task_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Task_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Task_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Task_aggregate'],
    ];
    Task_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['Task'],
    ];
    Task_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size: number /** cursor to stream the results returned by the query */;
        cursor: Array<
          ResolverInputTypes['Task_stream_cursor_input'] | undefined | null
        > /** filter the rows returned */;
        where?: ResolverInputTypes['Task_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Task'],
    ];
    Tenant?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Tenant_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Tenant_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Tenant_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Tenant'],
    ];
    TenantPackage?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['TenantPackage_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['TenantPackage_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['TenantPackage_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['TenantPackage'],
    ];
    TenantPackage_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['TenantPackage_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['TenantPackage_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['TenantPackage_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['TenantPackage_aggregate'],
    ];
    TenantPackage_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['TenantPackage'],
    ];
    TenantPackage_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size: number /** cursor to stream the results returned by the query */;
        cursor: Array<
          | ResolverInputTypes['TenantPackage_stream_cursor_input']
          | undefined
          | null
        > /** filter the rows returned */;
        where?: ResolverInputTypes['TenantPackage_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['TenantPackage'],
    ];
    Tenant_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['Tenant_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['Tenant_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['Tenant_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Tenant_aggregate'],
    ];
    Tenant_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['Tenant'],
    ];
    Tenant_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size: number /** cursor to stream the results returned by the query */;
        cursor: Array<
          ResolverInputTypes['Tenant_stream_cursor_input'] | undefined | null
        > /** filter the rows returned */;
        where?: ResolverInputTypes['Tenant_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['Tenant'],
    ];
    User?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['User_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['User_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['User_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['User'],
    ];
    UserGroup?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['UserGroup_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['UserGroup_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['UserGroup_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['UserGroup'],
    ];
    UserGroup_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['UserGroup_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['UserGroup_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['UserGroup_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['UserGroup_aggregate'],
    ];
    UserGroup_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['UserGroup'],
    ];
    UserGroup_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size: number /** cursor to stream the results returned by the query */;
        cursor: Array<
          ResolverInputTypes['UserGroup_stream_cursor_input'] | undefined | null
        > /** filter the rows returned */;
        where?: ResolverInputTypes['UserGroup_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['UserGroup'],
    ];
    UserRole?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['UserRole_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['UserRole_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['UserRole_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['UserRole'],
    ];
    UserRole_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['UserRole_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['UserRole_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['UserRole_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['UserRole_aggregate'],
    ];
    UserRole_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['UserRole'],
    ];
    UserRole_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size: number /** cursor to stream the results returned by the query */;
        cursor: Array<
          ResolverInputTypes['UserRole_stream_cursor_input'] | undefined | null
        > /** filter the rows returned */;
        where?: ResolverInputTypes['UserRole_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['UserRole'],
    ];
    UserType?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['UserType_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['UserType_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['UserType_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['UserType'],
    ];
    UserType_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['UserType_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['UserType_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['UserType_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['UserType_aggregate'],
    ];
    UserType_by_pk?: [{ value: string }, ResolverInputTypes['UserType']];
    UserType_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size: number /** cursor to stream the results returned by the query */;
        cursor: Array<
          ResolverInputTypes['UserType_stream_cursor_input'] | undefined | null
        > /** filter the rows returned */;
        where?: ResolverInputTypes['UserType_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['UserType'],
    ];
    User_aggregate?: [
      {
        /** distinct select on columns */
        distinct_on?:
          | Array<ResolverInputTypes['User_select_column']>
          | undefined
          | null /** limit the number of rows returned */;
        limit?:
          | number
          | undefined
          | null /** skip the first n rows. Use only with order_by */;
        offset?:
          | number
          | undefined
          | null /** sort the rows by one or more columns */;
        order_by?:
          | Array<ResolverInputTypes['User_order_by']>
          | undefined
          | null /** filter the rows returned */;
        where?: ResolverInputTypes['User_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['User_aggregate'],
    ];
    User_by_pk?: [
      { id: ResolverInputTypes['uuid'] },
      ResolverInputTypes['User'],
    ];
    User_stream?: [
      {
        /** maximum number of rows returned in a single batch */
        batch_size: number /** cursor to stream the results returned by the query */;
        cursor: Array<
          ResolverInputTypes['User_stream_cursor_input'] | undefined | null
        > /** filter the rows returned */;
        where?: ResolverInputTypes['User_bool_exp'] | undefined | null;
      },
      ResolverInputTypes['User'],
    ];
    __typename?: boolean | `@${string}`;
  }>;
  ['timestamp']: unknown;
  /** Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'. */
  ['timestamp_comparison_exp']: {
    _eq?: ResolverInputTypes['timestamp'] | undefined | null;
    _gt?: ResolverInputTypes['timestamp'] | undefined | null;
    _gte?: ResolverInputTypes['timestamp'] | undefined | null;
    _in?: Array<ResolverInputTypes['timestamp']> | undefined | null;
    _is_null?: boolean | undefined | null;
    _lt?: ResolverInputTypes['timestamp'] | undefined | null;
    _lte?: ResolverInputTypes['timestamp'] | undefined | null;
    _neq?: ResolverInputTypes['timestamp'] | undefined | null;
    _nin?: Array<ResolverInputTypes['timestamp']> | undefined | null;
  };
  ['timestamptz']: unknown;
  /** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
  ['timestamptz_comparison_exp']: {
    _eq?: ResolverInputTypes['timestamptz'] | undefined | null;
    _gt?: ResolverInputTypes['timestamptz'] | undefined | null;
    _gte?: ResolverInputTypes['timestamptz'] | undefined | null;
    _in?: Array<ResolverInputTypes['timestamptz']> | undefined | null;
    _is_null?: boolean | undefined | null;
    _lt?: ResolverInputTypes['timestamptz'] | undefined | null;
    _lte?: ResolverInputTypes['timestamptz'] | undefined | null;
    _neq?: ResolverInputTypes['timestamptz'] | undefined | null;
    _nin?: Array<ResolverInputTypes['timestamptz']> | undefined | null;
  };
  ['uuid']: unknown;
  /** Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'. */
  ['uuid_comparison_exp']: {
    _eq?: ResolverInputTypes['uuid'] | undefined | null;
    _gt?: ResolverInputTypes['uuid'] | undefined | null;
    _gte?: ResolverInputTypes['uuid'] | undefined | null;
    _in?: Array<ResolverInputTypes['uuid']> | undefined | null;
    _is_null?: boolean | undefined | null;
    _lt?: ResolverInputTypes['uuid'] | undefined | null;
    _lte?: ResolverInputTypes['uuid'] | undefined | null;
    _neq?: ResolverInputTypes['uuid'] | undefined | null;
    _nin?: Array<ResolverInputTypes['uuid']> | undefined | null;
  };
};

export type ModelTypes = {
  ['schema']: {
    query?: ModelTypes['query_root'] | undefined;
    mutation?: ModelTypes['mutation_root'] | undefined;
    subscription?: ModelTypes['subscription_root'] | undefined;
  };
  /** columns and relationships of "Application" */
  ['Application']: {
    /** An array relationship */
    applicationIntegrations: Array<ModelTypes['ApplicationIntegration']>;
    /** An aggregate relationship */
    applicationIntegrations_aggregate: ModelTypes['ApplicationIntegration_aggregate'];
    cursorId: ModelTypes['bigint'];
    description: string;
    id: string;
    name: string;
    objects: string;
    /** An array relationship */
    packages: Array<ModelTypes['PackageApplication']>;
    /** An aggregate relationship */
    packages_aggregate: ModelTypes['PackageApplication_aggregate'];
    roles: string;
  };
  /** columns and relationships of "ApplicationIntegration" */
  ['ApplicationIntegration']: {
    /** An object relationship */
    application: ModelTypes['Application'];
    applicationId: string;
    cursorId: ModelTypes['bigint'];
    description: string;
    id: ModelTypes['uuid'];
    menuName: string;
    menuURL: string;
    name: string;
    subMenus: string;
  };
  /** aggregated selection of "ApplicationIntegration" */
  ['ApplicationIntegration_aggregate']: {
    aggregate?:
      | ModelTypes['ApplicationIntegration_aggregate_fields']
      | undefined;
    nodes: Array<ModelTypes['ApplicationIntegration']>;
  };
  ['ApplicationIntegration_aggregate_bool_exp']: {
    count?:
      | ModelTypes['ApplicationIntegration_aggregate_bool_exp_count']
      | undefined;
  };
  ['ApplicationIntegration_aggregate_bool_exp_count']: {
    arguments?:
      | Array<ModelTypes['ApplicationIntegration_select_column']>
      | undefined;
    distinct?: boolean | undefined;
    filter?: ModelTypes['ApplicationIntegration_bool_exp'] | undefined;
    predicate: ModelTypes['Int_comparison_exp'];
  };
  /** aggregate fields of "ApplicationIntegration" */
  ['ApplicationIntegration_aggregate_fields']: {
    avg?: ModelTypes['ApplicationIntegration_avg_fields'] | undefined;
    count: number;
    max?: ModelTypes['ApplicationIntegration_max_fields'] | undefined;
    min?: ModelTypes['ApplicationIntegration_min_fields'] | undefined;
    stddev?: ModelTypes['ApplicationIntegration_stddev_fields'] | undefined;
    stddev_pop?:
      | ModelTypes['ApplicationIntegration_stddev_pop_fields']
      | undefined;
    stddev_samp?:
      | ModelTypes['ApplicationIntegration_stddev_samp_fields']
      | undefined;
    sum?: ModelTypes['ApplicationIntegration_sum_fields'] | undefined;
    var_pop?: ModelTypes['ApplicationIntegration_var_pop_fields'] | undefined;
    var_samp?: ModelTypes['ApplicationIntegration_var_samp_fields'] | undefined;
    variance?: ModelTypes['ApplicationIntegration_variance_fields'] | undefined;
  };
  /** order by aggregate values of table "ApplicationIntegration" */
  ['ApplicationIntegration_aggregate_order_by']: {
    avg?: ModelTypes['ApplicationIntegration_avg_order_by'] | undefined;
    count?: ModelTypes['order_by'] | undefined;
    max?: ModelTypes['ApplicationIntegration_max_order_by'] | undefined;
    min?: ModelTypes['ApplicationIntegration_min_order_by'] | undefined;
    stddev?: ModelTypes['ApplicationIntegration_stddev_order_by'] | undefined;
    stddev_pop?:
      | ModelTypes['ApplicationIntegration_stddev_pop_order_by']
      | undefined;
    stddev_samp?:
      | ModelTypes['ApplicationIntegration_stddev_samp_order_by']
      | undefined;
    sum?: ModelTypes['ApplicationIntegration_sum_order_by'] | undefined;
    var_pop?: ModelTypes['ApplicationIntegration_var_pop_order_by'] | undefined;
    var_samp?:
      | ModelTypes['ApplicationIntegration_var_samp_order_by']
      | undefined;
    variance?:
      | ModelTypes['ApplicationIntegration_variance_order_by']
      | undefined;
  };
  /** input type for inserting array relation for remote table "ApplicationIntegration" */
  ['ApplicationIntegration_arr_rel_insert_input']: {
    data: Array<ModelTypes['ApplicationIntegration_insert_input']>;
    /** upsert condition */
    on_conflict?: ModelTypes['ApplicationIntegration_on_conflict'] | undefined;
  };
  /** aggregate avg on columns */
  ['ApplicationIntegration_avg_fields']: {
    cursorId?: number | undefined;
  };
  /** order by avg() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_avg_order_by']: {
    cursorId?: ModelTypes['order_by'] | undefined;
  };
  /** Boolean expression to filter rows from the table "ApplicationIntegration". All fields are combined with a logical 'AND'. */
  ['ApplicationIntegration_bool_exp']: {
    _and?: Array<ModelTypes['ApplicationIntegration_bool_exp']> | undefined;
    _not?: ModelTypes['ApplicationIntegration_bool_exp'] | undefined;
    _or?: Array<ModelTypes['ApplicationIntegration_bool_exp']> | undefined;
    application?: ModelTypes['Application_bool_exp'] | undefined;
    applicationId?: ModelTypes['String_comparison_exp'] | undefined;
    cursorId?: ModelTypes['bigint_comparison_exp'] | undefined;
    description?: ModelTypes['String_comparison_exp'] | undefined;
    id?: ModelTypes['uuid_comparison_exp'] | undefined;
    menuName?: ModelTypes['String_comparison_exp'] | undefined;
    menuURL?: ModelTypes['String_comparison_exp'] | undefined;
    name?: ModelTypes['String_comparison_exp'] | undefined;
    subMenus?: ModelTypes['String_comparison_exp'] | undefined;
  };
  ['ApplicationIntegration_constraint']: ApplicationIntegration_constraint;
  /** input type for incrementing numeric columns in table "ApplicationIntegration" */
  ['ApplicationIntegration_inc_input']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "ApplicationIntegration" */
  ['ApplicationIntegration_insert_input']: {
    application?: ModelTypes['Application_obj_rel_insert_input'] | undefined;
    applicationId?: string | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    menuName?: string | undefined;
    menuURL?: string | undefined;
    name?: string | undefined;
    subMenus?: string | undefined;
  };
  /** aggregate max on columns */
  ['ApplicationIntegration_max_fields']: {
    applicationId?: string | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    menuName?: string | undefined;
    menuURL?: string | undefined;
    name?: string | undefined;
    subMenus?: string | undefined;
  };
  /** order by max() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_max_order_by']: {
    applicationId?: ModelTypes['order_by'] | undefined;
    cursorId?: ModelTypes['order_by'] | undefined;
    description?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    menuName?: ModelTypes['order_by'] | undefined;
    menuURL?: ModelTypes['order_by'] | undefined;
    name?: ModelTypes['order_by'] | undefined;
    subMenus?: ModelTypes['order_by'] | undefined;
  };
  /** aggregate min on columns */
  ['ApplicationIntegration_min_fields']: {
    applicationId?: string | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    menuName?: string | undefined;
    menuURL?: string | undefined;
    name?: string | undefined;
    subMenus?: string | undefined;
  };
  /** order by min() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_min_order_by']: {
    applicationId?: ModelTypes['order_by'] | undefined;
    cursorId?: ModelTypes['order_by'] | undefined;
    description?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    menuName?: ModelTypes['order_by'] | undefined;
    menuURL?: ModelTypes['order_by'] | undefined;
    name?: ModelTypes['order_by'] | undefined;
    subMenus?: ModelTypes['order_by'] | undefined;
  };
  /** response of any mutation on the table "ApplicationIntegration" */
  ['ApplicationIntegration_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<ModelTypes['ApplicationIntegration']>;
  };
  /** on_conflict condition type for table "ApplicationIntegration" */
  ['ApplicationIntegration_on_conflict']: {
    constraint: ModelTypes['ApplicationIntegration_constraint'];
    update_columns: Array<ModelTypes['ApplicationIntegration_update_column']>;
    where?: ModelTypes['ApplicationIntegration_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "ApplicationIntegration". */
  ['ApplicationIntegration_order_by']: {
    application?: ModelTypes['Application_order_by'] | undefined;
    applicationId?: ModelTypes['order_by'] | undefined;
    cursorId?: ModelTypes['order_by'] | undefined;
    description?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    menuName?: ModelTypes['order_by'] | undefined;
    menuURL?: ModelTypes['order_by'] | undefined;
    name?: ModelTypes['order_by'] | undefined;
    subMenus?: ModelTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: ApplicationIntegration */
  ['ApplicationIntegration_pk_columns_input']: {
    id: ModelTypes['uuid'];
  };
  ['ApplicationIntegration_select_column']: ApplicationIntegration_select_column;
  /** input type for updating data in table "ApplicationIntegration" */
  ['ApplicationIntegration_set_input']: {
    applicationId?: string | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    menuName?: string | undefined;
    menuURL?: string | undefined;
    name?: string | undefined;
    subMenus?: string | undefined;
  };
  /** aggregate stddev on columns */
  ['ApplicationIntegration_stddev_fields']: {
    cursorId?: number | undefined;
  };
  /** order by stddev() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_stddev_order_by']: {
    cursorId?: ModelTypes['order_by'] | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['ApplicationIntegration_stddev_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** order by stddev_pop() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_stddev_pop_order_by']: {
    cursorId?: ModelTypes['order_by'] | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['ApplicationIntegration_stddev_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** order by stddev_samp() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_stddev_samp_order_by']: {
    cursorId?: ModelTypes['order_by'] | undefined;
  };
  /** Streaming cursor of the table "ApplicationIntegration" */
  ['ApplicationIntegration_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ModelTypes['ApplicationIntegration_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ModelTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['ApplicationIntegration_stream_cursor_value_input']: {
    applicationId?: string | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    menuName?: string | undefined;
    menuURL?: string | undefined;
    name?: string | undefined;
    subMenus?: string | undefined;
  };
  /** aggregate sum on columns */
  ['ApplicationIntegration_sum_fields']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  /** order by sum() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_sum_order_by']: {
    cursorId?: ModelTypes['order_by'] | undefined;
  };
  ['ApplicationIntegration_update_column']: ApplicationIntegration_update_column;
  ['ApplicationIntegration_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: ModelTypes['ApplicationIntegration_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: ModelTypes['ApplicationIntegration_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: ModelTypes['ApplicationIntegration_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['ApplicationIntegration_var_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** order by var_pop() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_var_pop_order_by']: {
    cursorId?: ModelTypes['order_by'] | undefined;
  };
  /** aggregate var_samp on columns */
  ['ApplicationIntegration_var_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** order by var_samp() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_var_samp_order_by']: {
    cursorId?: ModelTypes['order_by'] | undefined;
  };
  /** aggregate variance on columns */
  ['ApplicationIntegration_variance_fields']: {
    cursorId?: number | undefined;
  };
  /** order by variance() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_variance_order_by']: {
    cursorId?: ModelTypes['order_by'] | undefined;
  };
  /** aggregated selection of "Application" */
  ['Application_aggregate']: {
    aggregate?: ModelTypes['Application_aggregate_fields'] | undefined;
    nodes: Array<ModelTypes['Application']>;
  };
  /** aggregate fields of "Application" */
  ['Application_aggregate_fields']: {
    avg?: ModelTypes['Application_avg_fields'] | undefined;
    count: number;
    max?: ModelTypes['Application_max_fields'] | undefined;
    min?: ModelTypes['Application_min_fields'] | undefined;
    stddev?: ModelTypes['Application_stddev_fields'] | undefined;
    stddev_pop?: ModelTypes['Application_stddev_pop_fields'] | undefined;
    stddev_samp?: ModelTypes['Application_stddev_samp_fields'] | undefined;
    sum?: ModelTypes['Application_sum_fields'] | undefined;
    var_pop?: ModelTypes['Application_var_pop_fields'] | undefined;
    var_samp?: ModelTypes['Application_var_samp_fields'] | undefined;
    variance?: ModelTypes['Application_variance_fields'] | undefined;
  };
  /** aggregate avg on columns */
  ['Application_avg_fields']: {
    cursorId?: number | undefined;
  };
  /** Boolean expression to filter rows from the table "Application". All fields are combined with a logical 'AND'. */
  ['Application_bool_exp']: {
    _and?: Array<ModelTypes['Application_bool_exp']> | undefined;
    _not?: ModelTypes['Application_bool_exp'] | undefined;
    _or?: Array<ModelTypes['Application_bool_exp']> | undefined;
    applicationIntegrations?:
      | ModelTypes['ApplicationIntegration_bool_exp']
      | undefined;
    applicationIntegrations_aggregate?:
      | ModelTypes['ApplicationIntegration_aggregate_bool_exp']
      | undefined;
    cursorId?: ModelTypes['bigint_comparison_exp'] | undefined;
    description?: ModelTypes['String_comparison_exp'] | undefined;
    id?: ModelTypes['String_comparison_exp'] | undefined;
    name?: ModelTypes['String_comparison_exp'] | undefined;
    objects?: ModelTypes['String_comparison_exp'] | undefined;
    packages?: ModelTypes['PackageApplication_bool_exp'] | undefined;
    packages_aggregate?:
      | ModelTypes['PackageApplication_aggregate_bool_exp']
      | undefined;
    roles?: ModelTypes['String_comparison_exp'] | undefined;
  };
  ['Application_constraint']: Application_constraint;
  /** input type for incrementing numeric columns in table "Application" */
  ['Application_inc_input']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "Application" */
  ['Application_insert_input']: {
    applicationIntegrations?:
      | ModelTypes['ApplicationIntegration_arr_rel_insert_input']
      | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    objects?: string | undefined;
    packages?:
      | ModelTypes['PackageApplication_arr_rel_insert_input']
      | undefined;
    roles?: string | undefined;
  };
  /** aggregate max on columns */
  ['Application_max_fields']: {
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    objects?: string | undefined;
    roles?: string | undefined;
  };
  /** aggregate min on columns */
  ['Application_min_fields']: {
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    objects?: string | undefined;
    roles?: string | undefined;
  };
  /** response of any mutation on the table "Application" */
  ['Application_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<ModelTypes['Application']>;
  };
  /** input type for inserting object relation for remote table "Application" */
  ['Application_obj_rel_insert_input']: {
    data: ModelTypes['Application_insert_input'];
    /** upsert condition */
    on_conflict?: ModelTypes['Application_on_conflict'] | undefined;
  };
  /** on_conflict condition type for table "Application" */
  ['Application_on_conflict']: {
    constraint: ModelTypes['Application_constraint'];
    update_columns: Array<ModelTypes['Application_update_column']>;
    where?: ModelTypes['Application_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "Application". */
  ['Application_order_by']: {
    applicationIntegrations_aggregate?:
      | ModelTypes['ApplicationIntegration_aggregate_order_by']
      | undefined;
    cursorId?: ModelTypes['order_by'] | undefined;
    description?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    name?: ModelTypes['order_by'] | undefined;
    objects?: ModelTypes['order_by'] | undefined;
    packages_aggregate?:
      | ModelTypes['PackageApplication_aggregate_order_by']
      | undefined;
    roles?: ModelTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: Application */
  ['Application_pk_columns_input']: {
    id: string;
  };
  ['Application_select_column']: Application_select_column;
  /** input type for updating data in table "Application" */
  ['Application_set_input']: {
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    objects?: string | undefined;
    roles?: string | undefined;
  };
  /** aggregate stddev on columns */
  ['Application_stddev_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['Application_stddev_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['Application_stddev_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** Streaming cursor of the table "Application" */
  ['Application_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ModelTypes['Application_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ModelTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['Application_stream_cursor_value_input']: {
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    objects?: string | undefined;
    roles?: string | undefined;
  };
  /** aggregate sum on columns */
  ['Application_sum_fields']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  ['Application_update_column']: Application_update_column;
  ['Application_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: ModelTypes['Application_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: ModelTypes['Application_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: ModelTypes['Application_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['Application_var_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate var_samp on columns */
  ['Application_var_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate variance on columns */
  ['Application_variance_fields']: {
    cursorId?: number | undefined;
  };
  /** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
  ['Boolean_comparison_exp']: {
    _eq?: boolean | undefined;
    _gt?: boolean | undefined;
    _gte?: boolean | undefined;
    _in?: Array<boolean> | undefined;
    _is_null?: boolean | undefined;
    _lt?: boolean | undefined;
    _lte?: boolean | undefined;
    _neq?: boolean | undefined;
    _nin?: Array<boolean> | undefined;
  };
  /** columns and relationships of "CaseSeverity" */
  ['CaseSeverity']: {
    createdAt: ModelTypes['timestamptz'];
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId: ModelTypes['bigint'];
    description: string;
    id: ModelTypes['uuid'];
    name: string;
    status: ModelTypes['Status_enum'];
    tenantId: ModelTypes['uuid'];
    updatedAt: ModelTypes['timestamptz'];
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregated selection of "CaseSeverity" */
  ['CaseSeverity_aggregate']: {
    aggregate?: ModelTypes['CaseSeverity_aggregate_fields'] | undefined;
    nodes: Array<ModelTypes['CaseSeverity']>;
  };
  /** aggregate fields of "CaseSeverity" */
  ['CaseSeverity_aggregate_fields']: {
    avg?: ModelTypes['CaseSeverity_avg_fields'] | undefined;
    count: number;
    max?: ModelTypes['CaseSeverity_max_fields'] | undefined;
    min?: ModelTypes['CaseSeverity_min_fields'] | undefined;
    stddev?: ModelTypes['CaseSeverity_stddev_fields'] | undefined;
    stddev_pop?: ModelTypes['CaseSeverity_stddev_pop_fields'] | undefined;
    stddev_samp?: ModelTypes['CaseSeverity_stddev_samp_fields'] | undefined;
    sum?: ModelTypes['CaseSeverity_sum_fields'] | undefined;
    var_pop?: ModelTypes['CaseSeverity_var_pop_fields'] | undefined;
    var_samp?: ModelTypes['CaseSeverity_var_samp_fields'] | undefined;
    variance?: ModelTypes['CaseSeverity_variance_fields'] | undefined;
  };
  /** aggregate avg on columns */
  ['CaseSeverity_avg_fields']: {
    cursorId?: number | undefined;
  };
  /** Boolean expression to filter rows from the table "CaseSeverity". All fields are combined with a logical 'AND'. */
  ['CaseSeverity_bool_exp']: {
    _and?: Array<ModelTypes['CaseSeverity_bool_exp']> | undefined;
    _not?: ModelTypes['CaseSeverity_bool_exp'] | undefined;
    _or?: Array<ModelTypes['CaseSeverity_bool_exp']> | undefined;
    createdAt?: ModelTypes['timestamptz_comparison_exp'] | undefined;
    createdById?: ModelTypes['uuid_comparison_exp'] | undefined;
    cursorId?: ModelTypes['bigint_comparison_exp'] | undefined;
    description?: ModelTypes['String_comparison_exp'] | undefined;
    id?: ModelTypes['uuid_comparison_exp'] | undefined;
    name?: ModelTypes['String_comparison_exp'] | undefined;
    status?: ModelTypes['Status_enum_comparison_exp'] | undefined;
    tenantId?: ModelTypes['uuid_comparison_exp'] | undefined;
    updatedAt?: ModelTypes['timestamptz_comparison_exp'] | undefined;
    updatedById?: ModelTypes['uuid_comparison_exp'] | undefined;
  };
  ['CaseSeverity_constraint']: CaseSeverity_constraint;
  /** input type for incrementing numeric columns in table "CaseSeverity" */
  ['CaseSeverity_inc_input']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "CaseSeverity" */
  ['CaseSeverity_insert_input']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate max on columns */
  ['CaseSeverity_max_fields']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate min on columns */
  ['CaseSeverity_min_fields']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** response of any mutation on the table "CaseSeverity" */
  ['CaseSeverity_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<ModelTypes['CaseSeverity']>;
  };
  /** on_conflict condition type for table "CaseSeverity" */
  ['CaseSeverity_on_conflict']: {
    constraint: ModelTypes['CaseSeverity_constraint'];
    update_columns: Array<ModelTypes['CaseSeverity_update_column']>;
    where?: ModelTypes['CaseSeverity_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "CaseSeverity". */
  ['CaseSeverity_order_by']: {
    createdAt?: ModelTypes['order_by'] | undefined;
    createdById?: ModelTypes['order_by'] | undefined;
    cursorId?: ModelTypes['order_by'] | undefined;
    description?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    name?: ModelTypes['order_by'] | undefined;
    status?: ModelTypes['order_by'] | undefined;
    tenantId?: ModelTypes['order_by'] | undefined;
    updatedAt?: ModelTypes['order_by'] | undefined;
    updatedById?: ModelTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: CaseSeverity */
  ['CaseSeverity_pk_columns_input']: {
    id: ModelTypes['uuid'];
  };
  ['CaseSeverity_select_column']: CaseSeverity_select_column;
  /** input type for updating data in table "CaseSeverity" */
  ['CaseSeverity_set_input']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate stddev on columns */
  ['CaseSeverity_stddev_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['CaseSeverity_stddev_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['CaseSeverity_stddev_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** Streaming cursor of the table "CaseSeverity" */
  ['CaseSeverity_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ModelTypes['CaseSeverity_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ModelTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['CaseSeverity_stream_cursor_value_input']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate sum on columns */
  ['CaseSeverity_sum_fields']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  ['CaseSeverity_update_column']: CaseSeverity_update_column;
  ['CaseSeverity_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: ModelTypes['CaseSeverity_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: ModelTypes['CaseSeverity_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: ModelTypes['CaseSeverity_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['CaseSeverity_var_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate var_samp on columns */
  ['CaseSeverity_var_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate variance on columns */
  ['CaseSeverity_variance_fields']: {
    cursorId?: number | undefined;
  };
  /** columns and relationships of "ClosureReason" */
  ['ClosureReason']: {
    createdAt: ModelTypes['timestamptz'];
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId: ModelTypes['bigint'];
    description: string;
    id: ModelTypes['uuid'];
    name: string;
    status: ModelTypes['Status_enum'];
    tenantId: ModelTypes['uuid'];
    updatedAt: ModelTypes['timestamptz'];
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregated selection of "ClosureReason" */
  ['ClosureReason_aggregate']: {
    aggregate?: ModelTypes['ClosureReason_aggregate_fields'] | undefined;
    nodes: Array<ModelTypes['ClosureReason']>;
  };
  /** aggregate fields of "ClosureReason" */
  ['ClosureReason_aggregate_fields']: {
    avg?: ModelTypes['ClosureReason_avg_fields'] | undefined;
    count: number;
    max?: ModelTypes['ClosureReason_max_fields'] | undefined;
    min?: ModelTypes['ClosureReason_min_fields'] | undefined;
    stddev?: ModelTypes['ClosureReason_stddev_fields'] | undefined;
    stddev_pop?: ModelTypes['ClosureReason_stddev_pop_fields'] | undefined;
    stddev_samp?: ModelTypes['ClosureReason_stddev_samp_fields'] | undefined;
    sum?: ModelTypes['ClosureReason_sum_fields'] | undefined;
    var_pop?: ModelTypes['ClosureReason_var_pop_fields'] | undefined;
    var_samp?: ModelTypes['ClosureReason_var_samp_fields'] | undefined;
    variance?: ModelTypes['ClosureReason_variance_fields'] | undefined;
  };
  /** aggregate avg on columns */
  ['ClosureReason_avg_fields']: {
    cursorId?: number | undefined;
  };
  /** Boolean expression to filter rows from the table "ClosureReason". All fields are combined with a logical 'AND'. */
  ['ClosureReason_bool_exp']: {
    _and?: Array<ModelTypes['ClosureReason_bool_exp']> | undefined;
    _not?: ModelTypes['ClosureReason_bool_exp'] | undefined;
    _or?: Array<ModelTypes['ClosureReason_bool_exp']> | undefined;
    createdAt?: ModelTypes['timestamptz_comparison_exp'] | undefined;
    createdById?: ModelTypes['uuid_comparison_exp'] | undefined;
    cursorId?: ModelTypes['bigint_comparison_exp'] | undefined;
    description?: ModelTypes['String_comparison_exp'] | undefined;
    id?: ModelTypes['uuid_comparison_exp'] | undefined;
    name?: ModelTypes['String_comparison_exp'] | undefined;
    status?: ModelTypes['Status_enum_comparison_exp'] | undefined;
    tenantId?: ModelTypes['uuid_comparison_exp'] | undefined;
    updatedAt?: ModelTypes['timestamptz_comparison_exp'] | undefined;
    updatedById?: ModelTypes['uuid_comparison_exp'] | undefined;
  };
  ['ClosureReason_constraint']: ClosureReason_constraint;
  /** input type for incrementing numeric columns in table "ClosureReason" */
  ['ClosureReason_inc_input']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "ClosureReason" */
  ['ClosureReason_insert_input']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate max on columns */
  ['ClosureReason_max_fields']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate min on columns */
  ['ClosureReason_min_fields']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** response of any mutation on the table "ClosureReason" */
  ['ClosureReason_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<ModelTypes['ClosureReason']>;
  };
  /** on_conflict condition type for table "ClosureReason" */
  ['ClosureReason_on_conflict']: {
    constraint: ModelTypes['ClosureReason_constraint'];
    update_columns: Array<ModelTypes['ClosureReason_update_column']>;
    where?: ModelTypes['ClosureReason_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "ClosureReason". */
  ['ClosureReason_order_by']: {
    createdAt?: ModelTypes['order_by'] | undefined;
    createdById?: ModelTypes['order_by'] | undefined;
    cursorId?: ModelTypes['order_by'] | undefined;
    description?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    name?: ModelTypes['order_by'] | undefined;
    status?: ModelTypes['order_by'] | undefined;
    tenantId?: ModelTypes['order_by'] | undefined;
    updatedAt?: ModelTypes['order_by'] | undefined;
    updatedById?: ModelTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: ClosureReason */
  ['ClosureReason_pk_columns_input']: {
    id: ModelTypes['uuid'];
  };
  ['ClosureReason_select_column']: ClosureReason_select_column;
  /** input type for updating data in table "ClosureReason" */
  ['ClosureReason_set_input']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate stddev on columns */
  ['ClosureReason_stddev_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['ClosureReason_stddev_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['ClosureReason_stddev_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** Streaming cursor of the table "ClosureReason" */
  ['ClosureReason_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ModelTypes['ClosureReason_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ModelTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['ClosureReason_stream_cursor_value_input']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate sum on columns */
  ['ClosureReason_sum_fields']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  ['ClosureReason_update_column']: ClosureReason_update_column;
  ['ClosureReason_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: ModelTypes['ClosureReason_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: ModelTypes['ClosureReason_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: ModelTypes['ClosureReason_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['ClosureReason_var_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate var_samp on columns */
  ['ClosureReason_var_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate variance on columns */
  ['ClosureReason_variance_fields']: {
    cursorId?: number | undefined;
  };
  /** columns and relationships of "Currency" */
  ['Currency']: {
    code: string;
    country: string;
    createdAt: ModelTypes['timestamp'];
    exchangeRate: string;
    id: ModelTypes['uuid'];
    name: string;
    status: ModelTypes['Status_enum'];
    tenantId: ModelTypes['uuid'];
    updatedAt: ModelTypes['timestamp'];
  };
  /** aggregated selection of "Currency" */
  ['Currency_aggregate']: {
    aggregate?: ModelTypes['Currency_aggregate_fields'] | undefined;
    nodes: Array<ModelTypes['Currency']>;
  };
  /** aggregate fields of "Currency" */
  ['Currency_aggregate_fields']: {
    count: number;
    max?: ModelTypes['Currency_max_fields'] | undefined;
    min?: ModelTypes['Currency_min_fields'] | undefined;
  };
  /** Boolean expression to filter rows from the table "Currency". All fields are combined with a logical 'AND'. */
  ['Currency_bool_exp']: {
    _and?: Array<ModelTypes['Currency_bool_exp']> | undefined;
    _not?: ModelTypes['Currency_bool_exp'] | undefined;
    _or?: Array<ModelTypes['Currency_bool_exp']> | undefined;
    code?: ModelTypes['String_comparison_exp'] | undefined;
    country?: ModelTypes['String_comparison_exp'] | undefined;
    createdAt?: ModelTypes['timestamp_comparison_exp'] | undefined;
    exchangeRate?: ModelTypes['String_comparison_exp'] | undefined;
    id?: ModelTypes['uuid_comparison_exp'] | undefined;
    name?: ModelTypes['String_comparison_exp'] | undefined;
    status?: ModelTypes['Status_enum_comparison_exp'] | undefined;
    tenantId?: ModelTypes['uuid_comparison_exp'] | undefined;
    updatedAt?: ModelTypes['timestamp_comparison_exp'] | undefined;
  };
  ['Currency_constraint']: Currency_constraint;
  /** input type for inserting data into table "Currency" */
  ['Currency_insert_input']: {
    code?: string | undefined;
    country?: string | undefined;
    createdAt?: ModelTypes['timestamp'] | undefined;
    exchangeRate?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamp'] | undefined;
  };
  /** aggregate max on columns */
  ['Currency_max_fields']: {
    code?: string | undefined;
    country?: string | undefined;
    createdAt?: ModelTypes['timestamp'] | undefined;
    exchangeRate?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamp'] | undefined;
  };
  /** aggregate min on columns */
  ['Currency_min_fields']: {
    code?: string | undefined;
    country?: string | undefined;
    createdAt?: ModelTypes['timestamp'] | undefined;
    exchangeRate?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamp'] | undefined;
  };
  /** response of any mutation on the table "Currency" */
  ['Currency_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<ModelTypes['Currency']>;
  };
  /** on_conflict condition type for table "Currency" */
  ['Currency_on_conflict']: {
    constraint: ModelTypes['Currency_constraint'];
    update_columns: Array<ModelTypes['Currency_update_column']>;
    where?: ModelTypes['Currency_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "Currency". */
  ['Currency_order_by']: {
    code?: ModelTypes['order_by'] | undefined;
    country?: ModelTypes['order_by'] | undefined;
    createdAt?: ModelTypes['order_by'] | undefined;
    exchangeRate?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    name?: ModelTypes['order_by'] | undefined;
    status?: ModelTypes['order_by'] | undefined;
    tenantId?: ModelTypes['order_by'] | undefined;
    updatedAt?: ModelTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: Currency */
  ['Currency_pk_columns_input']: {
    id: ModelTypes['uuid'];
  };
  ['Currency_select_column']: Currency_select_column;
  /** input type for updating data in table "Currency" */
  ['Currency_set_input']: {
    code?: string | undefined;
    country?: string | undefined;
    createdAt?: ModelTypes['timestamp'] | undefined;
    exchangeRate?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamp'] | undefined;
  };
  /** Streaming cursor of the table "Currency" */
  ['Currency_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ModelTypes['Currency_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ModelTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['Currency_stream_cursor_value_input']: {
    code?: string | undefined;
    country?: string | undefined;
    createdAt?: ModelTypes['timestamp'] | undefined;
    exchangeRate?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamp'] | undefined;
  };
  ['Currency_update_column']: Currency_update_column;
  ['Currency_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: ModelTypes['Currency_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: ModelTypes['Currency_bool_exp'];
  };
  /** columns and relationships of "CustomRole" */
  ['CustomRole']: {
    createdAt: ModelTypes['timestamptz'];
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId: ModelTypes['bigint'];
    description: string;
    id: ModelTypes['uuid'];
    name: string;
    status: ModelTypes['Status_enum'];
    tenantId: ModelTypes['uuid'];
    updatedAt: ModelTypes['timestamptz'];
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregated selection of "CustomRole" */
  ['CustomRole_aggregate']: {
    aggregate?: ModelTypes['CustomRole_aggregate_fields'] | undefined;
    nodes: Array<ModelTypes['CustomRole']>;
  };
  /** aggregate fields of "CustomRole" */
  ['CustomRole_aggregate_fields']: {
    avg?: ModelTypes['CustomRole_avg_fields'] | undefined;
    count: number;
    max?: ModelTypes['CustomRole_max_fields'] | undefined;
    min?: ModelTypes['CustomRole_min_fields'] | undefined;
    stddev?: ModelTypes['CustomRole_stddev_fields'] | undefined;
    stddev_pop?: ModelTypes['CustomRole_stddev_pop_fields'] | undefined;
    stddev_samp?: ModelTypes['CustomRole_stddev_samp_fields'] | undefined;
    sum?: ModelTypes['CustomRole_sum_fields'] | undefined;
    var_pop?: ModelTypes['CustomRole_var_pop_fields'] | undefined;
    var_samp?: ModelTypes['CustomRole_var_samp_fields'] | undefined;
    variance?: ModelTypes['CustomRole_variance_fields'] | undefined;
  };
  /** aggregate avg on columns */
  ['CustomRole_avg_fields']: {
    cursorId?: number | undefined;
  };
  /** Boolean expression to filter rows from the table "CustomRole". All fields are combined with a logical 'AND'. */
  ['CustomRole_bool_exp']: {
    _and?: Array<ModelTypes['CustomRole_bool_exp']> | undefined;
    _not?: ModelTypes['CustomRole_bool_exp'] | undefined;
    _or?: Array<ModelTypes['CustomRole_bool_exp']> | undefined;
    createdAt?: ModelTypes['timestamptz_comparison_exp'] | undefined;
    createdById?: ModelTypes['uuid_comparison_exp'] | undefined;
    cursorId?: ModelTypes['bigint_comparison_exp'] | undefined;
    description?: ModelTypes['String_comparison_exp'] | undefined;
    id?: ModelTypes['uuid_comparison_exp'] | undefined;
    name?: ModelTypes['String_comparison_exp'] | undefined;
    status?: ModelTypes['Status_enum_comparison_exp'] | undefined;
    tenantId?: ModelTypes['uuid_comparison_exp'] | undefined;
    updatedAt?: ModelTypes['timestamptz_comparison_exp'] | undefined;
    updatedById?: ModelTypes['uuid_comparison_exp'] | undefined;
  };
  ['CustomRole_constraint']: CustomRole_constraint;
  /** input type for incrementing numeric columns in table "CustomRole" */
  ['CustomRole_inc_input']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "CustomRole" */
  ['CustomRole_insert_input']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate max on columns */
  ['CustomRole_max_fields']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate min on columns */
  ['CustomRole_min_fields']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** response of any mutation on the table "CustomRole" */
  ['CustomRole_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<ModelTypes['CustomRole']>;
  };
  /** on_conflict condition type for table "CustomRole" */
  ['CustomRole_on_conflict']: {
    constraint: ModelTypes['CustomRole_constraint'];
    update_columns: Array<ModelTypes['CustomRole_update_column']>;
    where?: ModelTypes['CustomRole_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "CustomRole". */
  ['CustomRole_order_by']: {
    createdAt?: ModelTypes['order_by'] | undefined;
    createdById?: ModelTypes['order_by'] | undefined;
    cursorId?: ModelTypes['order_by'] | undefined;
    description?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    name?: ModelTypes['order_by'] | undefined;
    status?: ModelTypes['order_by'] | undefined;
    tenantId?: ModelTypes['order_by'] | undefined;
    updatedAt?: ModelTypes['order_by'] | undefined;
    updatedById?: ModelTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: CustomRole */
  ['CustomRole_pk_columns_input']: {
    id: ModelTypes['uuid'];
  };
  ['CustomRole_select_column']: CustomRole_select_column;
  /** input type for updating data in table "CustomRole" */
  ['CustomRole_set_input']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate stddev on columns */
  ['CustomRole_stddev_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['CustomRole_stddev_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['CustomRole_stddev_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** Streaming cursor of the table "CustomRole" */
  ['CustomRole_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ModelTypes['CustomRole_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ModelTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['CustomRole_stream_cursor_value_input']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate sum on columns */
  ['CustomRole_sum_fields']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  ['CustomRole_update_column']: CustomRole_update_column;
  ['CustomRole_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: ModelTypes['CustomRole_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: ModelTypes['CustomRole_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: ModelTypes['CustomRole_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['CustomRole_var_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate var_samp on columns */
  ['CustomRole_var_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate variance on columns */
  ['CustomRole_variance_fields']: {
    cursorId?: number | undefined;
  };
  /** columns and relationships of "Group" */
  ['Group']: {
    createdBy: ModelTypes['uuid'];
    created_at: ModelTypes['timestamptz'];
    cursorId: ModelTypes['bigint'];
    description: string;
    id: ModelTypes['uuid'];
    lastModifiedBy: ModelTypes['uuid'];
    name: string;
    role: string;
    /** An array relationship */
    roles: Array<ModelTypes['GroupRole']>;
    /** An aggregate relationship */
    roles_aggregate: ModelTypes['GroupRole_aggregate'];
    status: ModelTypes['Status_enum'];
    tenantId: ModelTypes['uuid'];
    updated_at: ModelTypes['timestamptz'];
    /** An array relationship */
    users: Array<ModelTypes['UserGroup']>;
    /** An aggregate relationship */
    users_aggregate: ModelTypes['UserGroup_aggregate'];
  };
  /** columns and relationships of "GroupRole" */
  ['GroupRole']: {
    /** An object relationship */
    group: ModelTypes['Group'];
    groupId: ModelTypes['uuid'];
    id: ModelTypes['uuid'];
    /** An object relationship */
    role: ModelTypes['Role'];
    roleId: ModelTypes['uuid'];
  };
  /** aggregated selection of "GroupRole" */
  ['GroupRole_aggregate']: {
    aggregate?: ModelTypes['GroupRole_aggregate_fields'] | undefined;
    nodes: Array<ModelTypes['GroupRole']>;
  };
  ['GroupRole_aggregate_bool_exp']: {
    count?: ModelTypes['GroupRole_aggregate_bool_exp_count'] | undefined;
  };
  ['GroupRole_aggregate_bool_exp_count']: {
    arguments?: Array<ModelTypes['GroupRole_select_column']> | undefined;
    distinct?: boolean | undefined;
    filter?: ModelTypes['GroupRole_bool_exp'] | undefined;
    predicate: ModelTypes['Int_comparison_exp'];
  };
  /** aggregate fields of "GroupRole" */
  ['GroupRole_aggregate_fields']: {
    count: number;
    max?: ModelTypes['GroupRole_max_fields'] | undefined;
    min?: ModelTypes['GroupRole_min_fields'] | undefined;
  };
  /** order by aggregate values of table "GroupRole" */
  ['GroupRole_aggregate_order_by']: {
    count?: ModelTypes['order_by'] | undefined;
    max?: ModelTypes['GroupRole_max_order_by'] | undefined;
    min?: ModelTypes['GroupRole_min_order_by'] | undefined;
  };
  /** input type for inserting array relation for remote table "GroupRole" */
  ['GroupRole_arr_rel_insert_input']: {
    data: Array<ModelTypes['GroupRole_insert_input']>;
    /** upsert condition */
    on_conflict?: ModelTypes['GroupRole_on_conflict'] | undefined;
  };
  /** Boolean expression to filter rows from the table "GroupRole". All fields are combined with a logical 'AND'. */
  ['GroupRole_bool_exp']: {
    _and?: Array<ModelTypes['GroupRole_bool_exp']> | undefined;
    _not?: ModelTypes['GroupRole_bool_exp'] | undefined;
    _or?: Array<ModelTypes['GroupRole_bool_exp']> | undefined;
    group?: ModelTypes['Group_bool_exp'] | undefined;
    groupId?: ModelTypes['uuid_comparison_exp'] | undefined;
    id?: ModelTypes['uuid_comparison_exp'] | undefined;
    role?: ModelTypes['Role_bool_exp'] | undefined;
    roleId?: ModelTypes['uuid_comparison_exp'] | undefined;
  };
  ['GroupRole_constraint']: GroupRole_constraint;
  /** input type for inserting data into table "GroupRole" */
  ['GroupRole_insert_input']: {
    group?: ModelTypes['Group_obj_rel_insert_input'] | undefined;
    groupId?: ModelTypes['uuid'] | undefined;
    id?: ModelTypes['uuid'] | undefined;
    role?: ModelTypes['Role_obj_rel_insert_input'] | undefined;
    roleId?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate max on columns */
  ['GroupRole_max_fields']: {
    groupId?: ModelTypes['uuid'] | undefined;
    id?: ModelTypes['uuid'] | undefined;
    roleId?: ModelTypes['uuid'] | undefined;
  };
  /** order by max() on columns of table "GroupRole" */
  ['GroupRole_max_order_by']: {
    groupId?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    roleId?: ModelTypes['order_by'] | undefined;
  };
  /** aggregate min on columns */
  ['GroupRole_min_fields']: {
    groupId?: ModelTypes['uuid'] | undefined;
    id?: ModelTypes['uuid'] | undefined;
    roleId?: ModelTypes['uuid'] | undefined;
  };
  /** order by min() on columns of table "GroupRole" */
  ['GroupRole_min_order_by']: {
    groupId?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    roleId?: ModelTypes['order_by'] | undefined;
  };
  /** response of any mutation on the table "GroupRole" */
  ['GroupRole_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<ModelTypes['GroupRole']>;
  };
  /** on_conflict condition type for table "GroupRole" */
  ['GroupRole_on_conflict']: {
    constraint: ModelTypes['GroupRole_constraint'];
    update_columns: Array<ModelTypes['GroupRole_update_column']>;
    where?: ModelTypes['GroupRole_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "GroupRole". */
  ['GroupRole_order_by']: {
    group?: ModelTypes['Group_order_by'] | undefined;
    groupId?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    role?: ModelTypes['Role_order_by'] | undefined;
    roleId?: ModelTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: GroupRole */
  ['GroupRole_pk_columns_input']: {
    id: ModelTypes['uuid'];
  };
  ['GroupRole_select_column']: GroupRole_select_column;
  /** input type for updating data in table "GroupRole" */
  ['GroupRole_set_input']: {
    groupId?: ModelTypes['uuid'] | undefined;
    id?: ModelTypes['uuid'] | undefined;
    roleId?: ModelTypes['uuid'] | undefined;
  };
  /** Streaming cursor of the table "GroupRole" */
  ['GroupRole_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ModelTypes['GroupRole_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ModelTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['GroupRole_stream_cursor_value_input']: {
    groupId?: ModelTypes['uuid'] | undefined;
    id?: ModelTypes['uuid'] | undefined;
    roleId?: ModelTypes['uuid'] | undefined;
  };
  ['GroupRole_update_column']: GroupRole_update_column;
  ['GroupRole_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: ModelTypes['GroupRole_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: ModelTypes['GroupRole_bool_exp'];
  };
  /** aggregated selection of "Group" */
  ['Group_aggregate']: {
    aggregate?: ModelTypes['Group_aggregate_fields'] | undefined;
    nodes: Array<ModelTypes['Group']>;
  };
  /** aggregate fields of "Group" */
  ['Group_aggregate_fields']: {
    avg?: ModelTypes['Group_avg_fields'] | undefined;
    count: number;
    max?: ModelTypes['Group_max_fields'] | undefined;
    min?: ModelTypes['Group_min_fields'] | undefined;
    stddev?: ModelTypes['Group_stddev_fields'] | undefined;
    stddev_pop?: ModelTypes['Group_stddev_pop_fields'] | undefined;
    stddev_samp?: ModelTypes['Group_stddev_samp_fields'] | undefined;
    sum?: ModelTypes['Group_sum_fields'] | undefined;
    var_pop?: ModelTypes['Group_var_pop_fields'] | undefined;
    var_samp?: ModelTypes['Group_var_samp_fields'] | undefined;
    variance?: ModelTypes['Group_variance_fields'] | undefined;
  };
  /** aggregate avg on columns */
  ['Group_avg_fields']: {
    cursorId?: number | undefined;
  };
  /** Boolean expression to filter rows from the table "Group". All fields are combined with a logical 'AND'. */
  ['Group_bool_exp']: {
    _and?: Array<ModelTypes['Group_bool_exp']> | undefined;
    _not?: ModelTypes['Group_bool_exp'] | undefined;
    _or?: Array<ModelTypes['Group_bool_exp']> | undefined;
    createdBy?: ModelTypes['uuid_comparison_exp'] | undefined;
    created_at?: ModelTypes['timestamptz_comparison_exp'] | undefined;
    cursorId?: ModelTypes['bigint_comparison_exp'] | undefined;
    description?: ModelTypes['String_comparison_exp'] | undefined;
    id?: ModelTypes['uuid_comparison_exp'] | undefined;
    lastModifiedBy?: ModelTypes['uuid_comparison_exp'] | undefined;
    name?: ModelTypes['String_comparison_exp'] | undefined;
    role?: ModelTypes['String_comparison_exp'] | undefined;
    roles?: ModelTypes['GroupRole_bool_exp'] | undefined;
    roles_aggregate?: ModelTypes['GroupRole_aggregate_bool_exp'] | undefined;
    status?: ModelTypes['Status_enum_comparison_exp'] | undefined;
    tenantId?: ModelTypes['uuid_comparison_exp'] | undefined;
    updated_at?: ModelTypes['timestamptz_comparison_exp'] | undefined;
    users?: ModelTypes['UserGroup_bool_exp'] | undefined;
    users_aggregate?: ModelTypes['UserGroup_aggregate_bool_exp'] | undefined;
  };
  ['Group_constraint']: Group_constraint;
  /** input type for incrementing numeric columns in table "Group" */
  ['Group_inc_input']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "Group" */
  ['Group_insert_input']: {
    createdBy?: ModelTypes['uuid'] | undefined;
    created_at?: ModelTypes['timestamptz'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    lastModifiedBy?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    role?: string | undefined;
    roles?: ModelTypes['GroupRole_arr_rel_insert_input'] | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updated_at?: ModelTypes['timestamptz'] | undefined;
    users?: ModelTypes['UserGroup_arr_rel_insert_input'] | undefined;
  };
  /** aggregate max on columns */
  ['Group_max_fields']: {
    createdBy?: ModelTypes['uuid'] | undefined;
    created_at?: ModelTypes['timestamptz'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    lastModifiedBy?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    role?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updated_at?: ModelTypes['timestamptz'] | undefined;
  };
  /** aggregate min on columns */
  ['Group_min_fields']: {
    createdBy?: ModelTypes['uuid'] | undefined;
    created_at?: ModelTypes['timestamptz'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    lastModifiedBy?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    role?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updated_at?: ModelTypes['timestamptz'] | undefined;
  };
  /** response of any mutation on the table "Group" */
  ['Group_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<ModelTypes['Group']>;
  };
  /** input type for inserting object relation for remote table "Group" */
  ['Group_obj_rel_insert_input']: {
    data: ModelTypes['Group_insert_input'];
    /** upsert condition */
    on_conflict?: ModelTypes['Group_on_conflict'] | undefined;
  };
  /** on_conflict condition type for table "Group" */
  ['Group_on_conflict']: {
    constraint: ModelTypes['Group_constraint'];
    update_columns: Array<ModelTypes['Group_update_column']>;
    where?: ModelTypes['Group_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "Group". */
  ['Group_order_by']: {
    createdBy?: ModelTypes['order_by'] | undefined;
    created_at?: ModelTypes['order_by'] | undefined;
    cursorId?: ModelTypes['order_by'] | undefined;
    description?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    lastModifiedBy?: ModelTypes['order_by'] | undefined;
    name?: ModelTypes['order_by'] | undefined;
    role?: ModelTypes['order_by'] | undefined;
    roles_aggregate?: ModelTypes['GroupRole_aggregate_order_by'] | undefined;
    status?: ModelTypes['order_by'] | undefined;
    tenantId?: ModelTypes['order_by'] | undefined;
    updated_at?: ModelTypes['order_by'] | undefined;
    users_aggregate?: ModelTypes['UserGroup_aggregate_order_by'] | undefined;
  };
  /** primary key columns input for table: Group */
  ['Group_pk_columns_input']: {
    id: ModelTypes['uuid'];
  };
  ['Group_select_column']: Group_select_column;
  /** input type for updating data in table "Group" */
  ['Group_set_input']: {
    createdBy?: ModelTypes['uuid'] | undefined;
    created_at?: ModelTypes['timestamptz'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    lastModifiedBy?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    role?: string | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updated_at?: ModelTypes['timestamptz'] | undefined;
  };
  /** aggregate stddev on columns */
  ['Group_stddev_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['Group_stddev_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['Group_stddev_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** Streaming cursor of the table "Group" */
  ['Group_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ModelTypes['Group_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ModelTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['Group_stream_cursor_value_input']: {
    createdBy?: ModelTypes['uuid'] | undefined;
    created_at?: ModelTypes['timestamptz'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    lastModifiedBy?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    role?: string | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updated_at?: ModelTypes['timestamptz'] | undefined;
  };
  /** aggregate sum on columns */
  ['Group_sum_fields']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  ['Group_update_column']: Group_update_column;
  ['Group_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: ModelTypes['Group_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: ModelTypes['Group_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: ModelTypes['Group_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['Group_var_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate var_samp on columns */
  ['Group_var_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate variance on columns */
  ['Group_variance_fields']: {
    cursorId?: number | undefined;
  };
  /** columns and relationships of "Industry" */
  ['Industry']: {
    createdAt: ModelTypes['timestamptz'];
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId: ModelTypes['bigint'];
    description: string;
    id: ModelTypes['uuid'];
    name: string;
    status: ModelTypes['Status_enum'];
    tenantId: ModelTypes['uuid'];
    updatedAt: ModelTypes['timestamptz'];
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregated selection of "Industry" */
  ['Industry_aggregate']: {
    aggregate?: ModelTypes['Industry_aggregate_fields'] | undefined;
    nodes: Array<ModelTypes['Industry']>;
  };
  /** aggregate fields of "Industry" */
  ['Industry_aggregate_fields']: {
    avg?: ModelTypes['Industry_avg_fields'] | undefined;
    count: number;
    max?: ModelTypes['Industry_max_fields'] | undefined;
    min?: ModelTypes['Industry_min_fields'] | undefined;
    stddev?: ModelTypes['Industry_stddev_fields'] | undefined;
    stddev_pop?: ModelTypes['Industry_stddev_pop_fields'] | undefined;
    stddev_samp?: ModelTypes['Industry_stddev_samp_fields'] | undefined;
    sum?: ModelTypes['Industry_sum_fields'] | undefined;
    var_pop?: ModelTypes['Industry_var_pop_fields'] | undefined;
    var_samp?: ModelTypes['Industry_var_samp_fields'] | undefined;
    variance?: ModelTypes['Industry_variance_fields'] | undefined;
  };
  /** aggregate avg on columns */
  ['Industry_avg_fields']: {
    cursorId?: number | undefined;
  };
  /** Boolean expression to filter rows from the table "Industry". All fields are combined with a logical 'AND'. */
  ['Industry_bool_exp']: {
    _and?: Array<ModelTypes['Industry_bool_exp']> | undefined;
    _not?: ModelTypes['Industry_bool_exp'] | undefined;
    _or?: Array<ModelTypes['Industry_bool_exp']> | undefined;
    createdAt?: ModelTypes['timestamptz_comparison_exp'] | undefined;
    createdById?: ModelTypes['uuid_comparison_exp'] | undefined;
    cursorId?: ModelTypes['bigint_comparison_exp'] | undefined;
    description?: ModelTypes['String_comparison_exp'] | undefined;
    id?: ModelTypes['uuid_comparison_exp'] | undefined;
    name?: ModelTypes['String_comparison_exp'] | undefined;
    status?: ModelTypes['Status_enum_comparison_exp'] | undefined;
    tenantId?: ModelTypes['uuid_comparison_exp'] | undefined;
    updatedAt?: ModelTypes['timestamptz_comparison_exp'] | undefined;
    updatedById?: ModelTypes['uuid_comparison_exp'] | undefined;
  };
  ['Industry_constraint']: Industry_constraint;
  /** input type for incrementing numeric columns in table "Industry" */
  ['Industry_inc_input']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "Industry" */
  ['Industry_insert_input']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate max on columns */
  ['Industry_max_fields']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate min on columns */
  ['Industry_min_fields']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** response of any mutation on the table "Industry" */
  ['Industry_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<ModelTypes['Industry']>;
  };
  /** on_conflict condition type for table "Industry" */
  ['Industry_on_conflict']: {
    constraint: ModelTypes['Industry_constraint'];
    update_columns: Array<ModelTypes['Industry_update_column']>;
    where?: ModelTypes['Industry_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "Industry". */
  ['Industry_order_by']: {
    createdAt?: ModelTypes['order_by'] | undefined;
    createdById?: ModelTypes['order_by'] | undefined;
    cursorId?: ModelTypes['order_by'] | undefined;
    description?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    name?: ModelTypes['order_by'] | undefined;
    status?: ModelTypes['order_by'] | undefined;
    tenantId?: ModelTypes['order_by'] | undefined;
    updatedAt?: ModelTypes['order_by'] | undefined;
    updatedById?: ModelTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: Industry */
  ['Industry_pk_columns_input']: {
    id: ModelTypes['uuid'];
  };
  ['Industry_select_column']: Industry_select_column;
  /** input type for updating data in table "Industry" */
  ['Industry_set_input']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate stddev on columns */
  ['Industry_stddev_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['Industry_stddev_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['Industry_stddev_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** Streaming cursor of the table "Industry" */
  ['Industry_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ModelTypes['Industry_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ModelTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['Industry_stream_cursor_value_input']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate sum on columns */
  ['Industry_sum_fields']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  ['Industry_update_column']: Industry_update_column;
  ['Industry_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: ModelTypes['Industry_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: ModelTypes['Industry_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: ModelTypes['Industry_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['Industry_var_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate var_samp on columns */
  ['Industry_var_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate variance on columns */
  ['Industry_variance_fields']: {
    cursorId?: number | undefined;
  };
  /** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
  ['Int_comparison_exp']: {
    _eq?: number | undefined;
    _gt?: number | undefined;
    _gte?: number | undefined;
    _in?: Array<number> | undefined;
    _is_null?: boolean | undefined;
    _lt?: number | undefined;
    _lte?: number | undefined;
    _neq?: number | undefined;
    _nin?: Array<number> | undefined;
  };
  /** columns and relationships of "IssueCategory" */
  ['IssueCategory']: {
    createdAt: ModelTypes['timestamptz'];
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId: ModelTypes['bigint'];
    description: string;
    id: ModelTypes['uuid'];
    name: string;
    status: ModelTypes['Status_enum'];
    tenantId: ModelTypes['uuid'];
    updatedAt: ModelTypes['timestamptz'];
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregated selection of "IssueCategory" */
  ['IssueCategory_aggregate']: {
    aggregate?: ModelTypes['IssueCategory_aggregate_fields'] | undefined;
    nodes: Array<ModelTypes['IssueCategory']>;
  };
  /** aggregate fields of "IssueCategory" */
  ['IssueCategory_aggregate_fields']: {
    avg?: ModelTypes['IssueCategory_avg_fields'] | undefined;
    count: number;
    max?: ModelTypes['IssueCategory_max_fields'] | undefined;
    min?: ModelTypes['IssueCategory_min_fields'] | undefined;
    stddev?: ModelTypes['IssueCategory_stddev_fields'] | undefined;
    stddev_pop?: ModelTypes['IssueCategory_stddev_pop_fields'] | undefined;
    stddev_samp?: ModelTypes['IssueCategory_stddev_samp_fields'] | undefined;
    sum?: ModelTypes['IssueCategory_sum_fields'] | undefined;
    var_pop?: ModelTypes['IssueCategory_var_pop_fields'] | undefined;
    var_samp?: ModelTypes['IssueCategory_var_samp_fields'] | undefined;
    variance?: ModelTypes['IssueCategory_variance_fields'] | undefined;
  };
  /** aggregate avg on columns */
  ['IssueCategory_avg_fields']: {
    cursorId?: number | undefined;
  };
  /** Boolean expression to filter rows from the table "IssueCategory". All fields are combined with a logical 'AND'. */
  ['IssueCategory_bool_exp']: {
    _and?: Array<ModelTypes['IssueCategory_bool_exp']> | undefined;
    _not?: ModelTypes['IssueCategory_bool_exp'] | undefined;
    _or?: Array<ModelTypes['IssueCategory_bool_exp']> | undefined;
    createdAt?: ModelTypes['timestamptz_comparison_exp'] | undefined;
    createdById?: ModelTypes['uuid_comparison_exp'] | undefined;
    cursorId?: ModelTypes['bigint_comparison_exp'] | undefined;
    description?: ModelTypes['String_comparison_exp'] | undefined;
    id?: ModelTypes['uuid_comparison_exp'] | undefined;
    name?: ModelTypes['String_comparison_exp'] | undefined;
    status?: ModelTypes['Status_enum_comparison_exp'] | undefined;
    tenantId?: ModelTypes['uuid_comparison_exp'] | undefined;
    updatedAt?: ModelTypes['timestamptz_comparison_exp'] | undefined;
    updatedById?: ModelTypes['uuid_comparison_exp'] | undefined;
  };
  ['IssueCategory_constraint']: IssueCategory_constraint;
  /** input type for incrementing numeric columns in table "IssueCategory" */
  ['IssueCategory_inc_input']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "IssueCategory" */
  ['IssueCategory_insert_input']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate max on columns */
  ['IssueCategory_max_fields']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate min on columns */
  ['IssueCategory_min_fields']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** response of any mutation on the table "IssueCategory" */
  ['IssueCategory_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<ModelTypes['IssueCategory']>;
  };
  /** on_conflict condition type for table "IssueCategory" */
  ['IssueCategory_on_conflict']: {
    constraint: ModelTypes['IssueCategory_constraint'];
    update_columns: Array<ModelTypes['IssueCategory_update_column']>;
    where?: ModelTypes['IssueCategory_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "IssueCategory". */
  ['IssueCategory_order_by']: {
    createdAt?: ModelTypes['order_by'] | undefined;
    createdById?: ModelTypes['order_by'] | undefined;
    cursorId?: ModelTypes['order_by'] | undefined;
    description?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    name?: ModelTypes['order_by'] | undefined;
    status?: ModelTypes['order_by'] | undefined;
    tenantId?: ModelTypes['order_by'] | undefined;
    updatedAt?: ModelTypes['order_by'] | undefined;
    updatedById?: ModelTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: IssueCategory */
  ['IssueCategory_pk_columns_input']: {
    id: ModelTypes['uuid'];
  };
  ['IssueCategory_select_column']: IssueCategory_select_column;
  /** input type for updating data in table "IssueCategory" */
  ['IssueCategory_set_input']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate stddev on columns */
  ['IssueCategory_stddev_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['IssueCategory_stddev_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['IssueCategory_stddev_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** Streaming cursor of the table "IssueCategory" */
  ['IssueCategory_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ModelTypes['IssueCategory_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ModelTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['IssueCategory_stream_cursor_value_input']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate sum on columns */
  ['IssueCategory_sum_fields']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  ['IssueCategory_update_column']: IssueCategory_update_column;
  ['IssueCategory_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: ModelTypes['IssueCategory_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: ModelTypes['IssueCategory_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: ModelTypes['IssueCategory_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['IssueCategory_var_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate var_samp on columns */
  ['IssueCategory_var_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate variance on columns */
  ['IssueCategory_variance_fields']: {
    cursorId?: number | undefined;
  };
  /** columns and relationships of "Object" */
  ['Object']: {
    /** An object relationship */
    application: ModelTypes['Application'];
    applicationId: string;
    description: string;
    id: ModelTypes['uuid'];
    name: string;
  };
  /** aggregated selection of "Object" */
  ['Object_aggregate']: {
    aggregate?: ModelTypes['Object_aggregate_fields'] | undefined;
    nodes: Array<ModelTypes['Object']>;
  };
  /** aggregate fields of "Object" */
  ['Object_aggregate_fields']: {
    count: number;
    max?: ModelTypes['Object_max_fields'] | undefined;
    min?: ModelTypes['Object_min_fields'] | undefined;
  };
  /** Boolean expression to filter rows from the table "Object". All fields are combined with a logical 'AND'. */
  ['Object_bool_exp']: {
    _and?: Array<ModelTypes['Object_bool_exp']> | undefined;
    _not?: ModelTypes['Object_bool_exp'] | undefined;
    _or?: Array<ModelTypes['Object_bool_exp']> | undefined;
    application?: ModelTypes['Application_bool_exp'] | undefined;
    applicationId?: ModelTypes['String_comparison_exp'] | undefined;
    description?: ModelTypes['String_comparison_exp'] | undefined;
    id?: ModelTypes['uuid_comparison_exp'] | undefined;
    name?: ModelTypes['String_comparison_exp'] | undefined;
  };
  ['Object_constraint']: Object_constraint;
  /** input type for inserting data into table "Object" */
  ['Object_insert_input']: {
    application?: ModelTypes['Application_obj_rel_insert_input'] | undefined;
    applicationId?: string | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
  };
  /** aggregate max on columns */
  ['Object_max_fields']: {
    applicationId?: string | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
  };
  /** aggregate min on columns */
  ['Object_min_fields']: {
    applicationId?: string | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
  };
  /** response of any mutation on the table "Object" */
  ['Object_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<ModelTypes['Object']>;
  };
  /** on_conflict condition type for table "Object" */
  ['Object_on_conflict']: {
    constraint: ModelTypes['Object_constraint'];
    update_columns: Array<ModelTypes['Object_update_column']>;
    where?: ModelTypes['Object_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "Object". */
  ['Object_order_by']: {
    application?: ModelTypes['Application_order_by'] | undefined;
    applicationId?: ModelTypes['order_by'] | undefined;
    description?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    name?: ModelTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: Object */
  ['Object_pk_columns_input']: {
    id: ModelTypes['uuid'];
  };
  ['Object_select_column']: Object_select_column;
  /** input type for updating data in table "Object" */
  ['Object_set_input']: {
    applicationId?: string | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
  };
  /** Streaming cursor of the table "Object" */
  ['Object_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ModelTypes['Object_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ModelTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['Object_stream_cursor_value_input']: {
    applicationId?: string | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
  };
  ['Object_update_column']: Object_update_column;
  ['Object_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: ModelTypes['Object_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: ModelTypes['Object_bool_exp'];
  };
  /** columns and relationships of "Organization" */
  ['Organization']: {
    address: string;
    city: string;
    country: string;
    createdAt: ModelTypes['timestamp'];
    domain: string;
    id: string;
    industry: string;
    name: string;
    postalCode: string;
    state: string;
    tenantId: ModelTypes['uuid'];
    type: string;
    updatedAt: ModelTypes['timestamp'];
    websiteUrl: string;
  };
  /** aggregated selection of "Organization" */
  ['Organization_aggregate']: {
    aggregate?: ModelTypes['Organization_aggregate_fields'] | undefined;
    nodes: Array<ModelTypes['Organization']>;
  };
  /** aggregate fields of "Organization" */
  ['Organization_aggregate_fields']: {
    count: number;
    max?: ModelTypes['Organization_max_fields'] | undefined;
    min?: ModelTypes['Organization_min_fields'] | undefined;
  };
  /** Boolean expression to filter rows from the table "Organization". All fields are combined with a logical 'AND'. */
  ['Organization_bool_exp']: {
    _and?: Array<ModelTypes['Organization_bool_exp']> | undefined;
    _not?: ModelTypes['Organization_bool_exp'] | undefined;
    _or?: Array<ModelTypes['Organization_bool_exp']> | undefined;
    address?: ModelTypes['String_comparison_exp'] | undefined;
    city?: ModelTypes['String_comparison_exp'] | undefined;
    country?: ModelTypes['String_comparison_exp'] | undefined;
    createdAt?: ModelTypes['timestamp_comparison_exp'] | undefined;
    domain?: ModelTypes['String_comparison_exp'] | undefined;
    id?: ModelTypes['String_comparison_exp'] | undefined;
    industry?: ModelTypes['String_comparison_exp'] | undefined;
    name?: ModelTypes['String_comparison_exp'] | undefined;
    postalCode?: ModelTypes['String_comparison_exp'] | undefined;
    state?: ModelTypes['String_comparison_exp'] | undefined;
    tenantId?: ModelTypes['uuid_comparison_exp'] | undefined;
    type?: ModelTypes['String_comparison_exp'] | undefined;
    updatedAt?: ModelTypes['timestamp_comparison_exp'] | undefined;
    websiteUrl?: ModelTypes['String_comparison_exp'] | undefined;
  };
  ['Organization_constraint']: Organization_constraint;
  /** input type for inserting data into table "Organization" */
  ['Organization_insert_input']: {
    address?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    createdAt?: ModelTypes['timestamp'] | undefined;
    domain?: string | undefined;
    id?: string | undefined;
    industry?: string | undefined;
    name?: string | undefined;
    postalCode?: string | undefined;
    state?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    type?: string | undefined;
    updatedAt?: ModelTypes['timestamp'] | undefined;
    websiteUrl?: string | undefined;
  };
  /** aggregate max on columns */
  ['Organization_max_fields']: {
    address?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    createdAt?: ModelTypes['timestamp'] | undefined;
    domain?: string | undefined;
    id?: string | undefined;
    industry?: string | undefined;
    name?: string | undefined;
    postalCode?: string | undefined;
    state?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    type?: string | undefined;
    updatedAt?: ModelTypes['timestamp'] | undefined;
    websiteUrl?: string | undefined;
  };
  /** aggregate min on columns */
  ['Organization_min_fields']: {
    address?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    createdAt?: ModelTypes['timestamp'] | undefined;
    domain?: string | undefined;
    id?: string | undefined;
    industry?: string | undefined;
    name?: string | undefined;
    postalCode?: string | undefined;
    state?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    type?: string | undefined;
    updatedAt?: ModelTypes['timestamp'] | undefined;
    websiteUrl?: string | undefined;
  };
  /** response of any mutation on the table "Organization" */
  ['Organization_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<ModelTypes['Organization']>;
  };
  /** on_conflict condition type for table "Organization" */
  ['Organization_on_conflict']: {
    constraint: ModelTypes['Organization_constraint'];
    update_columns: Array<ModelTypes['Organization_update_column']>;
    where?: ModelTypes['Organization_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "Organization". */
  ['Organization_order_by']: {
    address?: ModelTypes['order_by'] | undefined;
    city?: ModelTypes['order_by'] | undefined;
    country?: ModelTypes['order_by'] | undefined;
    createdAt?: ModelTypes['order_by'] | undefined;
    domain?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    industry?: ModelTypes['order_by'] | undefined;
    name?: ModelTypes['order_by'] | undefined;
    postalCode?: ModelTypes['order_by'] | undefined;
    state?: ModelTypes['order_by'] | undefined;
    tenantId?: ModelTypes['order_by'] | undefined;
    type?: ModelTypes['order_by'] | undefined;
    updatedAt?: ModelTypes['order_by'] | undefined;
    websiteUrl?: ModelTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: Organization */
  ['Organization_pk_columns_input']: {
    id: string;
  };
  ['Organization_select_column']: Organization_select_column;
  /** input type for updating data in table "Organization" */
  ['Organization_set_input']: {
    address?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    createdAt?: ModelTypes['timestamp'] | undefined;
    domain?: string | undefined;
    id?: string | undefined;
    industry?: string | undefined;
    name?: string | undefined;
    postalCode?: string | undefined;
    state?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    type?: string | undefined;
    updatedAt?: ModelTypes['timestamp'] | undefined;
    websiteUrl?: string | undefined;
  };
  /** Streaming cursor of the table "Organization" */
  ['Organization_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ModelTypes['Organization_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ModelTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['Organization_stream_cursor_value_input']: {
    address?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    createdAt?: ModelTypes['timestamp'] | undefined;
    domain?: string | undefined;
    id?: string | undefined;
    industry?: string | undefined;
    name?: string | undefined;
    postalCode?: string | undefined;
    state?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    type?: string | undefined;
    updatedAt?: ModelTypes['timestamp'] | undefined;
    websiteUrl?: string | undefined;
  };
  ['Organization_update_column']: Organization_update_column;
  ['Organization_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: ModelTypes['Organization_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: ModelTypes['Organization_bool_exp'];
  };
  /** columns and relationships of "Package" */
  ['Package']: {
    /** An array relationship */
    applications: Array<ModelTypes['PackageApplication']>;
    /** An aggregate relationship */
    applications_aggregate: ModelTypes['PackageApplication_aggregate'];
    cursorId: ModelTypes['bigint'];
    description: string;
    id: ModelTypes['uuid'];
    name: string;
    objects?: string | undefined;
    price: string;
    roles?: string | undefined;
    /** An array relationship */
    tenants: Array<ModelTypes['TenantPackage']>;
    /** An aggregate relationship */
    tenants_aggregate: ModelTypes['TenantPackage_aggregate'];
  };
  /** columns and relationships of "PackageApplication" */
  ['PackageApplication']: {
    /** An object relationship */
    application: ModelTypes['Application'];
    applicationId: string;
    id: ModelTypes['uuid'];
    /** An object relationship */
    package?: ModelTypes['Package'] | undefined;
    packageId: ModelTypes['uuid'];
  };
  /** aggregated selection of "PackageApplication" */
  ['PackageApplication_aggregate']: {
    aggregate?: ModelTypes['PackageApplication_aggregate_fields'] | undefined;
    nodes: Array<ModelTypes['PackageApplication']>;
  };
  ['PackageApplication_aggregate_bool_exp']: {
    count?:
      | ModelTypes['PackageApplication_aggregate_bool_exp_count']
      | undefined;
  };
  ['PackageApplication_aggregate_bool_exp_count']: {
    arguments?:
      | Array<ModelTypes['PackageApplication_select_column']>
      | undefined;
    distinct?: boolean | undefined;
    filter?: ModelTypes['PackageApplication_bool_exp'] | undefined;
    predicate: ModelTypes['Int_comparison_exp'];
  };
  /** aggregate fields of "PackageApplication" */
  ['PackageApplication_aggregate_fields']: {
    count: number;
    max?: ModelTypes['PackageApplication_max_fields'] | undefined;
    min?: ModelTypes['PackageApplication_min_fields'] | undefined;
  };
  /** order by aggregate values of table "PackageApplication" */
  ['PackageApplication_aggregate_order_by']: {
    count?: ModelTypes['order_by'] | undefined;
    max?: ModelTypes['PackageApplication_max_order_by'] | undefined;
    min?: ModelTypes['PackageApplication_min_order_by'] | undefined;
  };
  /** input type for inserting array relation for remote table "PackageApplication" */
  ['PackageApplication_arr_rel_insert_input']: {
    data: Array<ModelTypes['PackageApplication_insert_input']>;
    /** upsert condition */
    on_conflict?: ModelTypes['PackageApplication_on_conflict'] | undefined;
  };
  /** Boolean expression to filter rows from the table "PackageApplication". All fields are combined with a logical 'AND'. */
  ['PackageApplication_bool_exp']: {
    _and?: Array<ModelTypes['PackageApplication_bool_exp']> | undefined;
    _not?: ModelTypes['PackageApplication_bool_exp'] | undefined;
    _or?: Array<ModelTypes['PackageApplication_bool_exp']> | undefined;
    application?: ModelTypes['Application_bool_exp'] | undefined;
    applicationId?: ModelTypes['String_comparison_exp'] | undefined;
    id?: ModelTypes['uuid_comparison_exp'] | undefined;
    package?: ModelTypes['Package_bool_exp'] | undefined;
    packageId?: ModelTypes['uuid_comparison_exp'] | undefined;
  };
  ['PackageApplication_constraint']: PackageApplication_constraint;
  /** input type for inserting data into table "PackageApplication" */
  ['PackageApplication_insert_input']: {
    application?: ModelTypes['Application_obj_rel_insert_input'] | undefined;
    applicationId?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    package?: ModelTypes['Package_obj_rel_insert_input'] | undefined;
    packageId?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate max on columns */
  ['PackageApplication_max_fields']: {
    applicationId?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    packageId?: ModelTypes['uuid'] | undefined;
  };
  /** order by max() on columns of table "PackageApplication" */
  ['PackageApplication_max_order_by']: {
    applicationId?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    packageId?: ModelTypes['order_by'] | undefined;
  };
  /** aggregate min on columns */
  ['PackageApplication_min_fields']: {
    applicationId?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    packageId?: ModelTypes['uuid'] | undefined;
  };
  /** order by min() on columns of table "PackageApplication" */
  ['PackageApplication_min_order_by']: {
    applicationId?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    packageId?: ModelTypes['order_by'] | undefined;
  };
  /** response of any mutation on the table "PackageApplication" */
  ['PackageApplication_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<ModelTypes['PackageApplication']>;
  };
  /** on_conflict condition type for table "PackageApplication" */
  ['PackageApplication_on_conflict']: {
    constraint: ModelTypes['PackageApplication_constraint'];
    update_columns: Array<ModelTypes['PackageApplication_update_column']>;
    where?: ModelTypes['PackageApplication_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "PackageApplication". */
  ['PackageApplication_order_by']: {
    application?: ModelTypes['Application_order_by'] | undefined;
    applicationId?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    package?: ModelTypes['Package_order_by'] | undefined;
    packageId?: ModelTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: PackageApplication */
  ['PackageApplication_pk_columns_input']: {
    id: ModelTypes['uuid'];
  };
  ['PackageApplication_select_column']: PackageApplication_select_column;
  /** input type for updating data in table "PackageApplication" */
  ['PackageApplication_set_input']: {
    applicationId?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    packageId?: ModelTypes['uuid'] | undefined;
  };
  /** Streaming cursor of the table "PackageApplication" */
  ['PackageApplication_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ModelTypes['PackageApplication_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ModelTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['PackageApplication_stream_cursor_value_input']: {
    applicationId?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    packageId?: ModelTypes['uuid'] | undefined;
  };
  ['PackageApplication_update_column']: PackageApplication_update_column;
  ['PackageApplication_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: ModelTypes['PackageApplication_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: ModelTypes['PackageApplication_bool_exp'];
  };
  /** aggregated selection of "Package" */
  ['Package_aggregate']: {
    aggregate?: ModelTypes['Package_aggregate_fields'] | undefined;
    nodes: Array<ModelTypes['Package']>;
  };
  /** aggregate fields of "Package" */
  ['Package_aggregate_fields']: {
    avg?: ModelTypes['Package_avg_fields'] | undefined;
    count: number;
    max?: ModelTypes['Package_max_fields'] | undefined;
    min?: ModelTypes['Package_min_fields'] | undefined;
    stddev?: ModelTypes['Package_stddev_fields'] | undefined;
    stddev_pop?: ModelTypes['Package_stddev_pop_fields'] | undefined;
    stddev_samp?: ModelTypes['Package_stddev_samp_fields'] | undefined;
    sum?: ModelTypes['Package_sum_fields'] | undefined;
    var_pop?: ModelTypes['Package_var_pop_fields'] | undefined;
    var_samp?: ModelTypes['Package_var_samp_fields'] | undefined;
    variance?: ModelTypes['Package_variance_fields'] | undefined;
  };
  /** aggregate avg on columns */
  ['Package_avg_fields']: {
    cursorId?: number | undefined;
  };
  /** Boolean expression to filter rows from the table "Package". All fields are combined with a logical 'AND'. */
  ['Package_bool_exp']: {
    _and?: Array<ModelTypes['Package_bool_exp']> | undefined;
    _not?: ModelTypes['Package_bool_exp'] | undefined;
    _or?: Array<ModelTypes['Package_bool_exp']> | undefined;
    applications?: ModelTypes['PackageApplication_bool_exp'] | undefined;
    applications_aggregate?:
      | ModelTypes['PackageApplication_aggregate_bool_exp']
      | undefined;
    cursorId?: ModelTypes['bigint_comparison_exp'] | undefined;
    description?: ModelTypes['String_comparison_exp'] | undefined;
    id?: ModelTypes['uuid_comparison_exp'] | undefined;
    name?: ModelTypes['String_comparison_exp'] | undefined;
    objects?: ModelTypes['String_comparison_exp'] | undefined;
    price?: ModelTypes['String_comparison_exp'] | undefined;
    roles?: ModelTypes['String_comparison_exp'] | undefined;
    tenants?: ModelTypes['TenantPackage_bool_exp'] | undefined;
    tenants_aggregate?:
      | ModelTypes['TenantPackage_aggregate_bool_exp']
      | undefined;
  };
  ['Package_constraint']: Package_constraint;
  /** input type for incrementing numeric columns in table "Package" */
  ['Package_inc_input']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "Package" */
  ['Package_insert_input']: {
    applications?:
      | ModelTypes['PackageApplication_arr_rel_insert_input']
      | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    objects?: string | undefined;
    price?: string | undefined;
    roles?: string | undefined;
    tenants?: ModelTypes['TenantPackage_arr_rel_insert_input'] | undefined;
  };
  /** aggregate max on columns */
  ['Package_max_fields']: {
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    objects?: string | undefined;
    price?: string | undefined;
    roles?: string | undefined;
  };
  /** aggregate min on columns */
  ['Package_min_fields']: {
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    objects?: string | undefined;
    price?: string | undefined;
    roles?: string | undefined;
  };
  /** response of any mutation on the table "Package" */
  ['Package_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<ModelTypes['Package']>;
  };
  /** input type for inserting object relation for remote table "Package" */
  ['Package_obj_rel_insert_input']: {
    data: ModelTypes['Package_insert_input'];
    /** upsert condition */
    on_conflict?: ModelTypes['Package_on_conflict'] | undefined;
  };
  /** on_conflict condition type for table "Package" */
  ['Package_on_conflict']: {
    constraint: ModelTypes['Package_constraint'];
    update_columns: Array<ModelTypes['Package_update_column']>;
    where?: ModelTypes['Package_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "Package". */
  ['Package_order_by']: {
    applications_aggregate?:
      | ModelTypes['PackageApplication_aggregate_order_by']
      | undefined;
    cursorId?: ModelTypes['order_by'] | undefined;
    description?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    name?: ModelTypes['order_by'] | undefined;
    objects?: ModelTypes['order_by'] | undefined;
    price?: ModelTypes['order_by'] | undefined;
    roles?: ModelTypes['order_by'] | undefined;
    tenants_aggregate?:
      | ModelTypes['TenantPackage_aggregate_order_by']
      | undefined;
  };
  /** primary key columns input for table: Package */
  ['Package_pk_columns_input']: {
    id: ModelTypes['uuid'];
  };
  ['Package_select_column']: Package_select_column;
  /** input type for updating data in table "Package" */
  ['Package_set_input']: {
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    objects?: string | undefined;
    price?: string | undefined;
    roles?: string | undefined;
  };
  /** aggregate stddev on columns */
  ['Package_stddev_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['Package_stddev_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['Package_stddev_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** Streaming cursor of the table "Package" */
  ['Package_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ModelTypes['Package_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ModelTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['Package_stream_cursor_value_input']: {
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    objects?: string | undefined;
    price?: string | undefined;
    roles?: string | undefined;
  };
  /** aggregate sum on columns */
  ['Package_sum_fields']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  ['Package_update_column']: Package_update_column;
  ['Package_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: ModelTypes['Package_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: ModelTypes['Package_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: ModelTypes['Package_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['Package_var_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate var_samp on columns */
  ['Package_var_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate variance on columns */
  ['Package_variance_fields']: {
    cursorId?: number | undefined;
  };
  /** columns and relationships of "Product" */
  ['Product']: {
    code: string;
    createdAt: ModelTypes['timestamp'];
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId: ModelTypes['bigint'];
    description: string;
    id: ModelTypes['uuid'];
    metric?: string | undefined;
    name: string;
    /** An array relationship */
    productCategories: Array<ModelTypes['ProductCategory']>;
    /** An aggregate relationship */
    productCategories_aggregate: ModelTypes['ProductCategory_aggregate'];
    /** An array relationship */
    productVersions: Array<ModelTypes['ProductVersion']>;
    /** An aggregate relationship */
    productVersions_aggregate: ModelTypes['ProductVersion_aggregate'];
    status: ModelTypes['Status_enum'];
    tenantId: ModelTypes['uuid'];
    updatedAt: ModelTypes['timestamptz'];
    updatedById?: ModelTypes['uuid'] | undefined;
    version: string;
  };
  /** columns and relationships of "ProductCategory" */
  ['ProductCategory']: {
    createdAt: ModelTypes['timestamptz'];
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId: ModelTypes['bigint'];
    id: ModelTypes['uuid'];
    name: string;
    /** An object relationship */
    product?: ModelTypes['Product'] | undefined;
    productId: ModelTypes['uuid'];
    status: ModelTypes['Status_enum'];
    tenantId: ModelTypes['uuid'];
    updatedAt: ModelTypes['timestamptz'];
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregated selection of "ProductCategory" */
  ['ProductCategory_aggregate']: {
    aggregate?: ModelTypes['ProductCategory_aggregate_fields'] | undefined;
    nodes: Array<ModelTypes['ProductCategory']>;
  };
  ['ProductCategory_aggregate_bool_exp']: {
    count?: ModelTypes['ProductCategory_aggregate_bool_exp_count'] | undefined;
  };
  ['ProductCategory_aggregate_bool_exp_count']: {
    arguments?: Array<ModelTypes['ProductCategory_select_column']> | undefined;
    distinct?: boolean | undefined;
    filter?: ModelTypes['ProductCategory_bool_exp'] | undefined;
    predicate: ModelTypes['Int_comparison_exp'];
  };
  /** aggregate fields of "ProductCategory" */
  ['ProductCategory_aggregate_fields']: {
    avg?: ModelTypes['ProductCategory_avg_fields'] | undefined;
    count: number;
    max?: ModelTypes['ProductCategory_max_fields'] | undefined;
    min?: ModelTypes['ProductCategory_min_fields'] | undefined;
    stddev?: ModelTypes['ProductCategory_stddev_fields'] | undefined;
    stddev_pop?: ModelTypes['ProductCategory_stddev_pop_fields'] | undefined;
    stddev_samp?: ModelTypes['ProductCategory_stddev_samp_fields'] | undefined;
    sum?: ModelTypes['ProductCategory_sum_fields'] | undefined;
    var_pop?: ModelTypes['ProductCategory_var_pop_fields'] | undefined;
    var_samp?: ModelTypes['ProductCategory_var_samp_fields'] | undefined;
    variance?: ModelTypes['ProductCategory_variance_fields'] | undefined;
  };
  /** order by aggregate values of table "ProductCategory" */
  ['ProductCategory_aggregate_order_by']: {
    avg?: ModelTypes['ProductCategory_avg_order_by'] | undefined;
    count?: ModelTypes['order_by'] | undefined;
    max?: ModelTypes['ProductCategory_max_order_by'] | undefined;
    min?: ModelTypes['ProductCategory_min_order_by'] | undefined;
    stddev?: ModelTypes['ProductCategory_stddev_order_by'] | undefined;
    stddev_pop?: ModelTypes['ProductCategory_stddev_pop_order_by'] | undefined;
    stddev_samp?:
      | ModelTypes['ProductCategory_stddev_samp_order_by']
      | undefined;
    sum?: ModelTypes['ProductCategory_sum_order_by'] | undefined;
    var_pop?: ModelTypes['ProductCategory_var_pop_order_by'] | undefined;
    var_samp?: ModelTypes['ProductCategory_var_samp_order_by'] | undefined;
    variance?: ModelTypes['ProductCategory_variance_order_by'] | undefined;
  };
  /** input type for inserting array relation for remote table "ProductCategory" */
  ['ProductCategory_arr_rel_insert_input']: {
    data: Array<ModelTypes['ProductCategory_insert_input']>;
    /** upsert condition */
    on_conflict?: ModelTypes['ProductCategory_on_conflict'] | undefined;
  };
  /** aggregate avg on columns */
  ['ProductCategory_avg_fields']: {
    cursorId?: number | undefined;
  };
  /** order by avg() on columns of table "ProductCategory" */
  ['ProductCategory_avg_order_by']: {
    cursorId?: ModelTypes['order_by'] | undefined;
  };
  /** Boolean expression to filter rows from the table "ProductCategory". All fields are combined with a logical 'AND'. */
  ['ProductCategory_bool_exp']: {
    _and?: Array<ModelTypes['ProductCategory_bool_exp']> | undefined;
    _not?: ModelTypes['ProductCategory_bool_exp'] | undefined;
    _or?: Array<ModelTypes['ProductCategory_bool_exp']> | undefined;
    createdAt?: ModelTypes['timestamptz_comparison_exp'] | undefined;
    createdById?: ModelTypes['uuid_comparison_exp'] | undefined;
    cursorId?: ModelTypes['bigint_comparison_exp'] | undefined;
    id?: ModelTypes['uuid_comparison_exp'] | undefined;
    name?: ModelTypes['String_comparison_exp'] | undefined;
    product?: ModelTypes['Product_bool_exp'] | undefined;
    productId?: ModelTypes['uuid_comparison_exp'] | undefined;
    status?: ModelTypes['Status_enum_comparison_exp'] | undefined;
    tenantId?: ModelTypes['uuid_comparison_exp'] | undefined;
    updatedAt?: ModelTypes['timestamptz_comparison_exp'] | undefined;
    updatedById?: ModelTypes['uuid_comparison_exp'] | undefined;
  };
  ['ProductCategory_constraint']: ProductCategory_constraint;
  /** input type for incrementing numeric columns in table "ProductCategory" */
  ['ProductCategory_inc_input']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "ProductCategory" */
  ['ProductCategory_insert_input']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    product?: ModelTypes['Product_obj_rel_insert_input'] | undefined;
    productId?: ModelTypes['uuid'] | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate max on columns */
  ['ProductCategory_max_fields']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    productId?: ModelTypes['uuid'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** order by max() on columns of table "ProductCategory" */
  ['ProductCategory_max_order_by']: {
    createdAt?: ModelTypes['order_by'] | undefined;
    createdById?: ModelTypes['order_by'] | undefined;
    cursorId?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    name?: ModelTypes['order_by'] | undefined;
    productId?: ModelTypes['order_by'] | undefined;
    tenantId?: ModelTypes['order_by'] | undefined;
    updatedAt?: ModelTypes['order_by'] | undefined;
    updatedById?: ModelTypes['order_by'] | undefined;
  };
  /** aggregate min on columns */
  ['ProductCategory_min_fields']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    productId?: ModelTypes['uuid'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** order by min() on columns of table "ProductCategory" */
  ['ProductCategory_min_order_by']: {
    createdAt?: ModelTypes['order_by'] | undefined;
    createdById?: ModelTypes['order_by'] | undefined;
    cursorId?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    name?: ModelTypes['order_by'] | undefined;
    productId?: ModelTypes['order_by'] | undefined;
    tenantId?: ModelTypes['order_by'] | undefined;
    updatedAt?: ModelTypes['order_by'] | undefined;
    updatedById?: ModelTypes['order_by'] | undefined;
  };
  /** response of any mutation on the table "ProductCategory" */
  ['ProductCategory_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<ModelTypes['ProductCategory']>;
  };
  /** on_conflict condition type for table "ProductCategory" */
  ['ProductCategory_on_conflict']: {
    constraint: ModelTypes['ProductCategory_constraint'];
    update_columns: Array<ModelTypes['ProductCategory_update_column']>;
    where?: ModelTypes['ProductCategory_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "ProductCategory". */
  ['ProductCategory_order_by']: {
    createdAt?: ModelTypes['order_by'] | undefined;
    createdById?: ModelTypes['order_by'] | undefined;
    cursorId?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    name?: ModelTypes['order_by'] | undefined;
    product?: ModelTypes['Product_order_by'] | undefined;
    productId?: ModelTypes['order_by'] | undefined;
    status?: ModelTypes['order_by'] | undefined;
    tenantId?: ModelTypes['order_by'] | undefined;
    updatedAt?: ModelTypes['order_by'] | undefined;
    updatedById?: ModelTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: ProductCategory */
  ['ProductCategory_pk_columns_input']: {
    id: ModelTypes['uuid'];
  };
  ['ProductCategory_select_column']: ProductCategory_select_column;
  /** input type for updating data in table "ProductCategory" */
  ['ProductCategory_set_input']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    productId?: ModelTypes['uuid'] | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate stddev on columns */
  ['ProductCategory_stddev_fields']: {
    cursorId?: number | undefined;
  };
  /** order by stddev() on columns of table "ProductCategory" */
  ['ProductCategory_stddev_order_by']: {
    cursorId?: ModelTypes['order_by'] | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['ProductCategory_stddev_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** order by stddev_pop() on columns of table "ProductCategory" */
  ['ProductCategory_stddev_pop_order_by']: {
    cursorId?: ModelTypes['order_by'] | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['ProductCategory_stddev_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** order by stddev_samp() on columns of table "ProductCategory" */
  ['ProductCategory_stddev_samp_order_by']: {
    cursorId?: ModelTypes['order_by'] | undefined;
  };
  /** Streaming cursor of the table "ProductCategory" */
  ['ProductCategory_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ModelTypes['ProductCategory_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ModelTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['ProductCategory_stream_cursor_value_input']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    productId?: ModelTypes['uuid'] | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate sum on columns */
  ['ProductCategory_sum_fields']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  /** order by sum() on columns of table "ProductCategory" */
  ['ProductCategory_sum_order_by']: {
    cursorId?: ModelTypes['order_by'] | undefined;
  };
  ['ProductCategory_update_column']: ProductCategory_update_column;
  ['ProductCategory_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: ModelTypes['ProductCategory_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: ModelTypes['ProductCategory_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: ModelTypes['ProductCategory_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['ProductCategory_var_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** order by var_pop() on columns of table "ProductCategory" */
  ['ProductCategory_var_pop_order_by']: {
    cursorId?: ModelTypes['order_by'] | undefined;
  };
  /** aggregate var_samp on columns */
  ['ProductCategory_var_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** order by var_samp() on columns of table "ProductCategory" */
  ['ProductCategory_var_samp_order_by']: {
    cursorId?: ModelTypes['order_by'] | undefined;
  };
  /** aggregate variance on columns */
  ['ProductCategory_variance_fields']: {
    cursorId?: number | undefined;
  };
  /** order by variance() on columns of table "ProductCategory" */
  ['ProductCategory_variance_order_by']: {
    cursorId?: ModelTypes['order_by'] | undefined;
  };
  /** columns and relationships of "ProductVersion" */
  ['ProductVersion']: {
    createdAt: ModelTypes['timestamptz'];
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId: ModelTypes['bigint'];
    id: ModelTypes['uuid'];
    name: string;
    /** An object relationship */
    product?: ModelTypes['Product'] | undefined;
    productId: ModelTypes['uuid'];
    status: ModelTypes['Status_enum'];
    tenantId: ModelTypes['uuid'];
    updatedAt: ModelTypes['timestamptz'];
    updatedById?: ModelTypes['uuid'] | undefined;
    version: string;
  };
  /** aggregated selection of "ProductVersion" */
  ['ProductVersion_aggregate']: {
    aggregate?: ModelTypes['ProductVersion_aggregate_fields'] | undefined;
    nodes: Array<ModelTypes['ProductVersion']>;
  };
  ['ProductVersion_aggregate_bool_exp']: {
    count?: ModelTypes['ProductVersion_aggregate_bool_exp_count'] | undefined;
  };
  ['ProductVersion_aggregate_bool_exp_count']: {
    arguments?: Array<ModelTypes['ProductVersion_select_column']> | undefined;
    distinct?: boolean | undefined;
    filter?: ModelTypes['ProductVersion_bool_exp'] | undefined;
    predicate: ModelTypes['Int_comparison_exp'];
  };
  /** aggregate fields of "ProductVersion" */
  ['ProductVersion_aggregate_fields']: {
    avg?: ModelTypes['ProductVersion_avg_fields'] | undefined;
    count: number;
    max?: ModelTypes['ProductVersion_max_fields'] | undefined;
    min?: ModelTypes['ProductVersion_min_fields'] | undefined;
    stddev?: ModelTypes['ProductVersion_stddev_fields'] | undefined;
    stddev_pop?: ModelTypes['ProductVersion_stddev_pop_fields'] | undefined;
    stddev_samp?: ModelTypes['ProductVersion_stddev_samp_fields'] | undefined;
    sum?: ModelTypes['ProductVersion_sum_fields'] | undefined;
    var_pop?: ModelTypes['ProductVersion_var_pop_fields'] | undefined;
    var_samp?: ModelTypes['ProductVersion_var_samp_fields'] | undefined;
    variance?: ModelTypes['ProductVersion_variance_fields'] | undefined;
  };
  /** order by aggregate values of table "ProductVersion" */
  ['ProductVersion_aggregate_order_by']: {
    avg?: ModelTypes['ProductVersion_avg_order_by'] | undefined;
    count?: ModelTypes['order_by'] | undefined;
    max?: ModelTypes['ProductVersion_max_order_by'] | undefined;
    min?: ModelTypes['ProductVersion_min_order_by'] | undefined;
    stddev?: ModelTypes['ProductVersion_stddev_order_by'] | undefined;
    stddev_pop?: ModelTypes['ProductVersion_stddev_pop_order_by'] | undefined;
    stddev_samp?: ModelTypes['ProductVersion_stddev_samp_order_by'] | undefined;
    sum?: ModelTypes['ProductVersion_sum_order_by'] | undefined;
    var_pop?: ModelTypes['ProductVersion_var_pop_order_by'] | undefined;
    var_samp?: ModelTypes['ProductVersion_var_samp_order_by'] | undefined;
    variance?: ModelTypes['ProductVersion_variance_order_by'] | undefined;
  };
  /** input type for inserting array relation for remote table "ProductVersion" */
  ['ProductVersion_arr_rel_insert_input']: {
    data: Array<ModelTypes['ProductVersion_insert_input']>;
    /** upsert condition */
    on_conflict?: ModelTypes['ProductVersion_on_conflict'] | undefined;
  };
  /** aggregate avg on columns */
  ['ProductVersion_avg_fields']: {
    cursorId?: number | undefined;
  };
  /** order by avg() on columns of table "ProductVersion" */
  ['ProductVersion_avg_order_by']: {
    cursorId?: ModelTypes['order_by'] | undefined;
  };
  /** Boolean expression to filter rows from the table "ProductVersion". All fields are combined with a logical 'AND'. */
  ['ProductVersion_bool_exp']: {
    _and?: Array<ModelTypes['ProductVersion_bool_exp']> | undefined;
    _not?: ModelTypes['ProductVersion_bool_exp'] | undefined;
    _or?: Array<ModelTypes['ProductVersion_bool_exp']> | undefined;
    createdAt?: ModelTypes['timestamptz_comparison_exp'] | undefined;
    createdById?: ModelTypes['uuid_comparison_exp'] | undefined;
    cursorId?: ModelTypes['bigint_comparison_exp'] | undefined;
    id?: ModelTypes['uuid_comparison_exp'] | undefined;
    name?: ModelTypes['String_comparison_exp'] | undefined;
    product?: ModelTypes['Product_bool_exp'] | undefined;
    productId?: ModelTypes['uuid_comparison_exp'] | undefined;
    status?: ModelTypes['Status_enum_comparison_exp'] | undefined;
    tenantId?: ModelTypes['uuid_comparison_exp'] | undefined;
    updatedAt?: ModelTypes['timestamptz_comparison_exp'] | undefined;
    updatedById?: ModelTypes['uuid_comparison_exp'] | undefined;
    version?: ModelTypes['String_comparison_exp'] | undefined;
  };
  ['ProductVersion_constraint']: ProductVersion_constraint;
  /** input type for incrementing numeric columns in table "ProductVersion" */
  ['ProductVersion_inc_input']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "ProductVersion" */
  ['ProductVersion_insert_input']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    product?: ModelTypes['Product_obj_rel_insert_input'] | undefined;
    productId?: ModelTypes['uuid'] | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
    version?: string | undefined;
  };
  /** aggregate max on columns */
  ['ProductVersion_max_fields']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    productId?: ModelTypes['uuid'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
    version?: string | undefined;
  };
  /** order by max() on columns of table "ProductVersion" */
  ['ProductVersion_max_order_by']: {
    createdAt?: ModelTypes['order_by'] | undefined;
    createdById?: ModelTypes['order_by'] | undefined;
    cursorId?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    name?: ModelTypes['order_by'] | undefined;
    productId?: ModelTypes['order_by'] | undefined;
    tenantId?: ModelTypes['order_by'] | undefined;
    updatedAt?: ModelTypes['order_by'] | undefined;
    updatedById?: ModelTypes['order_by'] | undefined;
    version?: ModelTypes['order_by'] | undefined;
  };
  /** aggregate min on columns */
  ['ProductVersion_min_fields']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    productId?: ModelTypes['uuid'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
    version?: string | undefined;
  };
  /** order by min() on columns of table "ProductVersion" */
  ['ProductVersion_min_order_by']: {
    createdAt?: ModelTypes['order_by'] | undefined;
    createdById?: ModelTypes['order_by'] | undefined;
    cursorId?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    name?: ModelTypes['order_by'] | undefined;
    productId?: ModelTypes['order_by'] | undefined;
    tenantId?: ModelTypes['order_by'] | undefined;
    updatedAt?: ModelTypes['order_by'] | undefined;
    updatedById?: ModelTypes['order_by'] | undefined;
    version?: ModelTypes['order_by'] | undefined;
  };
  /** response of any mutation on the table "ProductVersion" */
  ['ProductVersion_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<ModelTypes['ProductVersion']>;
  };
  /** on_conflict condition type for table "ProductVersion" */
  ['ProductVersion_on_conflict']: {
    constraint: ModelTypes['ProductVersion_constraint'];
    update_columns: Array<ModelTypes['ProductVersion_update_column']>;
    where?: ModelTypes['ProductVersion_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "ProductVersion". */
  ['ProductVersion_order_by']: {
    createdAt?: ModelTypes['order_by'] | undefined;
    createdById?: ModelTypes['order_by'] | undefined;
    cursorId?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    name?: ModelTypes['order_by'] | undefined;
    product?: ModelTypes['Product_order_by'] | undefined;
    productId?: ModelTypes['order_by'] | undefined;
    status?: ModelTypes['order_by'] | undefined;
    tenantId?: ModelTypes['order_by'] | undefined;
    updatedAt?: ModelTypes['order_by'] | undefined;
    updatedById?: ModelTypes['order_by'] | undefined;
    version?: ModelTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: ProductVersion */
  ['ProductVersion_pk_columns_input']: {
    id: ModelTypes['uuid'];
  };
  ['ProductVersion_select_column']: ProductVersion_select_column;
  /** input type for updating data in table "ProductVersion" */
  ['ProductVersion_set_input']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    productId?: ModelTypes['uuid'] | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
    version?: string | undefined;
  };
  /** aggregate stddev on columns */
  ['ProductVersion_stddev_fields']: {
    cursorId?: number | undefined;
  };
  /** order by stddev() on columns of table "ProductVersion" */
  ['ProductVersion_stddev_order_by']: {
    cursorId?: ModelTypes['order_by'] | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['ProductVersion_stddev_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** order by stddev_pop() on columns of table "ProductVersion" */
  ['ProductVersion_stddev_pop_order_by']: {
    cursorId?: ModelTypes['order_by'] | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['ProductVersion_stddev_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** order by stddev_samp() on columns of table "ProductVersion" */
  ['ProductVersion_stddev_samp_order_by']: {
    cursorId?: ModelTypes['order_by'] | undefined;
  };
  /** Streaming cursor of the table "ProductVersion" */
  ['ProductVersion_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ModelTypes['ProductVersion_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ModelTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['ProductVersion_stream_cursor_value_input']: {
    createdAt?: ModelTypes['timestamptz'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    productId?: ModelTypes['uuid'] | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
    version?: string | undefined;
  };
  /** aggregate sum on columns */
  ['ProductVersion_sum_fields']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  /** order by sum() on columns of table "ProductVersion" */
  ['ProductVersion_sum_order_by']: {
    cursorId?: ModelTypes['order_by'] | undefined;
  };
  ['ProductVersion_update_column']: ProductVersion_update_column;
  ['ProductVersion_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: ModelTypes['ProductVersion_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: ModelTypes['ProductVersion_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: ModelTypes['ProductVersion_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['ProductVersion_var_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** order by var_pop() on columns of table "ProductVersion" */
  ['ProductVersion_var_pop_order_by']: {
    cursorId?: ModelTypes['order_by'] | undefined;
  };
  /** aggregate var_samp on columns */
  ['ProductVersion_var_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** order by var_samp() on columns of table "ProductVersion" */
  ['ProductVersion_var_samp_order_by']: {
    cursorId?: ModelTypes['order_by'] | undefined;
  };
  /** aggregate variance on columns */
  ['ProductVersion_variance_fields']: {
    cursorId?: number | undefined;
  };
  /** order by variance() on columns of table "ProductVersion" */
  ['ProductVersion_variance_order_by']: {
    cursorId?: ModelTypes['order_by'] | undefined;
  };
  /** aggregated selection of "Product" */
  ['Product_aggregate']: {
    aggregate?: ModelTypes['Product_aggregate_fields'] | undefined;
    nodes: Array<ModelTypes['Product']>;
  };
  /** aggregate fields of "Product" */
  ['Product_aggregate_fields']: {
    avg?: ModelTypes['Product_avg_fields'] | undefined;
    count: number;
    max?: ModelTypes['Product_max_fields'] | undefined;
    min?: ModelTypes['Product_min_fields'] | undefined;
    stddev?: ModelTypes['Product_stddev_fields'] | undefined;
    stddev_pop?: ModelTypes['Product_stddev_pop_fields'] | undefined;
    stddev_samp?: ModelTypes['Product_stddev_samp_fields'] | undefined;
    sum?: ModelTypes['Product_sum_fields'] | undefined;
    var_pop?: ModelTypes['Product_var_pop_fields'] | undefined;
    var_samp?: ModelTypes['Product_var_samp_fields'] | undefined;
    variance?: ModelTypes['Product_variance_fields'] | undefined;
  };
  /** aggregate avg on columns */
  ['Product_avg_fields']: {
    cursorId?: number | undefined;
  };
  /** Boolean expression to filter rows from the table "Product". All fields are combined with a logical 'AND'. */
  ['Product_bool_exp']: {
    _and?: Array<ModelTypes['Product_bool_exp']> | undefined;
    _not?: ModelTypes['Product_bool_exp'] | undefined;
    _or?: Array<ModelTypes['Product_bool_exp']> | undefined;
    code?: ModelTypes['String_comparison_exp'] | undefined;
    createdAt?: ModelTypes['timestamp_comparison_exp'] | undefined;
    createdById?: ModelTypes['uuid_comparison_exp'] | undefined;
    cursorId?: ModelTypes['bigint_comparison_exp'] | undefined;
    description?: ModelTypes['String_comparison_exp'] | undefined;
    id?: ModelTypes['uuid_comparison_exp'] | undefined;
    metric?: ModelTypes['String_comparison_exp'] | undefined;
    name?: ModelTypes['String_comparison_exp'] | undefined;
    productCategories?: ModelTypes['ProductCategory_bool_exp'] | undefined;
    productCategories_aggregate?:
      | ModelTypes['ProductCategory_aggregate_bool_exp']
      | undefined;
    productVersions?: ModelTypes['ProductVersion_bool_exp'] | undefined;
    productVersions_aggregate?:
      | ModelTypes['ProductVersion_aggregate_bool_exp']
      | undefined;
    status?: ModelTypes['Status_enum_comparison_exp'] | undefined;
    tenantId?: ModelTypes['uuid_comparison_exp'] | undefined;
    updatedAt?: ModelTypes['timestamptz_comparison_exp'] | undefined;
    updatedById?: ModelTypes['uuid_comparison_exp'] | undefined;
    version?: ModelTypes['String_comparison_exp'] | undefined;
  };
  ['Product_constraint']: Product_constraint;
  /** input type for incrementing numeric columns in table "Product" */
  ['Product_inc_input']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "Product" */
  ['Product_insert_input']: {
    code?: string | undefined;
    createdAt?: ModelTypes['timestamp'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    metric?: string | undefined;
    name?: string | undefined;
    productCategories?:
      | ModelTypes['ProductCategory_arr_rel_insert_input']
      | undefined;
    productVersions?:
      | ModelTypes['ProductVersion_arr_rel_insert_input']
      | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
    version?: string | undefined;
  };
  /** aggregate max on columns */
  ['Product_max_fields']: {
    code?: string | undefined;
    createdAt?: ModelTypes['timestamp'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    metric?: string | undefined;
    name?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
    version?: string | undefined;
  };
  /** aggregate min on columns */
  ['Product_min_fields']: {
    code?: string | undefined;
    createdAt?: ModelTypes['timestamp'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    metric?: string | undefined;
    name?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
    version?: string | undefined;
  };
  /** response of any mutation on the table "Product" */
  ['Product_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<ModelTypes['Product']>;
  };
  /** input type for inserting object relation for remote table "Product" */
  ['Product_obj_rel_insert_input']: {
    data: ModelTypes['Product_insert_input'];
    /** upsert condition */
    on_conflict?: ModelTypes['Product_on_conflict'] | undefined;
  };
  /** on_conflict condition type for table "Product" */
  ['Product_on_conflict']: {
    constraint: ModelTypes['Product_constraint'];
    update_columns: Array<ModelTypes['Product_update_column']>;
    where?: ModelTypes['Product_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "Product". */
  ['Product_order_by']: {
    code?: ModelTypes['order_by'] | undefined;
    createdAt?: ModelTypes['order_by'] | undefined;
    createdById?: ModelTypes['order_by'] | undefined;
    cursorId?: ModelTypes['order_by'] | undefined;
    description?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    metric?: ModelTypes['order_by'] | undefined;
    name?: ModelTypes['order_by'] | undefined;
    productCategories_aggregate?:
      | ModelTypes['ProductCategory_aggregate_order_by']
      | undefined;
    productVersions_aggregate?:
      | ModelTypes['ProductVersion_aggregate_order_by']
      | undefined;
    status?: ModelTypes['order_by'] | undefined;
    tenantId?: ModelTypes['order_by'] | undefined;
    updatedAt?: ModelTypes['order_by'] | undefined;
    updatedById?: ModelTypes['order_by'] | undefined;
    version?: ModelTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: Product */
  ['Product_pk_columns_input']: {
    id: ModelTypes['uuid'];
  };
  ['Product_select_column']: Product_select_column;
  /** input type for updating data in table "Product" */
  ['Product_set_input']: {
    code?: string | undefined;
    createdAt?: ModelTypes['timestamp'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    metric?: string | undefined;
    name?: string | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
    version?: string | undefined;
  };
  /** aggregate stddev on columns */
  ['Product_stddev_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['Product_stddev_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['Product_stddev_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** Streaming cursor of the table "Product" */
  ['Product_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ModelTypes['Product_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ModelTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['Product_stream_cursor_value_input']: {
    code?: string | undefined;
    createdAt?: ModelTypes['timestamp'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    metric?: string | undefined;
    name?: string | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamptz'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
    version?: string | undefined;
  };
  /** aggregate sum on columns */
  ['Product_sum_fields']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  ['Product_update_column']: Product_update_column;
  ['Product_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: ModelTypes['Product_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: ModelTypes['Product_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: ModelTypes['Product_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['Product_var_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate var_samp on columns */
  ['Product_var_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate variance on columns */
  ['Product_variance_fields']: {
    cursorId?: number | undefined;
  };
  /** columns and relationships of "Role" */
  ['Role']: {
    /** An object relationship */
    application: ModelTypes['Application'];
    applicationId: string;
    description: string;
    id: ModelTypes['uuid'];
    name: string;
    /** An array relationship */
    roleGroups: Array<ModelTypes['GroupRole']>;
    /** An aggregate relationship */
    roleGroups_aggregate: ModelTypes['GroupRole_aggregate'];
    /** An array relationship */
    userRoles: Array<ModelTypes['UserRole']>;
    /** An aggregate relationship */
    userRoles_aggregate: ModelTypes['UserRole_aggregate'];
  };
  /** aggregated selection of "Role" */
  ['Role_aggregate']: {
    aggregate?: ModelTypes['Role_aggregate_fields'] | undefined;
    nodes: Array<ModelTypes['Role']>;
  };
  /** aggregate fields of "Role" */
  ['Role_aggregate_fields']: {
    count: number;
    max?: ModelTypes['Role_max_fields'] | undefined;
    min?: ModelTypes['Role_min_fields'] | undefined;
  };
  /** Boolean expression to filter rows from the table "Role". All fields are combined with a logical 'AND'. */
  ['Role_bool_exp']: {
    _and?: Array<ModelTypes['Role_bool_exp']> | undefined;
    _not?: ModelTypes['Role_bool_exp'] | undefined;
    _or?: Array<ModelTypes['Role_bool_exp']> | undefined;
    application?: ModelTypes['Application_bool_exp'] | undefined;
    applicationId?: ModelTypes['String_comparison_exp'] | undefined;
    description?: ModelTypes['String_comparison_exp'] | undefined;
    id?: ModelTypes['uuid_comparison_exp'] | undefined;
    name?: ModelTypes['String_comparison_exp'] | undefined;
    roleGroups?: ModelTypes['GroupRole_bool_exp'] | undefined;
    roleGroups_aggregate?:
      | ModelTypes['GroupRole_aggregate_bool_exp']
      | undefined;
    userRoles?: ModelTypes['UserRole_bool_exp'] | undefined;
    userRoles_aggregate?: ModelTypes['UserRole_aggregate_bool_exp'] | undefined;
  };
  ['Role_constraint']: Role_constraint;
  /** input type for inserting data into table "Role" */
  ['Role_insert_input']: {
    application?: ModelTypes['Application_obj_rel_insert_input'] | undefined;
    applicationId?: string | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
    roleGroups?: ModelTypes['GroupRole_arr_rel_insert_input'] | undefined;
    userRoles?: ModelTypes['UserRole_arr_rel_insert_input'] | undefined;
  };
  /** aggregate max on columns */
  ['Role_max_fields']: {
    applicationId?: string | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
  };
  /** aggregate min on columns */
  ['Role_min_fields']: {
    applicationId?: string | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
  };
  /** response of any mutation on the table "Role" */
  ['Role_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<ModelTypes['Role']>;
  };
  /** input type for inserting object relation for remote table "Role" */
  ['Role_obj_rel_insert_input']: {
    data: ModelTypes['Role_insert_input'];
    /** upsert condition */
    on_conflict?: ModelTypes['Role_on_conflict'] | undefined;
  };
  /** on_conflict condition type for table "Role" */
  ['Role_on_conflict']: {
    constraint: ModelTypes['Role_constraint'];
    update_columns: Array<ModelTypes['Role_update_column']>;
    where?: ModelTypes['Role_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "Role". */
  ['Role_order_by']: {
    application?: ModelTypes['Application_order_by'] | undefined;
    applicationId?: ModelTypes['order_by'] | undefined;
    description?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    name?: ModelTypes['order_by'] | undefined;
    roleGroups_aggregate?:
      | ModelTypes['GroupRole_aggregate_order_by']
      | undefined;
    userRoles_aggregate?: ModelTypes['UserRole_aggregate_order_by'] | undefined;
  };
  /** primary key columns input for table: Role */
  ['Role_pk_columns_input']: {
    id: ModelTypes['uuid'];
  };
  ['Role_select_column']: Role_select_column;
  /** input type for updating data in table "Role" */
  ['Role_set_input']: {
    applicationId?: string | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
  };
  /** Streaming cursor of the table "Role" */
  ['Role_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ModelTypes['Role_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ModelTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['Role_stream_cursor_value_input']: {
    applicationId?: string | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    name?: string | undefined;
  };
  ['Role_update_column']: Role_update_column;
  ['Role_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: ModelTypes['Role_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: ModelTypes['Role_bool_exp'];
  };
  /** columns and relationships of "Status" */
  ['Status']: {
    value: string;
  };
  /** aggregated selection of "Status" */
  ['Status_aggregate']: {
    aggregate?: ModelTypes['Status_aggregate_fields'] | undefined;
    nodes: Array<ModelTypes['Status']>;
  };
  /** aggregate fields of "Status" */
  ['Status_aggregate_fields']: {
    count: number;
    max?: ModelTypes['Status_max_fields'] | undefined;
    min?: ModelTypes['Status_min_fields'] | undefined;
  };
  /** Boolean expression to filter rows from the table "Status". All fields are combined with a logical 'AND'. */
  ['Status_bool_exp']: {
    _and?: Array<ModelTypes['Status_bool_exp']> | undefined;
    _not?: ModelTypes['Status_bool_exp'] | undefined;
    _or?: Array<ModelTypes['Status_bool_exp']> | undefined;
    value?: ModelTypes['String_comparison_exp'] | undefined;
  };
  ['Status_constraint']: Status_constraint;
  ['Status_enum']: Status_enum;
  /** Boolean expression to compare columns of type "Status_enum". All fields are combined with logical 'AND'. */
  ['Status_enum_comparison_exp']: {
    _eq?: ModelTypes['Status_enum'] | undefined;
    _in?: Array<ModelTypes['Status_enum']> | undefined;
    _is_null?: boolean | undefined;
    _neq?: ModelTypes['Status_enum'] | undefined;
    _nin?: Array<ModelTypes['Status_enum']> | undefined;
  };
  /** input type for inserting data into table "Status" */
  ['Status_insert_input']: {
    value?: string | undefined;
  };
  /** aggregate max on columns */
  ['Status_max_fields']: {
    value?: string | undefined;
  };
  /** aggregate min on columns */
  ['Status_min_fields']: {
    value?: string | undefined;
  };
  /** response of any mutation on the table "Status" */
  ['Status_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<ModelTypes['Status']>;
  };
  /** on_conflict condition type for table "Status" */
  ['Status_on_conflict']: {
    constraint: ModelTypes['Status_constraint'];
    update_columns: Array<ModelTypes['Status_update_column']>;
    where?: ModelTypes['Status_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "Status". */
  ['Status_order_by']: {
    value?: ModelTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: Status */
  ['Status_pk_columns_input']: {
    value: string;
  };
  ['Status_select_column']: Status_select_column;
  /** input type for updating data in table "Status" */
  ['Status_set_input']: {
    value?: string | undefined;
  };
  /** Streaming cursor of the table "Status" */
  ['Status_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ModelTypes['Status_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ModelTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['Status_stream_cursor_value_input']: {
    value?: string | undefined;
  };
  ['Status_update_column']: Status_update_column;
  ['Status_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: ModelTypes['Status_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: ModelTypes['Status_bool_exp'];
  };
  /** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
  ['String_comparison_exp']: {
    _eq?: string | undefined;
    _gt?: string | undefined;
    _gte?: string | undefined;
    /** does the column match the given case-insensitive pattern */
    _ilike?: string | undefined;
    _in?: Array<string> | undefined;
    /** does the column match the given POSIX regular expression, case insensitive */
    _iregex?: string | undefined;
    _is_null?: boolean | undefined;
    /** does the column match the given pattern */
    _like?: string | undefined;
    _lt?: string | undefined;
    _lte?: string | undefined;
    _neq?: string | undefined;
    /** does the column NOT match the given case-insensitive pattern */
    _nilike?: string | undefined;
    _nin?: Array<string> | undefined;
    /** does the column NOT match the given POSIX regular expression, case insensitive */
    _niregex?: string | undefined;
    /** does the column NOT match the given pattern */
    _nlike?: string | undefined;
    /** does the column NOT match the given POSIX regular expression, case sensitive */
    _nregex?: string | undefined;
    /** does the column NOT match the given SQL regular expression */
    _nsimilar?: string | undefined;
    /** does the column match the given POSIX regular expression, case sensitive */
    _regex?: string | undefined;
    /** does the column match the given SQL regular expression */
    _similar?: string | undefined;
  };
  /** columns and relationships of "Task" */
  ['Task']: {
    closureReason: string;
    description: string;
    hasSensitiveInfo: boolean;
    id: ModelTypes['uuid'];
    isRejected: boolean;
    isSupportEngineerIdentityHidden: boolean;
    issueCategory: string;
    linkedTickets?: string | undefined;
    name: string;
    organizationId: string;
    productDocId: ModelTypes['uuid'];
    productVersion: string;
    requestForInformation: string;
    requestedByUserId: ModelTypes['uuid'];
    reviewedByUserId: ModelTypes['uuid'];
    rootChapterId: ModelTypes['uuid'];
    rootChapterVersion: string;
    salesForceTicketId: string;
    severity: string;
    severityUpdatedAt: ModelTypes['timestamp'];
    status: string;
    subCategory: string;
    tenantId: ModelTypes['uuid'];
    ticketRef: string;
    type: string;
    usersToNotify?: string | undefined;
  };
  /** aggregated selection of "Task" */
  ['Task_aggregate']: {
    aggregate?: ModelTypes['Task_aggregate_fields'] | undefined;
    nodes: Array<ModelTypes['Task']>;
  };
  /** aggregate fields of "Task" */
  ['Task_aggregate_fields']: {
    count: number;
    max?: ModelTypes['Task_max_fields'] | undefined;
    min?: ModelTypes['Task_min_fields'] | undefined;
  };
  /** Boolean expression to filter rows from the table "Task". All fields are combined with a logical 'AND'. */
  ['Task_bool_exp']: {
    _and?: Array<ModelTypes['Task_bool_exp']> | undefined;
    _not?: ModelTypes['Task_bool_exp'] | undefined;
    _or?: Array<ModelTypes['Task_bool_exp']> | undefined;
    closureReason?: ModelTypes['String_comparison_exp'] | undefined;
    description?: ModelTypes['String_comparison_exp'] | undefined;
    hasSensitiveInfo?: ModelTypes['Boolean_comparison_exp'] | undefined;
    id?: ModelTypes['uuid_comparison_exp'] | undefined;
    isRejected?: ModelTypes['Boolean_comparison_exp'] | undefined;
    isSupportEngineerIdentityHidden?:
      | ModelTypes['Boolean_comparison_exp']
      | undefined;
    issueCategory?: ModelTypes['String_comparison_exp'] | undefined;
    linkedTickets?: ModelTypes['String_comparison_exp'] | undefined;
    name?: ModelTypes['String_comparison_exp'] | undefined;
    organizationId?: ModelTypes['String_comparison_exp'] | undefined;
    productDocId?: ModelTypes['uuid_comparison_exp'] | undefined;
    productVersion?: ModelTypes['String_comparison_exp'] | undefined;
    requestForInformation?: ModelTypes['String_comparison_exp'] | undefined;
    requestedByUserId?: ModelTypes['uuid_comparison_exp'] | undefined;
    reviewedByUserId?: ModelTypes['uuid_comparison_exp'] | undefined;
    rootChapterId?: ModelTypes['uuid_comparison_exp'] | undefined;
    rootChapterVersion?: ModelTypes['String_comparison_exp'] | undefined;
    salesForceTicketId?: ModelTypes['String_comparison_exp'] | undefined;
    severity?: ModelTypes['String_comparison_exp'] | undefined;
    severityUpdatedAt?: ModelTypes['timestamp_comparison_exp'] | undefined;
    status?: ModelTypes['String_comparison_exp'] | undefined;
    subCategory?: ModelTypes['String_comparison_exp'] | undefined;
    tenantId?: ModelTypes['uuid_comparison_exp'] | undefined;
    ticketRef?: ModelTypes['String_comparison_exp'] | undefined;
    type?: ModelTypes['String_comparison_exp'] | undefined;
    usersToNotify?: ModelTypes['String_comparison_exp'] | undefined;
  };
  ['Task_constraint']: Task_constraint;
  /** input type for inserting data into table "Task" */
  ['Task_insert_input']: {
    closureReason?: string | undefined;
    description?: string | undefined;
    hasSensitiveInfo?: boolean | undefined;
    id?: ModelTypes['uuid'] | undefined;
    isRejected?: boolean | undefined;
    isSupportEngineerIdentityHidden?: boolean | undefined;
    issueCategory?: string | undefined;
    linkedTickets?: string | undefined;
    name?: string | undefined;
    organizationId?: string | undefined;
    productDocId?: ModelTypes['uuid'] | undefined;
    productVersion?: string | undefined;
    requestForInformation?: string | undefined;
    requestedByUserId?: ModelTypes['uuid'] | undefined;
    reviewedByUserId?: ModelTypes['uuid'] | undefined;
    rootChapterId?: ModelTypes['uuid'] | undefined;
    rootChapterVersion?: string | undefined;
    salesForceTicketId?: string | undefined;
    severity?: string | undefined;
    severityUpdatedAt?: ModelTypes['timestamp'] | undefined;
    status?: string | undefined;
    subCategory?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    ticketRef?: string | undefined;
    type?: string | undefined;
    usersToNotify?: string | undefined;
  };
  /** aggregate max on columns */
  ['Task_max_fields']: {
    closureReason?: string | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    issueCategory?: string | undefined;
    linkedTickets?: string | undefined;
    name?: string | undefined;
    organizationId?: string | undefined;
    productDocId?: ModelTypes['uuid'] | undefined;
    productVersion?: string | undefined;
    requestForInformation?: string | undefined;
    requestedByUserId?: ModelTypes['uuid'] | undefined;
    reviewedByUserId?: ModelTypes['uuid'] | undefined;
    rootChapterId?: ModelTypes['uuid'] | undefined;
    rootChapterVersion?: string | undefined;
    salesForceTicketId?: string | undefined;
    severity?: string | undefined;
    severityUpdatedAt?: ModelTypes['timestamp'] | undefined;
    status?: string | undefined;
    subCategory?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    ticketRef?: string | undefined;
    type?: string | undefined;
    usersToNotify?: string | undefined;
  };
  /** aggregate min on columns */
  ['Task_min_fields']: {
    closureReason?: string | undefined;
    description?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    issueCategory?: string | undefined;
    linkedTickets?: string | undefined;
    name?: string | undefined;
    organizationId?: string | undefined;
    productDocId?: ModelTypes['uuid'] | undefined;
    productVersion?: string | undefined;
    requestForInformation?: string | undefined;
    requestedByUserId?: ModelTypes['uuid'] | undefined;
    reviewedByUserId?: ModelTypes['uuid'] | undefined;
    rootChapterId?: ModelTypes['uuid'] | undefined;
    rootChapterVersion?: string | undefined;
    salesForceTicketId?: string | undefined;
    severity?: string | undefined;
    severityUpdatedAt?: ModelTypes['timestamp'] | undefined;
    status?: string | undefined;
    subCategory?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    ticketRef?: string | undefined;
    type?: string | undefined;
    usersToNotify?: string | undefined;
  };
  /** response of any mutation on the table "Task" */
  ['Task_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<ModelTypes['Task']>;
  };
  /** on_conflict condition type for table "Task" */
  ['Task_on_conflict']: {
    constraint: ModelTypes['Task_constraint'];
    update_columns: Array<ModelTypes['Task_update_column']>;
    where?: ModelTypes['Task_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "Task". */
  ['Task_order_by']: {
    closureReason?: ModelTypes['order_by'] | undefined;
    description?: ModelTypes['order_by'] | undefined;
    hasSensitiveInfo?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    isRejected?: ModelTypes['order_by'] | undefined;
    isSupportEngineerIdentityHidden?: ModelTypes['order_by'] | undefined;
    issueCategory?: ModelTypes['order_by'] | undefined;
    linkedTickets?: ModelTypes['order_by'] | undefined;
    name?: ModelTypes['order_by'] | undefined;
    organizationId?: ModelTypes['order_by'] | undefined;
    productDocId?: ModelTypes['order_by'] | undefined;
    productVersion?: ModelTypes['order_by'] | undefined;
    requestForInformation?: ModelTypes['order_by'] | undefined;
    requestedByUserId?: ModelTypes['order_by'] | undefined;
    reviewedByUserId?: ModelTypes['order_by'] | undefined;
    rootChapterId?: ModelTypes['order_by'] | undefined;
    rootChapterVersion?: ModelTypes['order_by'] | undefined;
    salesForceTicketId?: ModelTypes['order_by'] | undefined;
    severity?: ModelTypes['order_by'] | undefined;
    severityUpdatedAt?: ModelTypes['order_by'] | undefined;
    status?: ModelTypes['order_by'] | undefined;
    subCategory?: ModelTypes['order_by'] | undefined;
    tenantId?: ModelTypes['order_by'] | undefined;
    ticketRef?: ModelTypes['order_by'] | undefined;
    type?: ModelTypes['order_by'] | undefined;
    usersToNotify?: ModelTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: Task */
  ['Task_pk_columns_input']: {
    id: ModelTypes['uuid'];
  };
  ['Task_select_column']: Task_select_column;
  /** input type for updating data in table "Task" */
  ['Task_set_input']: {
    closureReason?: string | undefined;
    description?: string | undefined;
    hasSensitiveInfo?: boolean | undefined;
    id?: ModelTypes['uuid'] | undefined;
    isRejected?: boolean | undefined;
    isSupportEngineerIdentityHidden?: boolean | undefined;
    issueCategory?: string | undefined;
    linkedTickets?: string | undefined;
    name?: string | undefined;
    organizationId?: string | undefined;
    productDocId?: ModelTypes['uuid'] | undefined;
    productVersion?: string | undefined;
    requestForInformation?: string | undefined;
    requestedByUserId?: ModelTypes['uuid'] | undefined;
    reviewedByUserId?: ModelTypes['uuid'] | undefined;
    rootChapterId?: ModelTypes['uuid'] | undefined;
    rootChapterVersion?: string | undefined;
    salesForceTicketId?: string | undefined;
    severity?: string | undefined;
    severityUpdatedAt?: ModelTypes['timestamp'] | undefined;
    status?: string | undefined;
    subCategory?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    ticketRef?: string | undefined;
    type?: string | undefined;
    usersToNotify?: string | undefined;
  };
  /** Streaming cursor of the table "Task" */
  ['Task_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ModelTypes['Task_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ModelTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['Task_stream_cursor_value_input']: {
    closureReason?: string | undefined;
    description?: string | undefined;
    hasSensitiveInfo?: boolean | undefined;
    id?: ModelTypes['uuid'] | undefined;
    isRejected?: boolean | undefined;
    isSupportEngineerIdentityHidden?: boolean | undefined;
    issueCategory?: string | undefined;
    linkedTickets?: string | undefined;
    name?: string | undefined;
    organizationId?: string | undefined;
    productDocId?: ModelTypes['uuid'] | undefined;
    productVersion?: string | undefined;
    requestForInformation?: string | undefined;
    requestedByUserId?: ModelTypes['uuid'] | undefined;
    reviewedByUserId?: ModelTypes['uuid'] | undefined;
    rootChapterId?: ModelTypes['uuid'] | undefined;
    rootChapterVersion?: string | undefined;
    salesForceTicketId?: string | undefined;
    severity?: string | undefined;
    severityUpdatedAt?: ModelTypes['timestamp'] | undefined;
    status?: string | undefined;
    subCategory?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    ticketRef?: string | undefined;
    type?: string | undefined;
    usersToNotify?: string | undefined;
  };
  ['Task_update_column']: Task_update_column;
  ['Task_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: ModelTypes['Task_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: ModelTypes['Task_bool_exp'];
  };
  /** columns and relationships of "Tenant" */
  ['Tenant']: {
    address: string;
    contact: string;
    createdAt: ModelTypes['timestamp'];
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId: ModelTypes['bigint'];
    emailId: string;
    firstName: string;
    id: ModelTypes['uuid'];
    lastName: string;
    name: string;
    organizationId: string;
    /** An array relationship */
    packages: Array<ModelTypes['TenantPackage']>;
    /** An aggregate relationship */
    packages_aggregate: ModelTypes['TenantPackage_aggregate'];
    sidebarLinkId?: ModelTypes['uuid'] | undefined;
    status: string;
    tenantCustomizationId?: ModelTypes['uuid'] | undefined;
    totalSpaceForDoc?: string | undefined;
    updatedAt: ModelTypes['timestamp'];
    updatedById?: ModelTypes['uuid'] | undefined;
    usedSpaceByDoc?: string | undefined;
    verificationStatus: string;
  };
  /** columns and relationships of "TenantPackage" */
  ['TenantPackage']: {
    id: ModelTypes['uuid'];
    /** An object relationship */
    package: ModelTypes['Package'];
    packageId: ModelTypes['uuid'];
    /** An object relationship */
    tenant: ModelTypes['Tenant'];
    tenantId: ModelTypes['uuid'];
  };
  /** aggregated selection of "TenantPackage" */
  ['TenantPackage_aggregate']: {
    aggregate?: ModelTypes['TenantPackage_aggregate_fields'] | undefined;
    nodes: Array<ModelTypes['TenantPackage']>;
  };
  ['TenantPackage_aggregate_bool_exp']: {
    count?: ModelTypes['TenantPackage_aggregate_bool_exp_count'] | undefined;
  };
  ['TenantPackage_aggregate_bool_exp_count']: {
    arguments?: Array<ModelTypes['TenantPackage_select_column']> | undefined;
    distinct?: boolean | undefined;
    filter?: ModelTypes['TenantPackage_bool_exp'] | undefined;
    predicate: ModelTypes['Int_comparison_exp'];
  };
  /** aggregate fields of "TenantPackage" */
  ['TenantPackage_aggregate_fields']: {
    count: number;
    max?: ModelTypes['TenantPackage_max_fields'] | undefined;
    min?: ModelTypes['TenantPackage_min_fields'] | undefined;
  };
  /** order by aggregate values of table "TenantPackage" */
  ['TenantPackage_aggregate_order_by']: {
    count?: ModelTypes['order_by'] | undefined;
    max?: ModelTypes['TenantPackage_max_order_by'] | undefined;
    min?: ModelTypes['TenantPackage_min_order_by'] | undefined;
  };
  /** input type for inserting array relation for remote table "TenantPackage" */
  ['TenantPackage_arr_rel_insert_input']: {
    data: Array<ModelTypes['TenantPackage_insert_input']>;
    /** upsert condition */
    on_conflict?: ModelTypes['TenantPackage_on_conflict'] | undefined;
  };
  /** Boolean expression to filter rows from the table "TenantPackage". All fields are combined with a logical 'AND'. */
  ['TenantPackage_bool_exp']: {
    _and?: Array<ModelTypes['TenantPackage_bool_exp']> | undefined;
    _not?: ModelTypes['TenantPackage_bool_exp'] | undefined;
    _or?: Array<ModelTypes['TenantPackage_bool_exp']> | undefined;
    id?: ModelTypes['uuid_comparison_exp'] | undefined;
    package?: ModelTypes['Package_bool_exp'] | undefined;
    packageId?: ModelTypes['uuid_comparison_exp'] | undefined;
    tenant?: ModelTypes['Tenant_bool_exp'] | undefined;
    tenantId?: ModelTypes['uuid_comparison_exp'] | undefined;
  };
  ['TenantPackage_constraint']: TenantPackage_constraint;
  /** input type for inserting data into table "TenantPackage" */
  ['TenantPackage_insert_input']: {
    id?: ModelTypes['uuid'] | undefined;
    package?: ModelTypes['Package_obj_rel_insert_input'] | undefined;
    packageId?: ModelTypes['uuid'] | undefined;
    tenant?: ModelTypes['Tenant_obj_rel_insert_input'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate max on columns */
  ['TenantPackage_max_fields']: {
    id?: ModelTypes['uuid'] | undefined;
    packageId?: ModelTypes['uuid'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
  };
  /** order by max() on columns of table "TenantPackage" */
  ['TenantPackage_max_order_by']: {
    id?: ModelTypes['order_by'] | undefined;
    packageId?: ModelTypes['order_by'] | undefined;
    tenantId?: ModelTypes['order_by'] | undefined;
  };
  /** aggregate min on columns */
  ['TenantPackage_min_fields']: {
    id?: ModelTypes['uuid'] | undefined;
    packageId?: ModelTypes['uuid'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
  };
  /** order by min() on columns of table "TenantPackage" */
  ['TenantPackage_min_order_by']: {
    id?: ModelTypes['order_by'] | undefined;
    packageId?: ModelTypes['order_by'] | undefined;
    tenantId?: ModelTypes['order_by'] | undefined;
  };
  /** response of any mutation on the table "TenantPackage" */
  ['TenantPackage_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<ModelTypes['TenantPackage']>;
  };
  /** on_conflict condition type for table "TenantPackage" */
  ['TenantPackage_on_conflict']: {
    constraint: ModelTypes['TenantPackage_constraint'];
    update_columns: Array<ModelTypes['TenantPackage_update_column']>;
    where?: ModelTypes['TenantPackage_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "TenantPackage". */
  ['TenantPackage_order_by']: {
    id?: ModelTypes['order_by'] | undefined;
    package?: ModelTypes['Package_order_by'] | undefined;
    packageId?: ModelTypes['order_by'] | undefined;
    tenant?: ModelTypes['Tenant_order_by'] | undefined;
    tenantId?: ModelTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: TenantPackage */
  ['TenantPackage_pk_columns_input']: {
    id: ModelTypes['uuid'];
  };
  ['TenantPackage_select_column']: TenantPackage_select_column;
  /** input type for updating data in table "TenantPackage" */
  ['TenantPackage_set_input']: {
    id?: ModelTypes['uuid'] | undefined;
    packageId?: ModelTypes['uuid'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
  };
  /** Streaming cursor of the table "TenantPackage" */
  ['TenantPackage_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ModelTypes['TenantPackage_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ModelTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['TenantPackage_stream_cursor_value_input']: {
    id?: ModelTypes['uuid'] | undefined;
    packageId?: ModelTypes['uuid'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
  };
  ['TenantPackage_update_column']: TenantPackage_update_column;
  ['TenantPackage_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: ModelTypes['TenantPackage_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: ModelTypes['TenantPackage_bool_exp'];
  };
  /** aggregated selection of "Tenant" */
  ['Tenant_aggregate']: {
    aggregate?: ModelTypes['Tenant_aggregate_fields'] | undefined;
    nodes: Array<ModelTypes['Tenant']>;
  };
  /** aggregate fields of "Tenant" */
  ['Tenant_aggregate_fields']: {
    avg?: ModelTypes['Tenant_avg_fields'] | undefined;
    count: number;
    max?: ModelTypes['Tenant_max_fields'] | undefined;
    min?: ModelTypes['Tenant_min_fields'] | undefined;
    stddev?: ModelTypes['Tenant_stddev_fields'] | undefined;
    stddev_pop?: ModelTypes['Tenant_stddev_pop_fields'] | undefined;
    stddev_samp?: ModelTypes['Tenant_stddev_samp_fields'] | undefined;
    sum?: ModelTypes['Tenant_sum_fields'] | undefined;
    var_pop?: ModelTypes['Tenant_var_pop_fields'] | undefined;
    var_samp?: ModelTypes['Tenant_var_samp_fields'] | undefined;
    variance?: ModelTypes['Tenant_variance_fields'] | undefined;
  };
  /** aggregate avg on columns */
  ['Tenant_avg_fields']: {
    cursorId?: number | undefined;
  };
  /** Boolean expression to filter rows from the table "Tenant". All fields are combined with a logical 'AND'. */
  ['Tenant_bool_exp']: {
    _and?: Array<ModelTypes['Tenant_bool_exp']> | undefined;
    _not?: ModelTypes['Tenant_bool_exp'] | undefined;
    _or?: Array<ModelTypes['Tenant_bool_exp']> | undefined;
    address?: ModelTypes['String_comparison_exp'] | undefined;
    contact?: ModelTypes['String_comparison_exp'] | undefined;
    createdAt?: ModelTypes['timestamp_comparison_exp'] | undefined;
    createdById?: ModelTypes['uuid_comparison_exp'] | undefined;
    cursorId?: ModelTypes['bigint_comparison_exp'] | undefined;
    emailId?: ModelTypes['String_comparison_exp'] | undefined;
    firstName?: ModelTypes['String_comparison_exp'] | undefined;
    id?: ModelTypes['uuid_comparison_exp'] | undefined;
    lastName?: ModelTypes['String_comparison_exp'] | undefined;
    name?: ModelTypes['String_comparison_exp'] | undefined;
    organizationId?: ModelTypes['String_comparison_exp'] | undefined;
    packages?: ModelTypes['TenantPackage_bool_exp'] | undefined;
    packages_aggregate?:
      | ModelTypes['TenantPackage_aggregate_bool_exp']
      | undefined;
    sidebarLinkId?: ModelTypes['uuid_comparison_exp'] | undefined;
    status?: ModelTypes['String_comparison_exp'] | undefined;
    tenantCustomizationId?: ModelTypes['uuid_comparison_exp'] | undefined;
    totalSpaceForDoc?: ModelTypes['String_comparison_exp'] | undefined;
    updatedAt?: ModelTypes['timestamp_comparison_exp'] | undefined;
    updatedById?: ModelTypes['uuid_comparison_exp'] | undefined;
    usedSpaceByDoc?: ModelTypes['String_comparison_exp'] | undefined;
    verificationStatus?: ModelTypes['String_comparison_exp'] | undefined;
  };
  ['Tenant_constraint']: Tenant_constraint;
  /** input type for incrementing numeric columns in table "Tenant" */
  ['Tenant_inc_input']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "Tenant" */
  ['Tenant_insert_input']: {
    address?: string | undefined;
    contact?: string | undefined;
    createdAt?: ModelTypes['timestamp'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    emailId?: string | undefined;
    firstName?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    organizationId?: string | undefined;
    packages?: ModelTypes['TenantPackage_arr_rel_insert_input'] | undefined;
    sidebarLinkId?: ModelTypes['uuid'] | undefined;
    status?: string | undefined;
    tenantCustomizationId?: ModelTypes['uuid'] | undefined;
    totalSpaceForDoc?: string | undefined;
    updatedAt?: ModelTypes['timestamp'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
    usedSpaceByDoc?: string | undefined;
    verificationStatus?: string | undefined;
  };
  /** aggregate max on columns */
  ['Tenant_max_fields']: {
    address?: string | undefined;
    contact?: string | undefined;
    createdAt?: ModelTypes['timestamp'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    emailId?: string | undefined;
    firstName?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    organizationId?: string | undefined;
    sidebarLinkId?: ModelTypes['uuid'] | undefined;
    status?: string | undefined;
    tenantCustomizationId?: ModelTypes['uuid'] | undefined;
    totalSpaceForDoc?: string | undefined;
    updatedAt?: ModelTypes['timestamp'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
    usedSpaceByDoc?: string | undefined;
    verificationStatus?: string | undefined;
  };
  /** aggregate min on columns */
  ['Tenant_min_fields']: {
    address?: string | undefined;
    contact?: string | undefined;
    createdAt?: ModelTypes['timestamp'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    emailId?: string | undefined;
    firstName?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    organizationId?: string | undefined;
    sidebarLinkId?: ModelTypes['uuid'] | undefined;
    status?: string | undefined;
    tenantCustomizationId?: ModelTypes['uuid'] | undefined;
    totalSpaceForDoc?: string | undefined;
    updatedAt?: ModelTypes['timestamp'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
    usedSpaceByDoc?: string | undefined;
    verificationStatus?: string | undefined;
  };
  /** response of any mutation on the table "Tenant" */
  ['Tenant_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<ModelTypes['Tenant']>;
  };
  /** input type for inserting object relation for remote table "Tenant" */
  ['Tenant_obj_rel_insert_input']: {
    data: ModelTypes['Tenant_insert_input'];
    /** upsert condition */
    on_conflict?: ModelTypes['Tenant_on_conflict'] | undefined;
  };
  /** on_conflict condition type for table "Tenant" */
  ['Tenant_on_conflict']: {
    constraint: ModelTypes['Tenant_constraint'];
    update_columns: Array<ModelTypes['Tenant_update_column']>;
    where?: ModelTypes['Tenant_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "Tenant". */
  ['Tenant_order_by']: {
    address?: ModelTypes['order_by'] | undefined;
    contact?: ModelTypes['order_by'] | undefined;
    createdAt?: ModelTypes['order_by'] | undefined;
    createdById?: ModelTypes['order_by'] | undefined;
    cursorId?: ModelTypes['order_by'] | undefined;
    emailId?: ModelTypes['order_by'] | undefined;
    firstName?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    lastName?: ModelTypes['order_by'] | undefined;
    name?: ModelTypes['order_by'] | undefined;
    organizationId?: ModelTypes['order_by'] | undefined;
    packages_aggregate?:
      | ModelTypes['TenantPackage_aggregate_order_by']
      | undefined;
    sidebarLinkId?: ModelTypes['order_by'] | undefined;
    status?: ModelTypes['order_by'] | undefined;
    tenantCustomizationId?: ModelTypes['order_by'] | undefined;
    totalSpaceForDoc?: ModelTypes['order_by'] | undefined;
    updatedAt?: ModelTypes['order_by'] | undefined;
    updatedById?: ModelTypes['order_by'] | undefined;
    usedSpaceByDoc?: ModelTypes['order_by'] | undefined;
    verificationStatus?: ModelTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: Tenant */
  ['Tenant_pk_columns_input']: {
    id: ModelTypes['uuid'];
  };
  ['Tenant_select_column']: Tenant_select_column;
  /** input type for updating data in table "Tenant" */
  ['Tenant_set_input']: {
    address?: string | undefined;
    contact?: string | undefined;
    createdAt?: ModelTypes['timestamp'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    emailId?: string | undefined;
    firstName?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    organizationId?: string | undefined;
    sidebarLinkId?: ModelTypes['uuid'] | undefined;
    status?: string | undefined;
    tenantCustomizationId?: ModelTypes['uuid'] | undefined;
    totalSpaceForDoc?: string | undefined;
    updatedAt?: ModelTypes['timestamp'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
    usedSpaceByDoc?: string | undefined;
    verificationStatus?: string | undefined;
  };
  /** aggregate stddev on columns */
  ['Tenant_stddev_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['Tenant_stddev_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['Tenant_stddev_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** Streaming cursor of the table "Tenant" */
  ['Tenant_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ModelTypes['Tenant_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ModelTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['Tenant_stream_cursor_value_input']: {
    address?: string | undefined;
    contact?: string | undefined;
    createdAt?: ModelTypes['timestamp'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    emailId?: string | undefined;
    firstName?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    organizationId?: string | undefined;
    sidebarLinkId?: ModelTypes['uuid'] | undefined;
    status?: string | undefined;
    tenantCustomizationId?: ModelTypes['uuid'] | undefined;
    totalSpaceForDoc?: string | undefined;
    updatedAt?: ModelTypes['timestamp'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
    usedSpaceByDoc?: string | undefined;
    verificationStatus?: string | undefined;
  };
  /** aggregate sum on columns */
  ['Tenant_sum_fields']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  ['Tenant_update_column']: Tenant_update_column;
  ['Tenant_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: ModelTypes['Tenant_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: ModelTypes['Tenant_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: ModelTypes['Tenant_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['Tenant_var_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate var_samp on columns */
  ['Tenant_var_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate variance on columns */
  ['Tenant_variance_fields']: {
    cursorId?: number | undefined;
  };
  /** columns and relationships of "User" */
  ['User']: {
    address?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    createdAt: ModelTypes['timestamp'];
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId: ModelTypes['bigint'];
    displayName?: string | undefined;
    email: string;
    firstName: string;
    /** An array relationship */
    groups: Array<ModelTypes['UserGroup']>;
    /** An aggregate relationship */
    groups_aggregate: ModelTypes['UserGroup_aggregate'];
    id: ModelTypes['uuid'];
    isMigrated?: boolean | undefined;
    isTenantAdmin?: boolean | undefined;
    jobTitle?: string | undefined;
    lastName: string;
    organizationId: string;
    postalCode?: string | undefined;
    preferredCurrency?: string | undefined;
    profilePictureUrl?: string | undefined;
    role?: string | undefined;
    /** An array relationship */
    roles: Array<ModelTypes['UserRole']>;
    /** An aggregate relationship */
    roles_aggregate: ModelTypes['UserRole_aggregate'];
    secondaryEmail: string;
    state?: string | undefined;
    status: ModelTypes['Status_enum'];
    /** An object relationship */
    tenant: ModelTypes['Tenant'];
    tenantId: ModelTypes['uuid'];
    updatedAt?: ModelTypes['timestamp'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
    userType: ModelTypes['UserType_enum'];
  };
  /** columns and relationships of "UserGroup" */
  ['UserGroup']: {
    /** An object relationship */
    group: ModelTypes['Group'];
    groupId: ModelTypes['uuid'];
    id: ModelTypes['uuid'];
    /** An object relationship */
    user: ModelTypes['User'];
    userId: ModelTypes['uuid'];
  };
  /** aggregated selection of "UserGroup" */
  ['UserGroup_aggregate']: {
    aggregate?: ModelTypes['UserGroup_aggregate_fields'] | undefined;
    nodes: Array<ModelTypes['UserGroup']>;
  };
  ['UserGroup_aggregate_bool_exp']: {
    count?: ModelTypes['UserGroup_aggregate_bool_exp_count'] | undefined;
  };
  ['UserGroup_aggregate_bool_exp_count']: {
    arguments?: Array<ModelTypes['UserGroup_select_column']> | undefined;
    distinct?: boolean | undefined;
    filter?: ModelTypes['UserGroup_bool_exp'] | undefined;
    predicate: ModelTypes['Int_comparison_exp'];
  };
  /** aggregate fields of "UserGroup" */
  ['UserGroup_aggregate_fields']: {
    count: number;
    max?: ModelTypes['UserGroup_max_fields'] | undefined;
    min?: ModelTypes['UserGroup_min_fields'] | undefined;
  };
  /** order by aggregate values of table "UserGroup" */
  ['UserGroup_aggregate_order_by']: {
    count?: ModelTypes['order_by'] | undefined;
    max?: ModelTypes['UserGroup_max_order_by'] | undefined;
    min?: ModelTypes['UserGroup_min_order_by'] | undefined;
  };
  /** input type for inserting array relation for remote table "UserGroup" */
  ['UserGroup_arr_rel_insert_input']: {
    data: Array<ModelTypes['UserGroup_insert_input']>;
    /** upsert condition */
    on_conflict?: ModelTypes['UserGroup_on_conflict'] | undefined;
  };
  /** Boolean expression to filter rows from the table "UserGroup". All fields are combined with a logical 'AND'. */
  ['UserGroup_bool_exp']: {
    _and?: Array<ModelTypes['UserGroup_bool_exp']> | undefined;
    _not?: ModelTypes['UserGroup_bool_exp'] | undefined;
    _or?: Array<ModelTypes['UserGroup_bool_exp']> | undefined;
    group?: ModelTypes['Group_bool_exp'] | undefined;
    groupId?: ModelTypes['uuid_comparison_exp'] | undefined;
    id?: ModelTypes['uuid_comparison_exp'] | undefined;
    user?: ModelTypes['User_bool_exp'] | undefined;
    userId?: ModelTypes['uuid_comparison_exp'] | undefined;
  };
  ['UserGroup_constraint']: UserGroup_constraint;
  /** input type for inserting data into table "UserGroup" */
  ['UserGroup_insert_input']: {
    group?: ModelTypes['Group_obj_rel_insert_input'] | undefined;
    groupId?: ModelTypes['uuid'] | undefined;
    id?: ModelTypes['uuid'] | undefined;
    user?: ModelTypes['User_obj_rel_insert_input'] | undefined;
    userId?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate max on columns */
  ['UserGroup_max_fields']: {
    groupId?: ModelTypes['uuid'] | undefined;
    id?: ModelTypes['uuid'] | undefined;
    userId?: ModelTypes['uuid'] | undefined;
  };
  /** order by max() on columns of table "UserGroup" */
  ['UserGroup_max_order_by']: {
    groupId?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    userId?: ModelTypes['order_by'] | undefined;
  };
  /** aggregate min on columns */
  ['UserGroup_min_fields']: {
    groupId?: ModelTypes['uuid'] | undefined;
    id?: ModelTypes['uuid'] | undefined;
    userId?: ModelTypes['uuid'] | undefined;
  };
  /** order by min() on columns of table "UserGroup" */
  ['UserGroup_min_order_by']: {
    groupId?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    userId?: ModelTypes['order_by'] | undefined;
  };
  /** response of any mutation on the table "UserGroup" */
  ['UserGroup_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<ModelTypes['UserGroup']>;
  };
  /** on_conflict condition type for table "UserGroup" */
  ['UserGroup_on_conflict']: {
    constraint: ModelTypes['UserGroup_constraint'];
    update_columns: Array<ModelTypes['UserGroup_update_column']>;
    where?: ModelTypes['UserGroup_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "UserGroup". */
  ['UserGroup_order_by']: {
    group?: ModelTypes['Group_order_by'] | undefined;
    groupId?: ModelTypes['order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    user?: ModelTypes['User_order_by'] | undefined;
    userId?: ModelTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: UserGroup */
  ['UserGroup_pk_columns_input']: {
    id: ModelTypes['uuid'];
  };
  ['UserGroup_select_column']: UserGroup_select_column;
  /** input type for updating data in table "UserGroup" */
  ['UserGroup_set_input']: {
    groupId?: ModelTypes['uuid'] | undefined;
    id?: ModelTypes['uuid'] | undefined;
    userId?: ModelTypes['uuid'] | undefined;
  };
  /** Streaming cursor of the table "UserGroup" */
  ['UserGroup_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ModelTypes['UserGroup_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ModelTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['UserGroup_stream_cursor_value_input']: {
    groupId?: ModelTypes['uuid'] | undefined;
    id?: ModelTypes['uuid'] | undefined;
    userId?: ModelTypes['uuid'] | undefined;
  };
  ['UserGroup_update_column']: UserGroup_update_column;
  ['UserGroup_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: ModelTypes['UserGroup_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: ModelTypes['UserGroup_bool_exp'];
  };
  /** columns and relationships of "UserRole" */
  ['UserRole']: {
    id: ModelTypes['uuid'];
    /** An object relationship */
    role: ModelTypes['Role'];
    roleId: ModelTypes['uuid'];
    /** An object relationship */
    user: ModelTypes['User'];
    userId: ModelTypes['uuid'];
  };
  /** aggregated selection of "UserRole" */
  ['UserRole_aggregate']: {
    aggregate?: ModelTypes['UserRole_aggregate_fields'] | undefined;
    nodes: Array<ModelTypes['UserRole']>;
  };
  ['UserRole_aggregate_bool_exp']: {
    count?: ModelTypes['UserRole_aggregate_bool_exp_count'] | undefined;
  };
  ['UserRole_aggregate_bool_exp_count']: {
    arguments?: Array<ModelTypes['UserRole_select_column']> | undefined;
    distinct?: boolean | undefined;
    filter?: ModelTypes['UserRole_bool_exp'] | undefined;
    predicate: ModelTypes['Int_comparison_exp'];
  };
  /** aggregate fields of "UserRole" */
  ['UserRole_aggregate_fields']: {
    count: number;
    max?: ModelTypes['UserRole_max_fields'] | undefined;
    min?: ModelTypes['UserRole_min_fields'] | undefined;
  };
  /** order by aggregate values of table "UserRole" */
  ['UserRole_aggregate_order_by']: {
    count?: ModelTypes['order_by'] | undefined;
    max?: ModelTypes['UserRole_max_order_by'] | undefined;
    min?: ModelTypes['UserRole_min_order_by'] | undefined;
  };
  /** input type for inserting array relation for remote table "UserRole" */
  ['UserRole_arr_rel_insert_input']: {
    data: Array<ModelTypes['UserRole_insert_input']>;
    /** upsert condition */
    on_conflict?: ModelTypes['UserRole_on_conflict'] | undefined;
  };
  /** Boolean expression to filter rows from the table "UserRole". All fields are combined with a logical 'AND'. */
  ['UserRole_bool_exp']: {
    _and?: Array<ModelTypes['UserRole_bool_exp']> | undefined;
    _not?: ModelTypes['UserRole_bool_exp'] | undefined;
    _or?: Array<ModelTypes['UserRole_bool_exp']> | undefined;
    id?: ModelTypes['uuid_comparison_exp'] | undefined;
    role?: ModelTypes['Role_bool_exp'] | undefined;
    roleId?: ModelTypes['uuid_comparison_exp'] | undefined;
    user?: ModelTypes['User_bool_exp'] | undefined;
    userId?: ModelTypes['uuid_comparison_exp'] | undefined;
  };
  ['UserRole_constraint']: UserRole_constraint;
  /** input type for inserting data into table "UserRole" */
  ['UserRole_insert_input']: {
    id?: ModelTypes['uuid'] | undefined;
    role?: ModelTypes['Role_obj_rel_insert_input'] | undefined;
    roleId?: ModelTypes['uuid'] | undefined;
    user?: ModelTypes['User_obj_rel_insert_input'] | undefined;
    userId?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate max on columns */
  ['UserRole_max_fields']: {
    id?: ModelTypes['uuid'] | undefined;
    roleId?: ModelTypes['uuid'] | undefined;
    userId?: ModelTypes['uuid'] | undefined;
  };
  /** order by max() on columns of table "UserRole" */
  ['UserRole_max_order_by']: {
    id?: ModelTypes['order_by'] | undefined;
    roleId?: ModelTypes['order_by'] | undefined;
    userId?: ModelTypes['order_by'] | undefined;
  };
  /** aggregate min on columns */
  ['UserRole_min_fields']: {
    id?: ModelTypes['uuid'] | undefined;
    roleId?: ModelTypes['uuid'] | undefined;
    userId?: ModelTypes['uuid'] | undefined;
  };
  /** order by min() on columns of table "UserRole" */
  ['UserRole_min_order_by']: {
    id?: ModelTypes['order_by'] | undefined;
    roleId?: ModelTypes['order_by'] | undefined;
    userId?: ModelTypes['order_by'] | undefined;
  };
  /** response of any mutation on the table "UserRole" */
  ['UserRole_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<ModelTypes['UserRole']>;
  };
  /** on_conflict condition type for table "UserRole" */
  ['UserRole_on_conflict']: {
    constraint: ModelTypes['UserRole_constraint'];
    update_columns: Array<ModelTypes['UserRole_update_column']>;
    where?: ModelTypes['UserRole_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "UserRole". */
  ['UserRole_order_by']: {
    id?: ModelTypes['order_by'] | undefined;
    role?: ModelTypes['Role_order_by'] | undefined;
    roleId?: ModelTypes['order_by'] | undefined;
    user?: ModelTypes['User_order_by'] | undefined;
    userId?: ModelTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: UserRole */
  ['UserRole_pk_columns_input']: {
    id: ModelTypes['uuid'];
  };
  ['UserRole_select_column']: UserRole_select_column;
  /** input type for updating data in table "UserRole" */
  ['UserRole_set_input']: {
    id?: ModelTypes['uuid'] | undefined;
    roleId?: ModelTypes['uuid'] | undefined;
    userId?: ModelTypes['uuid'] | undefined;
  };
  /** Streaming cursor of the table "UserRole" */
  ['UserRole_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ModelTypes['UserRole_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ModelTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['UserRole_stream_cursor_value_input']: {
    id?: ModelTypes['uuid'] | undefined;
    roleId?: ModelTypes['uuid'] | undefined;
    userId?: ModelTypes['uuid'] | undefined;
  };
  ['UserRole_update_column']: UserRole_update_column;
  ['UserRole_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: ModelTypes['UserRole_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: ModelTypes['UserRole_bool_exp'];
  };
  /** columns and relationships of "UserType" */
  ['UserType']: {
    value: string;
  };
  /** aggregated selection of "UserType" */
  ['UserType_aggregate']: {
    aggregate?: ModelTypes['UserType_aggregate_fields'] | undefined;
    nodes: Array<ModelTypes['UserType']>;
  };
  /** aggregate fields of "UserType" */
  ['UserType_aggregate_fields']: {
    count: number;
    max?: ModelTypes['UserType_max_fields'] | undefined;
    min?: ModelTypes['UserType_min_fields'] | undefined;
  };
  /** Boolean expression to filter rows from the table "UserType". All fields are combined with a logical 'AND'. */
  ['UserType_bool_exp']: {
    _and?: Array<ModelTypes['UserType_bool_exp']> | undefined;
    _not?: ModelTypes['UserType_bool_exp'] | undefined;
    _or?: Array<ModelTypes['UserType_bool_exp']> | undefined;
    value?: ModelTypes['String_comparison_exp'] | undefined;
  };
  ['UserType_constraint']: UserType_constraint;
  ['UserType_enum']: UserType_enum;
  /** Boolean expression to compare columns of type "UserType_enum". All fields are combined with logical 'AND'. */
  ['UserType_enum_comparison_exp']: {
    _eq?: ModelTypes['UserType_enum'] | undefined;
    _in?: Array<ModelTypes['UserType_enum']> | undefined;
    _is_null?: boolean | undefined;
    _neq?: ModelTypes['UserType_enum'] | undefined;
    _nin?: Array<ModelTypes['UserType_enum']> | undefined;
  };
  /** input type for inserting data into table "UserType" */
  ['UserType_insert_input']: {
    value?: string | undefined;
  };
  /** aggregate max on columns */
  ['UserType_max_fields']: {
    value?: string | undefined;
  };
  /** aggregate min on columns */
  ['UserType_min_fields']: {
    value?: string | undefined;
  };
  /** response of any mutation on the table "UserType" */
  ['UserType_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<ModelTypes['UserType']>;
  };
  /** on_conflict condition type for table "UserType" */
  ['UserType_on_conflict']: {
    constraint: ModelTypes['UserType_constraint'];
    update_columns: Array<ModelTypes['UserType_update_column']>;
    where?: ModelTypes['UserType_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "UserType". */
  ['UserType_order_by']: {
    value?: ModelTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: UserType */
  ['UserType_pk_columns_input']: {
    value: string;
  };
  ['UserType_select_column']: UserType_select_column;
  /** input type for updating data in table "UserType" */
  ['UserType_set_input']: {
    value?: string | undefined;
  };
  /** Streaming cursor of the table "UserType" */
  ['UserType_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ModelTypes['UserType_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ModelTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['UserType_stream_cursor_value_input']: {
    value?: string | undefined;
  };
  ['UserType_update_column']: UserType_update_column;
  ['UserType_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: ModelTypes['UserType_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: ModelTypes['UserType_bool_exp'];
  };
  /** aggregated selection of "User" */
  ['User_aggregate']: {
    aggregate?: ModelTypes['User_aggregate_fields'] | undefined;
    nodes: Array<ModelTypes['User']>;
  };
  /** aggregate fields of "User" */
  ['User_aggregate_fields']: {
    avg?: ModelTypes['User_avg_fields'] | undefined;
    count: number;
    max?: ModelTypes['User_max_fields'] | undefined;
    min?: ModelTypes['User_min_fields'] | undefined;
    stddev?: ModelTypes['User_stddev_fields'] | undefined;
    stddev_pop?: ModelTypes['User_stddev_pop_fields'] | undefined;
    stddev_samp?: ModelTypes['User_stddev_samp_fields'] | undefined;
    sum?: ModelTypes['User_sum_fields'] | undefined;
    var_pop?: ModelTypes['User_var_pop_fields'] | undefined;
    var_samp?: ModelTypes['User_var_samp_fields'] | undefined;
    variance?: ModelTypes['User_variance_fields'] | undefined;
  };
  /** aggregate avg on columns */
  ['User_avg_fields']: {
    cursorId?: number | undefined;
  };
  /** Boolean expression to filter rows from the table "User". All fields are combined with a logical 'AND'. */
  ['User_bool_exp']: {
    _and?: Array<ModelTypes['User_bool_exp']> | undefined;
    _not?: ModelTypes['User_bool_exp'] | undefined;
    _or?: Array<ModelTypes['User_bool_exp']> | undefined;
    address?: ModelTypes['String_comparison_exp'] | undefined;
    city?: ModelTypes['String_comparison_exp'] | undefined;
    country?: ModelTypes['String_comparison_exp'] | undefined;
    createdAt?: ModelTypes['timestamp_comparison_exp'] | undefined;
    createdById?: ModelTypes['uuid_comparison_exp'] | undefined;
    cursorId?: ModelTypes['bigint_comparison_exp'] | undefined;
    displayName?: ModelTypes['String_comparison_exp'] | undefined;
    email?: ModelTypes['String_comparison_exp'] | undefined;
    firstName?: ModelTypes['String_comparison_exp'] | undefined;
    groups?: ModelTypes['UserGroup_bool_exp'] | undefined;
    groups_aggregate?: ModelTypes['UserGroup_aggregate_bool_exp'] | undefined;
    id?: ModelTypes['uuid_comparison_exp'] | undefined;
    isMigrated?: ModelTypes['Boolean_comparison_exp'] | undefined;
    isTenantAdmin?: ModelTypes['Boolean_comparison_exp'] | undefined;
    jobTitle?: ModelTypes['String_comparison_exp'] | undefined;
    lastName?: ModelTypes['String_comparison_exp'] | undefined;
    organizationId?: ModelTypes['String_comparison_exp'] | undefined;
    postalCode?: ModelTypes['String_comparison_exp'] | undefined;
    preferredCurrency?: ModelTypes['String_comparison_exp'] | undefined;
    profilePictureUrl?: ModelTypes['String_comparison_exp'] | undefined;
    role?: ModelTypes['String_comparison_exp'] | undefined;
    roles?: ModelTypes['UserRole_bool_exp'] | undefined;
    roles_aggregate?: ModelTypes['UserRole_aggregate_bool_exp'] | undefined;
    secondaryEmail?: ModelTypes['String_comparison_exp'] | undefined;
    state?: ModelTypes['String_comparison_exp'] | undefined;
    status?: ModelTypes['Status_enum_comparison_exp'] | undefined;
    tenant?: ModelTypes['Tenant_bool_exp'] | undefined;
    tenantId?: ModelTypes['uuid_comparison_exp'] | undefined;
    updatedAt?: ModelTypes['timestamp_comparison_exp'] | undefined;
    updatedById?: ModelTypes['uuid_comparison_exp'] | undefined;
    userType?: ModelTypes['UserType_enum_comparison_exp'] | undefined;
  };
  ['User_constraint']: User_constraint;
  /** input type for incrementing numeric columns in table "User" */
  ['User_inc_input']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "User" */
  ['User_insert_input']: {
    address?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    createdAt?: ModelTypes['timestamp'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    displayName?: string | undefined;
    email?: string | undefined;
    firstName?: string | undefined;
    groups?: ModelTypes['UserGroup_arr_rel_insert_input'] | undefined;
    id?: ModelTypes['uuid'] | undefined;
    isMigrated?: boolean | undefined;
    isTenantAdmin?: boolean | undefined;
    jobTitle?: string | undefined;
    lastName?: string | undefined;
    organizationId?: string | undefined;
    postalCode?: string | undefined;
    preferredCurrency?: string | undefined;
    profilePictureUrl?: string | undefined;
    role?: string | undefined;
    roles?: ModelTypes['UserRole_arr_rel_insert_input'] | undefined;
    secondaryEmail?: string | undefined;
    state?: string | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenant?: ModelTypes['Tenant_obj_rel_insert_input'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamp'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
    userType?: ModelTypes['UserType_enum'] | undefined;
  };
  /** aggregate max on columns */
  ['User_max_fields']: {
    address?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    createdAt?: ModelTypes['timestamp'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    displayName?: string | undefined;
    email?: string | undefined;
    firstName?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    jobTitle?: string | undefined;
    lastName?: string | undefined;
    organizationId?: string | undefined;
    postalCode?: string | undefined;
    preferredCurrency?: string | undefined;
    profilePictureUrl?: string | undefined;
    role?: string | undefined;
    secondaryEmail?: string | undefined;
    state?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamp'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** aggregate min on columns */
  ['User_min_fields']: {
    address?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    createdAt?: ModelTypes['timestamp'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    displayName?: string | undefined;
    email?: string | undefined;
    firstName?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    jobTitle?: string | undefined;
    lastName?: string | undefined;
    organizationId?: string | undefined;
    postalCode?: string | undefined;
    preferredCurrency?: string | undefined;
    profilePictureUrl?: string | undefined;
    role?: string | undefined;
    secondaryEmail?: string | undefined;
    state?: string | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamp'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
  };
  /** response of any mutation on the table "User" */
  ['User_mutation_response']: {
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<ModelTypes['User']>;
  };
  /** input type for inserting object relation for remote table "User" */
  ['User_obj_rel_insert_input']: {
    data: ModelTypes['User_insert_input'];
    /** upsert condition */
    on_conflict?: ModelTypes['User_on_conflict'] | undefined;
  };
  /** on_conflict condition type for table "User" */
  ['User_on_conflict']: {
    constraint: ModelTypes['User_constraint'];
    update_columns: Array<ModelTypes['User_update_column']>;
    where?: ModelTypes['User_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "User". */
  ['User_order_by']: {
    address?: ModelTypes['order_by'] | undefined;
    city?: ModelTypes['order_by'] | undefined;
    country?: ModelTypes['order_by'] | undefined;
    createdAt?: ModelTypes['order_by'] | undefined;
    createdById?: ModelTypes['order_by'] | undefined;
    cursorId?: ModelTypes['order_by'] | undefined;
    displayName?: ModelTypes['order_by'] | undefined;
    email?: ModelTypes['order_by'] | undefined;
    firstName?: ModelTypes['order_by'] | undefined;
    groups_aggregate?: ModelTypes['UserGroup_aggregate_order_by'] | undefined;
    id?: ModelTypes['order_by'] | undefined;
    isMigrated?: ModelTypes['order_by'] | undefined;
    isTenantAdmin?: ModelTypes['order_by'] | undefined;
    jobTitle?: ModelTypes['order_by'] | undefined;
    lastName?: ModelTypes['order_by'] | undefined;
    organizationId?: ModelTypes['order_by'] | undefined;
    postalCode?: ModelTypes['order_by'] | undefined;
    preferredCurrency?: ModelTypes['order_by'] | undefined;
    profilePictureUrl?: ModelTypes['order_by'] | undefined;
    role?: ModelTypes['order_by'] | undefined;
    roles_aggregate?: ModelTypes['UserRole_aggregate_order_by'] | undefined;
    secondaryEmail?: ModelTypes['order_by'] | undefined;
    state?: ModelTypes['order_by'] | undefined;
    status?: ModelTypes['order_by'] | undefined;
    tenant?: ModelTypes['Tenant_order_by'] | undefined;
    tenantId?: ModelTypes['order_by'] | undefined;
    updatedAt?: ModelTypes['order_by'] | undefined;
    updatedById?: ModelTypes['order_by'] | undefined;
    userType?: ModelTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: User */
  ['User_pk_columns_input']: {
    id: ModelTypes['uuid'];
  };
  ['User_select_column']: User_select_column;
  /** input type for updating data in table "User" */
  ['User_set_input']: {
    address?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    createdAt?: ModelTypes['timestamp'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    displayName?: string | undefined;
    email?: string | undefined;
    firstName?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    isMigrated?: boolean | undefined;
    isTenantAdmin?: boolean | undefined;
    jobTitle?: string | undefined;
    lastName?: string | undefined;
    organizationId?: string | undefined;
    postalCode?: string | undefined;
    preferredCurrency?: string | undefined;
    profilePictureUrl?: string | undefined;
    role?: string | undefined;
    secondaryEmail?: string | undefined;
    state?: string | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamp'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
    userType?: ModelTypes['UserType_enum'] | undefined;
  };
  /** aggregate stddev on columns */
  ['User_stddev_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['User_stddev_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['User_stddev_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** Streaming cursor of the table "User" */
  ['User_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: ModelTypes['User_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: ModelTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['User_stream_cursor_value_input']: {
    address?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    createdAt?: ModelTypes['timestamp'] | undefined;
    createdById?: ModelTypes['uuid'] | undefined;
    cursorId?: ModelTypes['bigint'] | undefined;
    displayName?: string | undefined;
    email?: string | undefined;
    firstName?: string | undefined;
    id?: ModelTypes['uuid'] | undefined;
    isMigrated?: boolean | undefined;
    isTenantAdmin?: boolean | undefined;
    jobTitle?: string | undefined;
    lastName?: string | undefined;
    organizationId?: string | undefined;
    postalCode?: string | undefined;
    preferredCurrency?: string | undefined;
    profilePictureUrl?: string | undefined;
    role?: string | undefined;
    secondaryEmail?: string | undefined;
    state?: string | undefined;
    status?: ModelTypes['Status_enum'] | undefined;
    tenantId?: ModelTypes['uuid'] | undefined;
    updatedAt?: ModelTypes['timestamp'] | undefined;
    updatedById?: ModelTypes['uuid'] | undefined;
    userType?: ModelTypes['UserType_enum'] | undefined;
  };
  /** aggregate sum on columns */
  ['User_sum_fields']: {
    cursorId?: ModelTypes['bigint'] | undefined;
  };
  ['User_update_column']: User_update_column;
  ['User_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: ModelTypes['User_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: ModelTypes['User_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: ModelTypes['User_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['User_var_pop_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate var_samp on columns */
  ['User_var_samp_fields']: {
    cursorId?: number | undefined;
  };
  /** aggregate variance on columns */
  ['User_variance_fields']: {
    cursorId?: number | undefined;
  };
  ['bigint']: any;
  /** Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'. */
  ['bigint_comparison_exp']: {
    _eq?: ModelTypes['bigint'] | undefined;
    _gt?: ModelTypes['bigint'] | undefined;
    _gte?: ModelTypes['bigint'] | undefined;
    _in?: Array<ModelTypes['bigint']> | undefined;
    _is_null?: boolean | undefined;
    _lt?: ModelTypes['bigint'] | undefined;
    _lte?: ModelTypes['bigint'] | undefined;
    _neq?: ModelTypes['bigint'] | undefined;
    _nin?: Array<ModelTypes['bigint']> | undefined;
  };
  ['cursor_ordering']: cursor_ordering;
  /** mutation root */
  ['mutation_root']: {
    /** delete data from the table: "Application" */
    delete_Application?:
      | ModelTypes['Application_mutation_response']
      | undefined;
    /** delete data from the table: "ApplicationIntegration" */
    delete_ApplicationIntegration?:
      | ModelTypes['ApplicationIntegration_mutation_response']
      | undefined;
    /** delete single row from the table: "ApplicationIntegration" */
    delete_ApplicationIntegration_by_pk?:
      | ModelTypes['ApplicationIntegration']
      | undefined;
    /** delete single row from the table: "Application" */
    delete_Application_by_pk?: ModelTypes['Application'] | undefined;
    /** delete data from the table: "CaseSeverity" */
    delete_CaseSeverity?:
      | ModelTypes['CaseSeverity_mutation_response']
      | undefined;
    /** delete single row from the table: "CaseSeverity" */
    delete_CaseSeverity_by_pk?: ModelTypes['CaseSeverity'] | undefined;
    /** delete data from the table: "ClosureReason" */
    delete_ClosureReason?:
      | ModelTypes['ClosureReason_mutation_response']
      | undefined;
    /** delete single row from the table: "ClosureReason" */
    delete_ClosureReason_by_pk?: ModelTypes['ClosureReason'] | undefined;
    /** delete data from the table: "Currency" */
    delete_Currency?: ModelTypes['Currency_mutation_response'] | undefined;
    /** delete single row from the table: "Currency" */
    delete_Currency_by_pk?: ModelTypes['Currency'] | undefined;
    /** delete data from the table: "CustomRole" */
    delete_CustomRole?: ModelTypes['CustomRole_mutation_response'] | undefined;
    /** delete single row from the table: "CustomRole" */
    delete_CustomRole_by_pk?: ModelTypes['CustomRole'] | undefined;
    /** delete data from the table: "Group" */
    delete_Group?: ModelTypes['Group_mutation_response'] | undefined;
    /** delete data from the table: "GroupRole" */
    delete_GroupRole?: ModelTypes['GroupRole_mutation_response'] | undefined;
    /** delete single row from the table: "GroupRole" */
    delete_GroupRole_by_pk?: ModelTypes['GroupRole'] | undefined;
    /** delete single row from the table: "Group" */
    delete_Group_by_pk?: ModelTypes['Group'] | undefined;
    /** delete data from the table: "Industry" */
    delete_Industry?: ModelTypes['Industry_mutation_response'] | undefined;
    /** delete single row from the table: "Industry" */
    delete_Industry_by_pk?: ModelTypes['Industry'] | undefined;
    /** delete data from the table: "IssueCategory" */
    delete_IssueCategory?:
      | ModelTypes['IssueCategory_mutation_response']
      | undefined;
    /** delete single row from the table: "IssueCategory" */
    delete_IssueCategory_by_pk?: ModelTypes['IssueCategory'] | undefined;
    /** delete data from the table: "Object" */
    delete_Object?: ModelTypes['Object_mutation_response'] | undefined;
    /** delete single row from the table: "Object" */
    delete_Object_by_pk?: ModelTypes['Object'] | undefined;
    /** delete data from the table: "Organization" */
    delete_Organization?:
      | ModelTypes['Organization_mutation_response']
      | undefined;
    /** delete single row from the table: "Organization" */
    delete_Organization_by_pk?: ModelTypes['Organization'] | undefined;
    /** delete data from the table: "Package" */
    delete_Package?: ModelTypes['Package_mutation_response'] | undefined;
    /** delete data from the table: "PackageApplication" */
    delete_PackageApplication?:
      | ModelTypes['PackageApplication_mutation_response']
      | undefined;
    /** delete single row from the table: "PackageApplication" */
    delete_PackageApplication_by_pk?:
      | ModelTypes['PackageApplication']
      | undefined;
    /** delete single row from the table: "Package" */
    delete_Package_by_pk?: ModelTypes['Package'] | undefined;
    /** delete data from the table: "Product" */
    delete_Product?: ModelTypes['Product_mutation_response'] | undefined;
    /** delete data from the table: "ProductCategory" */
    delete_ProductCategory?:
      | ModelTypes['ProductCategory_mutation_response']
      | undefined;
    /** delete single row from the table: "ProductCategory" */
    delete_ProductCategory_by_pk?: ModelTypes['ProductCategory'] | undefined;
    /** delete data from the table: "ProductVersion" */
    delete_ProductVersion?:
      | ModelTypes['ProductVersion_mutation_response']
      | undefined;
    /** delete single row from the table: "ProductVersion" */
    delete_ProductVersion_by_pk?: ModelTypes['ProductVersion'] | undefined;
    /** delete single row from the table: "Product" */
    delete_Product_by_pk?: ModelTypes['Product'] | undefined;
    /** delete data from the table: "Role" */
    delete_Role?: ModelTypes['Role_mutation_response'] | undefined;
    /** delete single row from the table: "Role" */
    delete_Role_by_pk?: ModelTypes['Role'] | undefined;
    /** delete data from the table: "Status" */
    delete_Status?: ModelTypes['Status_mutation_response'] | undefined;
    /** delete single row from the table: "Status" */
    delete_Status_by_pk?: ModelTypes['Status'] | undefined;
    /** delete data from the table: "Task" */
    delete_Task?: ModelTypes['Task_mutation_response'] | undefined;
    /** delete single row from the table: "Task" */
    delete_Task_by_pk?: ModelTypes['Task'] | undefined;
    /** delete data from the table: "Tenant" */
    delete_Tenant?: ModelTypes['Tenant_mutation_response'] | undefined;
    /** delete data from the table: "TenantPackage" */
    delete_TenantPackage?:
      | ModelTypes['TenantPackage_mutation_response']
      | undefined;
    /** delete single row from the table: "TenantPackage" */
    delete_TenantPackage_by_pk?: ModelTypes['TenantPackage'] | undefined;
    /** delete single row from the table: "Tenant" */
    delete_Tenant_by_pk?: ModelTypes['Tenant'] | undefined;
    /** delete data from the table: "User" */
    delete_User?: ModelTypes['User_mutation_response'] | undefined;
    /** delete data from the table: "UserGroup" */
    delete_UserGroup?: ModelTypes['UserGroup_mutation_response'] | undefined;
    /** delete single row from the table: "UserGroup" */
    delete_UserGroup_by_pk?: ModelTypes['UserGroup'] | undefined;
    /** delete data from the table: "UserRole" */
    delete_UserRole?: ModelTypes['UserRole_mutation_response'] | undefined;
    /** delete single row from the table: "UserRole" */
    delete_UserRole_by_pk?: ModelTypes['UserRole'] | undefined;
    /** delete data from the table: "UserType" */
    delete_UserType?: ModelTypes['UserType_mutation_response'] | undefined;
    /** delete single row from the table: "UserType" */
    delete_UserType_by_pk?: ModelTypes['UserType'] | undefined;
    /** delete single row from the table: "User" */
    delete_User_by_pk?: ModelTypes['User'] | undefined;
    /** insert data into the table: "Application" */
    insert_Application?:
      | ModelTypes['Application_mutation_response']
      | undefined;
    /** insert data into the table: "ApplicationIntegration" */
    insert_ApplicationIntegration?:
      | ModelTypes['ApplicationIntegration_mutation_response']
      | undefined;
    /** insert a single row into the table: "ApplicationIntegration" */
    insert_ApplicationIntegration_one?:
      | ModelTypes['ApplicationIntegration']
      | undefined;
    /** insert a single row into the table: "Application" */
    insert_Application_one?: ModelTypes['Application'] | undefined;
    /** insert data into the table: "CaseSeverity" */
    insert_CaseSeverity?:
      | ModelTypes['CaseSeverity_mutation_response']
      | undefined;
    /** insert a single row into the table: "CaseSeverity" */
    insert_CaseSeverity_one?: ModelTypes['CaseSeverity'] | undefined;
    /** insert data into the table: "ClosureReason" */
    insert_ClosureReason?:
      | ModelTypes['ClosureReason_mutation_response']
      | undefined;
    /** insert a single row into the table: "ClosureReason" */
    insert_ClosureReason_one?: ModelTypes['ClosureReason'] | undefined;
    /** insert data into the table: "Currency" */
    insert_Currency?: ModelTypes['Currency_mutation_response'] | undefined;
    /** insert a single row into the table: "Currency" */
    insert_Currency_one?: ModelTypes['Currency'] | undefined;
    /** insert data into the table: "CustomRole" */
    insert_CustomRole?: ModelTypes['CustomRole_mutation_response'] | undefined;
    /** insert a single row into the table: "CustomRole" */
    insert_CustomRole_one?: ModelTypes['CustomRole'] | undefined;
    /** insert data into the table: "Group" */
    insert_Group?: ModelTypes['Group_mutation_response'] | undefined;
    /** insert data into the table: "GroupRole" */
    insert_GroupRole?: ModelTypes['GroupRole_mutation_response'] | undefined;
    /** insert a single row into the table: "GroupRole" */
    insert_GroupRole_one?: ModelTypes['GroupRole'] | undefined;
    /** insert a single row into the table: "Group" */
    insert_Group_one?: ModelTypes['Group'] | undefined;
    /** insert data into the table: "Industry" */
    insert_Industry?: ModelTypes['Industry_mutation_response'] | undefined;
    /** insert a single row into the table: "Industry" */
    insert_Industry_one?: ModelTypes['Industry'] | undefined;
    /** insert data into the table: "IssueCategory" */
    insert_IssueCategory?:
      | ModelTypes['IssueCategory_mutation_response']
      | undefined;
    /** insert a single row into the table: "IssueCategory" */
    insert_IssueCategory_one?: ModelTypes['IssueCategory'] | undefined;
    /** insert data into the table: "Object" */
    insert_Object?: ModelTypes['Object_mutation_response'] | undefined;
    /** insert a single row into the table: "Object" */
    insert_Object_one?: ModelTypes['Object'] | undefined;
    /** insert data into the table: "Organization" */
    insert_Organization?:
      | ModelTypes['Organization_mutation_response']
      | undefined;
    /** insert a single row into the table: "Organization" */
    insert_Organization_one?: ModelTypes['Organization'] | undefined;
    /** insert data into the table: "Package" */
    insert_Package?: ModelTypes['Package_mutation_response'] | undefined;
    /** insert data into the table: "PackageApplication" */
    insert_PackageApplication?:
      | ModelTypes['PackageApplication_mutation_response']
      | undefined;
    /** insert a single row into the table: "PackageApplication" */
    insert_PackageApplication_one?:
      | ModelTypes['PackageApplication']
      | undefined;
    /** insert a single row into the table: "Package" */
    insert_Package_one?: ModelTypes['Package'] | undefined;
    /** insert data into the table: "Product" */
    insert_Product?: ModelTypes['Product_mutation_response'] | undefined;
    /** insert data into the table: "ProductCategory" */
    insert_ProductCategory?:
      | ModelTypes['ProductCategory_mutation_response']
      | undefined;
    /** insert a single row into the table: "ProductCategory" */
    insert_ProductCategory_one?: ModelTypes['ProductCategory'] | undefined;
    /** insert data into the table: "ProductVersion" */
    insert_ProductVersion?:
      | ModelTypes['ProductVersion_mutation_response']
      | undefined;
    /** insert a single row into the table: "ProductVersion" */
    insert_ProductVersion_one?: ModelTypes['ProductVersion'] | undefined;
    /** insert a single row into the table: "Product" */
    insert_Product_one?: ModelTypes['Product'] | undefined;
    /** insert data into the table: "Role" */
    insert_Role?: ModelTypes['Role_mutation_response'] | undefined;
    /** insert a single row into the table: "Role" */
    insert_Role_one?: ModelTypes['Role'] | undefined;
    /** insert data into the table: "Status" */
    insert_Status?: ModelTypes['Status_mutation_response'] | undefined;
    /** insert a single row into the table: "Status" */
    insert_Status_one?: ModelTypes['Status'] | undefined;
    /** insert data into the table: "Task" */
    insert_Task?: ModelTypes['Task_mutation_response'] | undefined;
    /** insert a single row into the table: "Task" */
    insert_Task_one?: ModelTypes['Task'] | undefined;
    /** insert data into the table: "Tenant" */
    insert_Tenant?: ModelTypes['Tenant_mutation_response'] | undefined;
    /** insert data into the table: "TenantPackage" */
    insert_TenantPackage?:
      | ModelTypes['TenantPackage_mutation_response']
      | undefined;
    /** insert a single row into the table: "TenantPackage" */
    insert_TenantPackage_one?: ModelTypes['TenantPackage'] | undefined;
    /** insert a single row into the table: "Tenant" */
    insert_Tenant_one?: ModelTypes['Tenant'] | undefined;
    /** insert data into the table: "User" */
    insert_User?: ModelTypes['User_mutation_response'] | undefined;
    /** insert data into the table: "UserGroup" */
    insert_UserGroup?: ModelTypes['UserGroup_mutation_response'] | undefined;
    /** insert a single row into the table: "UserGroup" */
    insert_UserGroup_one?: ModelTypes['UserGroup'] | undefined;
    /** insert data into the table: "UserRole" */
    insert_UserRole?: ModelTypes['UserRole_mutation_response'] | undefined;
    /** insert a single row into the table: "UserRole" */
    insert_UserRole_one?: ModelTypes['UserRole'] | undefined;
    /** insert data into the table: "UserType" */
    insert_UserType?: ModelTypes['UserType_mutation_response'] | undefined;
    /** insert a single row into the table: "UserType" */
    insert_UserType_one?: ModelTypes['UserType'] | undefined;
    /** insert a single row into the table: "User" */
    insert_User_one?: ModelTypes['User'] | undefined;
    /** update data of the table: "Application" */
    update_Application?:
      | ModelTypes['Application_mutation_response']
      | undefined;
    /** update data of the table: "ApplicationIntegration" */
    update_ApplicationIntegration?:
      | ModelTypes['ApplicationIntegration_mutation_response']
      | undefined;
    /** update single row of the table: "ApplicationIntegration" */
    update_ApplicationIntegration_by_pk?:
      | ModelTypes['ApplicationIntegration']
      | undefined;
    /** update multiples rows of table: "ApplicationIntegration" */
    update_ApplicationIntegration_many?:
      | Array<
          ModelTypes['ApplicationIntegration_mutation_response'] | undefined
        >
      | undefined;
    /** update single row of the table: "Application" */
    update_Application_by_pk?: ModelTypes['Application'] | undefined;
    /** update multiples rows of table: "Application" */
    update_Application_many?:
      | Array<ModelTypes['Application_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "CaseSeverity" */
    update_CaseSeverity?:
      | ModelTypes['CaseSeverity_mutation_response']
      | undefined;
    /** update single row of the table: "CaseSeverity" */
    update_CaseSeverity_by_pk?: ModelTypes['CaseSeverity'] | undefined;
    /** update multiples rows of table: "CaseSeverity" */
    update_CaseSeverity_many?:
      | Array<ModelTypes['CaseSeverity_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "ClosureReason" */
    update_ClosureReason?:
      | ModelTypes['ClosureReason_mutation_response']
      | undefined;
    /** update single row of the table: "ClosureReason" */
    update_ClosureReason_by_pk?: ModelTypes['ClosureReason'] | undefined;
    /** update multiples rows of table: "ClosureReason" */
    update_ClosureReason_many?:
      | Array<ModelTypes['ClosureReason_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "Currency" */
    update_Currency?: ModelTypes['Currency_mutation_response'] | undefined;
    /** update single row of the table: "Currency" */
    update_Currency_by_pk?: ModelTypes['Currency'] | undefined;
    /** update multiples rows of table: "Currency" */
    update_Currency_many?:
      | Array<ModelTypes['Currency_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "CustomRole" */
    update_CustomRole?: ModelTypes['CustomRole_mutation_response'] | undefined;
    /** update single row of the table: "CustomRole" */
    update_CustomRole_by_pk?: ModelTypes['CustomRole'] | undefined;
    /** update multiples rows of table: "CustomRole" */
    update_CustomRole_many?:
      | Array<ModelTypes['CustomRole_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "Group" */
    update_Group?: ModelTypes['Group_mutation_response'] | undefined;
    /** update data of the table: "GroupRole" */
    update_GroupRole?: ModelTypes['GroupRole_mutation_response'] | undefined;
    /** update single row of the table: "GroupRole" */
    update_GroupRole_by_pk?: ModelTypes['GroupRole'] | undefined;
    /** update multiples rows of table: "GroupRole" */
    update_GroupRole_many?:
      | Array<ModelTypes['GroupRole_mutation_response'] | undefined>
      | undefined;
    /** update single row of the table: "Group" */
    update_Group_by_pk?: ModelTypes['Group'] | undefined;
    /** update multiples rows of table: "Group" */
    update_Group_many?:
      | Array<ModelTypes['Group_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "Industry" */
    update_Industry?: ModelTypes['Industry_mutation_response'] | undefined;
    /** update single row of the table: "Industry" */
    update_Industry_by_pk?: ModelTypes['Industry'] | undefined;
    /** update multiples rows of table: "Industry" */
    update_Industry_many?:
      | Array<ModelTypes['Industry_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "IssueCategory" */
    update_IssueCategory?:
      | ModelTypes['IssueCategory_mutation_response']
      | undefined;
    /** update single row of the table: "IssueCategory" */
    update_IssueCategory_by_pk?: ModelTypes['IssueCategory'] | undefined;
    /** update multiples rows of table: "IssueCategory" */
    update_IssueCategory_many?:
      | Array<ModelTypes['IssueCategory_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "Object" */
    update_Object?: ModelTypes['Object_mutation_response'] | undefined;
    /** update single row of the table: "Object" */
    update_Object_by_pk?: ModelTypes['Object'] | undefined;
    /** update multiples rows of table: "Object" */
    update_Object_many?:
      | Array<ModelTypes['Object_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "Organization" */
    update_Organization?:
      | ModelTypes['Organization_mutation_response']
      | undefined;
    /** update single row of the table: "Organization" */
    update_Organization_by_pk?: ModelTypes['Organization'] | undefined;
    /** update multiples rows of table: "Organization" */
    update_Organization_many?:
      | Array<ModelTypes['Organization_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "Package" */
    update_Package?: ModelTypes['Package_mutation_response'] | undefined;
    /** update data of the table: "PackageApplication" */
    update_PackageApplication?:
      | ModelTypes['PackageApplication_mutation_response']
      | undefined;
    /** update single row of the table: "PackageApplication" */
    update_PackageApplication_by_pk?:
      | ModelTypes['PackageApplication']
      | undefined;
    /** update multiples rows of table: "PackageApplication" */
    update_PackageApplication_many?:
      | Array<ModelTypes['PackageApplication_mutation_response'] | undefined>
      | undefined;
    /** update single row of the table: "Package" */
    update_Package_by_pk?: ModelTypes['Package'] | undefined;
    /** update multiples rows of table: "Package" */
    update_Package_many?:
      | Array<ModelTypes['Package_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "Product" */
    update_Product?: ModelTypes['Product_mutation_response'] | undefined;
    /** update data of the table: "ProductCategory" */
    update_ProductCategory?:
      | ModelTypes['ProductCategory_mutation_response']
      | undefined;
    /** update single row of the table: "ProductCategory" */
    update_ProductCategory_by_pk?: ModelTypes['ProductCategory'] | undefined;
    /** update multiples rows of table: "ProductCategory" */
    update_ProductCategory_many?:
      | Array<ModelTypes['ProductCategory_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "ProductVersion" */
    update_ProductVersion?:
      | ModelTypes['ProductVersion_mutation_response']
      | undefined;
    /** update single row of the table: "ProductVersion" */
    update_ProductVersion_by_pk?: ModelTypes['ProductVersion'] | undefined;
    /** update multiples rows of table: "ProductVersion" */
    update_ProductVersion_many?:
      | Array<ModelTypes['ProductVersion_mutation_response'] | undefined>
      | undefined;
    /** update single row of the table: "Product" */
    update_Product_by_pk?: ModelTypes['Product'] | undefined;
    /** update multiples rows of table: "Product" */
    update_Product_many?:
      | Array<ModelTypes['Product_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "Role" */
    update_Role?: ModelTypes['Role_mutation_response'] | undefined;
    /** update single row of the table: "Role" */
    update_Role_by_pk?: ModelTypes['Role'] | undefined;
    /** update multiples rows of table: "Role" */
    update_Role_many?:
      | Array<ModelTypes['Role_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "Status" */
    update_Status?: ModelTypes['Status_mutation_response'] | undefined;
    /** update single row of the table: "Status" */
    update_Status_by_pk?: ModelTypes['Status'] | undefined;
    /** update multiples rows of table: "Status" */
    update_Status_many?:
      | Array<ModelTypes['Status_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "Task" */
    update_Task?: ModelTypes['Task_mutation_response'] | undefined;
    /** update single row of the table: "Task" */
    update_Task_by_pk?: ModelTypes['Task'] | undefined;
    /** update multiples rows of table: "Task" */
    update_Task_many?:
      | Array<ModelTypes['Task_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "Tenant" */
    update_Tenant?: ModelTypes['Tenant_mutation_response'] | undefined;
    /** update data of the table: "TenantPackage" */
    update_TenantPackage?:
      | ModelTypes['TenantPackage_mutation_response']
      | undefined;
    /** update single row of the table: "TenantPackage" */
    update_TenantPackage_by_pk?: ModelTypes['TenantPackage'] | undefined;
    /** update multiples rows of table: "TenantPackage" */
    update_TenantPackage_many?:
      | Array<ModelTypes['TenantPackage_mutation_response'] | undefined>
      | undefined;
    /** update single row of the table: "Tenant" */
    update_Tenant_by_pk?: ModelTypes['Tenant'] | undefined;
    /** update multiples rows of table: "Tenant" */
    update_Tenant_many?:
      | Array<ModelTypes['Tenant_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "User" */
    update_User?: ModelTypes['User_mutation_response'] | undefined;
    /** update data of the table: "UserGroup" */
    update_UserGroup?: ModelTypes['UserGroup_mutation_response'] | undefined;
    /** update single row of the table: "UserGroup" */
    update_UserGroup_by_pk?: ModelTypes['UserGroup'] | undefined;
    /** update multiples rows of table: "UserGroup" */
    update_UserGroup_many?:
      | Array<ModelTypes['UserGroup_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "UserRole" */
    update_UserRole?: ModelTypes['UserRole_mutation_response'] | undefined;
    /** update single row of the table: "UserRole" */
    update_UserRole_by_pk?: ModelTypes['UserRole'] | undefined;
    /** update multiples rows of table: "UserRole" */
    update_UserRole_many?:
      | Array<ModelTypes['UserRole_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "UserType" */
    update_UserType?: ModelTypes['UserType_mutation_response'] | undefined;
    /** update single row of the table: "UserType" */
    update_UserType_by_pk?: ModelTypes['UserType'] | undefined;
    /** update multiples rows of table: "UserType" */
    update_UserType_many?:
      | Array<ModelTypes['UserType_mutation_response'] | undefined>
      | undefined;
    /** update single row of the table: "User" */
    update_User_by_pk?: ModelTypes['User'] | undefined;
    /** update multiples rows of table: "User" */
    update_User_many?:
      | Array<ModelTypes['User_mutation_response'] | undefined>
      | undefined;
  };
  ['order_by']: order_by;
  ['query_root']: {
    /** fetch data from the table: "Application" */
    Application: Array<ModelTypes['Application']>;
    /** fetch data from the table: "ApplicationIntegration" */
    ApplicationIntegration: Array<ModelTypes['ApplicationIntegration']>;
    /** fetch aggregated fields from the table: "ApplicationIntegration" */
    ApplicationIntegration_aggregate: ModelTypes['ApplicationIntegration_aggregate'];
    /** fetch data from the table: "ApplicationIntegration" using primary key columns */
    ApplicationIntegration_by_pk?:
      | ModelTypes['ApplicationIntegration']
      | undefined;
    /** fetch aggregated fields from the table: "Application" */
    Application_aggregate: ModelTypes['Application_aggregate'];
    /** fetch data from the table: "Application" using primary key columns */
    Application_by_pk?: ModelTypes['Application'] | undefined;
    /** fetch data from the table: "CaseSeverity" */
    CaseSeverity: Array<ModelTypes['CaseSeverity']>;
    /** fetch aggregated fields from the table: "CaseSeverity" */
    CaseSeverity_aggregate: ModelTypes['CaseSeverity_aggregate'];
    /** fetch data from the table: "CaseSeverity" using primary key columns */
    CaseSeverity_by_pk?: ModelTypes['CaseSeverity'] | undefined;
    /** fetch data from the table: "ClosureReason" */
    ClosureReason: Array<ModelTypes['ClosureReason']>;
    /** fetch aggregated fields from the table: "ClosureReason" */
    ClosureReason_aggregate: ModelTypes['ClosureReason_aggregate'];
    /** fetch data from the table: "ClosureReason" using primary key columns */
    ClosureReason_by_pk?: ModelTypes['ClosureReason'] | undefined;
    /** fetch data from the table: "Currency" */
    Currency: Array<ModelTypes['Currency']>;
    /** fetch aggregated fields from the table: "Currency" */
    Currency_aggregate: ModelTypes['Currency_aggregate'];
    /** fetch data from the table: "Currency" using primary key columns */
    Currency_by_pk?: ModelTypes['Currency'] | undefined;
    /** fetch data from the table: "CustomRole" */
    CustomRole: Array<ModelTypes['CustomRole']>;
    /** fetch aggregated fields from the table: "CustomRole" */
    CustomRole_aggregate: ModelTypes['CustomRole_aggregate'];
    /** fetch data from the table: "CustomRole" using primary key columns */
    CustomRole_by_pk?: ModelTypes['CustomRole'] | undefined;
    /** fetch data from the table: "Group" */
    Group: Array<ModelTypes['Group']>;
    /** fetch data from the table: "GroupRole" */
    GroupRole: Array<ModelTypes['GroupRole']>;
    /** fetch aggregated fields from the table: "GroupRole" */
    GroupRole_aggregate: ModelTypes['GroupRole_aggregate'];
    /** fetch data from the table: "GroupRole" using primary key columns */
    GroupRole_by_pk?: ModelTypes['GroupRole'] | undefined;
    /** fetch aggregated fields from the table: "Group" */
    Group_aggregate: ModelTypes['Group_aggregate'];
    /** fetch data from the table: "Group" using primary key columns */
    Group_by_pk?: ModelTypes['Group'] | undefined;
    /** fetch data from the table: "Industry" */
    Industry: Array<ModelTypes['Industry']>;
    /** fetch aggregated fields from the table: "Industry" */
    Industry_aggregate: ModelTypes['Industry_aggregate'];
    /** fetch data from the table: "Industry" using primary key columns */
    Industry_by_pk?: ModelTypes['Industry'] | undefined;
    /** fetch data from the table: "IssueCategory" */
    IssueCategory: Array<ModelTypes['IssueCategory']>;
    /** fetch aggregated fields from the table: "IssueCategory" */
    IssueCategory_aggregate: ModelTypes['IssueCategory_aggregate'];
    /** fetch data from the table: "IssueCategory" using primary key columns */
    IssueCategory_by_pk?: ModelTypes['IssueCategory'] | undefined;
    /** fetch data from the table: "Object" */
    Object: Array<ModelTypes['Object']>;
    /** fetch aggregated fields from the table: "Object" */
    Object_aggregate: ModelTypes['Object_aggregate'];
    /** fetch data from the table: "Object" using primary key columns */
    Object_by_pk?: ModelTypes['Object'] | undefined;
    /** fetch data from the table: "Organization" */
    Organization: Array<ModelTypes['Organization']>;
    /** fetch aggregated fields from the table: "Organization" */
    Organization_aggregate: ModelTypes['Organization_aggregate'];
    /** fetch data from the table: "Organization" using primary key columns */
    Organization_by_pk?: ModelTypes['Organization'] | undefined;
    /** fetch data from the table: "Package" */
    Package: Array<ModelTypes['Package']>;
    /** fetch data from the table: "PackageApplication" */
    PackageApplication: Array<ModelTypes['PackageApplication']>;
    /** fetch aggregated fields from the table: "PackageApplication" */
    PackageApplication_aggregate: ModelTypes['PackageApplication_aggregate'];
    /** fetch data from the table: "PackageApplication" using primary key columns */
    PackageApplication_by_pk?: ModelTypes['PackageApplication'] | undefined;
    /** fetch aggregated fields from the table: "Package" */
    Package_aggregate: ModelTypes['Package_aggregate'];
    /** fetch data from the table: "Package" using primary key columns */
    Package_by_pk?: ModelTypes['Package'] | undefined;
    /** fetch data from the table: "Product" */
    Product: Array<ModelTypes['Product']>;
    /** fetch data from the table: "ProductCategory" */
    ProductCategory: Array<ModelTypes['ProductCategory']>;
    /** fetch aggregated fields from the table: "ProductCategory" */
    ProductCategory_aggregate: ModelTypes['ProductCategory_aggregate'];
    /** fetch data from the table: "ProductCategory" using primary key columns */
    ProductCategory_by_pk?: ModelTypes['ProductCategory'] | undefined;
    /** fetch data from the table: "ProductVersion" */
    ProductVersion: Array<ModelTypes['ProductVersion']>;
    /** fetch aggregated fields from the table: "ProductVersion" */
    ProductVersion_aggregate: ModelTypes['ProductVersion_aggregate'];
    /** fetch data from the table: "ProductVersion" using primary key columns */
    ProductVersion_by_pk?: ModelTypes['ProductVersion'] | undefined;
    /** fetch aggregated fields from the table: "Product" */
    Product_aggregate: ModelTypes['Product_aggregate'];
    /** fetch data from the table: "Product" using primary key columns */
    Product_by_pk?: ModelTypes['Product'] | undefined;
    /** fetch data from the table: "Role" */
    Role: Array<ModelTypes['Role']>;
    /** fetch aggregated fields from the table: "Role" */
    Role_aggregate: ModelTypes['Role_aggregate'];
    /** fetch data from the table: "Role" using primary key columns */
    Role_by_pk?: ModelTypes['Role'] | undefined;
    /** fetch data from the table: "Status" */
    Status: Array<ModelTypes['Status']>;
    /** fetch aggregated fields from the table: "Status" */
    Status_aggregate: ModelTypes['Status_aggregate'];
    /** fetch data from the table: "Status" using primary key columns */
    Status_by_pk?: ModelTypes['Status'] | undefined;
    /** fetch data from the table: "Task" */
    Task: Array<ModelTypes['Task']>;
    /** fetch aggregated fields from the table: "Task" */
    Task_aggregate: ModelTypes['Task_aggregate'];
    /** fetch data from the table: "Task" using primary key columns */
    Task_by_pk?: ModelTypes['Task'] | undefined;
    /** fetch data from the table: "Tenant" */
    Tenant: Array<ModelTypes['Tenant']>;
    /** fetch data from the table: "TenantPackage" */
    TenantPackage: Array<ModelTypes['TenantPackage']>;
    /** fetch aggregated fields from the table: "TenantPackage" */
    TenantPackage_aggregate: ModelTypes['TenantPackage_aggregate'];
    /** fetch data from the table: "TenantPackage" using primary key columns */
    TenantPackage_by_pk?: ModelTypes['TenantPackage'] | undefined;
    /** fetch aggregated fields from the table: "Tenant" */
    Tenant_aggregate: ModelTypes['Tenant_aggregate'];
    /** fetch data from the table: "Tenant" using primary key columns */
    Tenant_by_pk?: ModelTypes['Tenant'] | undefined;
    /** fetch data from the table: "User" */
    User: Array<ModelTypes['User']>;
    /** fetch data from the table: "UserGroup" */
    UserGroup: Array<ModelTypes['UserGroup']>;
    /** fetch aggregated fields from the table: "UserGroup" */
    UserGroup_aggregate: ModelTypes['UserGroup_aggregate'];
    /** fetch data from the table: "UserGroup" using primary key columns */
    UserGroup_by_pk?: ModelTypes['UserGroup'] | undefined;
    /** fetch data from the table: "UserRole" */
    UserRole: Array<ModelTypes['UserRole']>;
    /** fetch aggregated fields from the table: "UserRole" */
    UserRole_aggregate: ModelTypes['UserRole_aggregate'];
    /** fetch data from the table: "UserRole" using primary key columns */
    UserRole_by_pk?: ModelTypes['UserRole'] | undefined;
    /** fetch data from the table: "UserType" */
    UserType: Array<ModelTypes['UserType']>;
    /** fetch aggregated fields from the table: "UserType" */
    UserType_aggregate: ModelTypes['UserType_aggregate'];
    /** fetch data from the table: "UserType" using primary key columns */
    UserType_by_pk?: ModelTypes['UserType'] | undefined;
    /** fetch aggregated fields from the table: "User" */
    User_aggregate: ModelTypes['User_aggregate'];
    /** fetch data from the table: "User" using primary key columns */
    User_by_pk?: ModelTypes['User'] | undefined;
  };
  ['subscription_root']: {
    /** fetch data from the table: "Application" */
    Application: Array<ModelTypes['Application']>;
    /** fetch data from the table: "ApplicationIntegration" */
    ApplicationIntegration: Array<ModelTypes['ApplicationIntegration']>;
    /** fetch aggregated fields from the table: "ApplicationIntegration" */
    ApplicationIntegration_aggregate: ModelTypes['ApplicationIntegration_aggregate'];
    /** fetch data from the table: "ApplicationIntegration" using primary key columns */
    ApplicationIntegration_by_pk?:
      | ModelTypes['ApplicationIntegration']
      | undefined;
    /** fetch data from the table in a streaming manner: "ApplicationIntegration" */
    ApplicationIntegration_stream: Array<ModelTypes['ApplicationIntegration']>;
    /** fetch aggregated fields from the table: "Application" */
    Application_aggregate: ModelTypes['Application_aggregate'];
    /** fetch data from the table: "Application" using primary key columns */
    Application_by_pk?: ModelTypes['Application'] | undefined;
    /** fetch data from the table in a streaming manner: "Application" */
    Application_stream: Array<ModelTypes['Application']>;
    /** fetch data from the table: "CaseSeverity" */
    CaseSeverity: Array<ModelTypes['CaseSeverity']>;
    /** fetch aggregated fields from the table: "CaseSeverity" */
    CaseSeverity_aggregate: ModelTypes['CaseSeverity_aggregate'];
    /** fetch data from the table: "CaseSeverity" using primary key columns */
    CaseSeverity_by_pk?: ModelTypes['CaseSeverity'] | undefined;
    /** fetch data from the table in a streaming manner: "CaseSeverity" */
    CaseSeverity_stream: Array<ModelTypes['CaseSeverity']>;
    /** fetch data from the table: "ClosureReason" */
    ClosureReason: Array<ModelTypes['ClosureReason']>;
    /** fetch aggregated fields from the table: "ClosureReason" */
    ClosureReason_aggregate: ModelTypes['ClosureReason_aggregate'];
    /** fetch data from the table: "ClosureReason" using primary key columns */
    ClosureReason_by_pk?: ModelTypes['ClosureReason'] | undefined;
    /** fetch data from the table in a streaming manner: "ClosureReason" */
    ClosureReason_stream: Array<ModelTypes['ClosureReason']>;
    /** fetch data from the table: "Currency" */
    Currency: Array<ModelTypes['Currency']>;
    /** fetch aggregated fields from the table: "Currency" */
    Currency_aggregate: ModelTypes['Currency_aggregate'];
    /** fetch data from the table: "Currency" using primary key columns */
    Currency_by_pk?: ModelTypes['Currency'] | undefined;
    /** fetch data from the table in a streaming manner: "Currency" */
    Currency_stream: Array<ModelTypes['Currency']>;
    /** fetch data from the table: "CustomRole" */
    CustomRole: Array<ModelTypes['CustomRole']>;
    /** fetch aggregated fields from the table: "CustomRole" */
    CustomRole_aggregate: ModelTypes['CustomRole_aggregate'];
    /** fetch data from the table: "CustomRole" using primary key columns */
    CustomRole_by_pk?: ModelTypes['CustomRole'] | undefined;
    /** fetch data from the table in a streaming manner: "CustomRole" */
    CustomRole_stream: Array<ModelTypes['CustomRole']>;
    /** fetch data from the table: "Group" */
    Group: Array<ModelTypes['Group']>;
    /** fetch data from the table: "GroupRole" */
    GroupRole: Array<ModelTypes['GroupRole']>;
    /** fetch aggregated fields from the table: "GroupRole" */
    GroupRole_aggregate: ModelTypes['GroupRole_aggregate'];
    /** fetch data from the table: "GroupRole" using primary key columns */
    GroupRole_by_pk?: ModelTypes['GroupRole'] | undefined;
    /** fetch data from the table in a streaming manner: "GroupRole" */
    GroupRole_stream: Array<ModelTypes['GroupRole']>;
    /** fetch aggregated fields from the table: "Group" */
    Group_aggregate: ModelTypes['Group_aggregate'];
    /** fetch data from the table: "Group" using primary key columns */
    Group_by_pk?: ModelTypes['Group'] | undefined;
    /** fetch data from the table in a streaming manner: "Group" */
    Group_stream: Array<ModelTypes['Group']>;
    /** fetch data from the table: "Industry" */
    Industry: Array<ModelTypes['Industry']>;
    /** fetch aggregated fields from the table: "Industry" */
    Industry_aggregate: ModelTypes['Industry_aggregate'];
    /** fetch data from the table: "Industry" using primary key columns */
    Industry_by_pk?: ModelTypes['Industry'] | undefined;
    /** fetch data from the table in a streaming manner: "Industry" */
    Industry_stream: Array<ModelTypes['Industry']>;
    /** fetch data from the table: "IssueCategory" */
    IssueCategory: Array<ModelTypes['IssueCategory']>;
    /** fetch aggregated fields from the table: "IssueCategory" */
    IssueCategory_aggregate: ModelTypes['IssueCategory_aggregate'];
    /** fetch data from the table: "IssueCategory" using primary key columns */
    IssueCategory_by_pk?: ModelTypes['IssueCategory'] | undefined;
    /** fetch data from the table in a streaming manner: "IssueCategory" */
    IssueCategory_stream: Array<ModelTypes['IssueCategory']>;
    /** fetch data from the table: "Object" */
    Object: Array<ModelTypes['Object']>;
    /** fetch aggregated fields from the table: "Object" */
    Object_aggregate: ModelTypes['Object_aggregate'];
    /** fetch data from the table: "Object" using primary key columns */
    Object_by_pk?: ModelTypes['Object'] | undefined;
    /** fetch data from the table in a streaming manner: "Object" */
    Object_stream: Array<ModelTypes['Object']>;
    /** fetch data from the table: "Organization" */
    Organization: Array<ModelTypes['Organization']>;
    /** fetch aggregated fields from the table: "Organization" */
    Organization_aggregate: ModelTypes['Organization_aggregate'];
    /** fetch data from the table: "Organization" using primary key columns */
    Organization_by_pk?: ModelTypes['Organization'] | undefined;
    /** fetch data from the table in a streaming manner: "Organization" */
    Organization_stream: Array<ModelTypes['Organization']>;
    /** fetch data from the table: "Package" */
    Package: Array<ModelTypes['Package']>;
    /** fetch data from the table: "PackageApplication" */
    PackageApplication: Array<ModelTypes['PackageApplication']>;
    /** fetch aggregated fields from the table: "PackageApplication" */
    PackageApplication_aggregate: ModelTypes['PackageApplication_aggregate'];
    /** fetch data from the table: "PackageApplication" using primary key columns */
    PackageApplication_by_pk?: ModelTypes['PackageApplication'] | undefined;
    /** fetch data from the table in a streaming manner: "PackageApplication" */
    PackageApplication_stream: Array<ModelTypes['PackageApplication']>;
    /** fetch aggregated fields from the table: "Package" */
    Package_aggregate: ModelTypes['Package_aggregate'];
    /** fetch data from the table: "Package" using primary key columns */
    Package_by_pk?: ModelTypes['Package'] | undefined;
    /** fetch data from the table in a streaming manner: "Package" */
    Package_stream: Array<ModelTypes['Package']>;
    /** fetch data from the table: "Product" */
    Product: Array<ModelTypes['Product']>;
    /** fetch data from the table: "ProductCategory" */
    ProductCategory: Array<ModelTypes['ProductCategory']>;
    /** fetch aggregated fields from the table: "ProductCategory" */
    ProductCategory_aggregate: ModelTypes['ProductCategory_aggregate'];
    /** fetch data from the table: "ProductCategory" using primary key columns */
    ProductCategory_by_pk?: ModelTypes['ProductCategory'] | undefined;
    /** fetch data from the table in a streaming manner: "ProductCategory" */
    ProductCategory_stream: Array<ModelTypes['ProductCategory']>;
    /** fetch data from the table: "ProductVersion" */
    ProductVersion: Array<ModelTypes['ProductVersion']>;
    /** fetch aggregated fields from the table: "ProductVersion" */
    ProductVersion_aggregate: ModelTypes['ProductVersion_aggregate'];
    /** fetch data from the table: "ProductVersion" using primary key columns */
    ProductVersion_by_pk?: ModelTypes['ProductVersion'] | undefined;
    /** fetch data from the table in a streaming manner: "ProductVersion" */
    ProductVersion_stream: Array<ModelTypes['ProductVersion']>;
    /** fetch aggregated fields from the table: "Product" */
    Product_aggregate: ModelTypes['Product_aggregate'];
    /** fetch data from the table: "Product" using primary key columns */
    Product_by_pk?: ModelTypes['Product'] | undefined;
    /** fetch data from the table in a streaming manner: "Product" */
    Product_stream: Array<ModelTypes['Product']>;
    /** fetch data from the table: "Role" */
    Role: Array<ModelTypes['Role']>;
    /** fetch aggregated fields from the table: "Role" */
    Role_aggregate: ModelTypes['Role_aggregate'];
    /** fetch data from the table: "Role" using primary key columns */
    Role_by_pk?: ModelTypes['Role'] | undefined;
    /** fetch data from the table in a streaming manner: "Role" */
    Role_stream: Array<ModelTypes['Role']>;
    /** fetch data from the table: "Status" */
    Status: Array<ModelTypes['Status']>;
    /** fetch aggregated fields from the table: "Status" */
    Status_aggregate: ModelTypes['Status_aggregate'];
    /** fetch data from the table: "Status" using primary key columns */
    Status_by_pk?: ModelTypes['Status'] | undefined;
    /** fetch data from the table in a streaming manner: "Status" */
    Status_stream: Array<ModelTypes['Status']>;
    /** fetch data from the table: "Task" */
    Task: Array<ModelTypes['Task']>;
    /** fetch aggregated fields from the table: "Task" */
    Task_aggregate: ModelTypes['Task_aggregate'];
    /** fetch data from the table: "Task" using primary key columns */
    Task_by_pk?: ModelTypes['Task'] | undefined;
    /** fetch data from the table in a streaming manner: "Task" */
    Task_stream: Array<ModelTypes['Task']>;
    /** fetch data from the table: "Tenant" */
    Tenant: Array<ModelTypes['Tenant']>;
    /** fetch data from the table: "TenantPackage" */
    TenantPackage: Array<ModelTypes['TenantPackage']>;
    /** fetch aggregated fields from the table: "TenantPackage" */
    TenantPackage_aggregate: ModelTypes['TenantPackage_aggregate'];
    /** fetch data from the table: "TenantPackage" using primary key columns */
    TenantPackage_by_pk?: ModelTypes['TenantPackage'] | undefined;
    /** fetch data from the table in a streaming manner: "TenantPackage" */
    TenantPackage_stream: Array<ModelTypes['TenantPackage']>;
    /** fetch aggregated fields from the table: "Tenant" */
    Tenant_aggregate: ModelTypes['Tenant_aggregate'];
    /** fetch data from the table: "Tenant" using primary key columns */
    Tenant_by_pk?: ModelTypes['Tenant'] | undefined;
    /** fetch data from the table in a streaming manner: "Tenant" */
    Tenant_stream: Array<ModelTypes['Tenant']>;
    /** fetch data from the table: "User" */
    User: Array<ModelTypes['User']>;
    /** fetch data from the table: "UserGroup" */
    UserGroup: Array<ModelTypes['UserGroup']>;
    /** fetch aggregated fields from the table: "UserGroup" */
    UserGroup_aggregate: ModelTypes['UserGroup_aggregate'];
    /** fetch data from the table: "UserGroup" using primary key columns */
    UserGroup_by_pk?: ModelTypes['UserGroup'] | undefined;
    /** fetch data from the table in a streaming manner: "UserGroup" */
    UserGroup_stream: Array<ModelTypes['UserGroup']>;
    /** fetch data from the table: "UserRole" */
    UserRole: Array<ModelTypes['UserRole']>;
    /** fetch aggregated fields from the table: "UserRole" */
    UserRole_aggregate: ModelTypes['UserRole_aggregate'];
    /** fetch data from the table: "UserRole" using primary key columns */
    UserRole_by_pk?: ModelTypes['UserRole'] | undefined;
    /** fetch data from the table in a streaming manner: "UserRole" */
    UserRole_stream: Array<ModelTypes['UserRole']>;
    /** fetch data from the table: "UserType" */
    UserType: Array<ModelTypes['UserType']>;
    /** fetch aggregated fields from the table: "UserType" */
    UserType_aggregate: ModelTypes['UserType_aggregate'];
    /** fetch data from the table: "UserType" using primary key columns */
    UserType_by_pk?: ModelTypes['UserType'] | undefined;
    /** fetch data from the table in a streaming manner: "UserType" */
    UserType_stream: Array<ModelTypes['UserType']>;
    /** fetch aggregated fields from the table: "User" */
    User_aggregate: ModelTypes['User_aggregate'];
    /** fetch data from the table: "User" using primary key columns */
    User_by_pk?: ModelTypes['User'] | undefined;
    /** fetch data from the table in a streaming manner: "User" */
    User_stream: Array<ModelTypes['User']>;
  };
  ['timestamp']: any;
  /** Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'. */
  ['timestamp_comparison_exp']: {
    _eq?: ModelTypes['timestamp'] | undefined;
    _gt?: ModelTypes['timestamp'] | undefined;
    _gte?: ModelTypes['timestamp'] | undefined;
    _in?: Array<ModelTypes['timestamp']> | undefined;
    _is_null?: boolean | undefined;
    _lt?: ModelTypes['timestamp'] | undefined;
    _lte?: ModelTypes['timestamp'] | undefined;
    _neq?: ModelTypes['timestamp'] | undefined;
    _nin?: Array<ModelTypes['timestamp']> | undefined;
  };
  ['timestamptz']: any;
  /** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
  ['timestamptz_comparison_exp']: {
    _eq?: ModelTypes['timestamptz'] | undefined;
    _gt?: ModelTypes['timestamptz'] | undefined;
    _gte?: ModelTypes['timestamptz'] | undefined;
    _in?: Array<ModelTypes['timestamptz']> | undefined;
    _is_null?: boolean | undefined;
    _lt?: ModelTypes['timestamptz'] | undefined;
    _lte?: ModelTypes['timestamptz'] | undefined;
    _neq?: ModelTypes['timestamptz'] | undefined;
    _nin?: Array<ModelTypes['timestamptz']> | undefined;
  };
  ['uuid']: any;
  /** Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'. */
  ['uuid_comparison_exp']: {
    _eq?: ModelTypes['uuid'] | undefined;
    _gt?: ModelTypes['uuid'] | undefined;
    _gte?: ModelTypes['uuid'] | undefined;
    _in?: Array<ModelTypes['uuid']> | undefined;
    _is_null?: boolean | undefined;
    _lt?: ModelTypes['uuid'] | undefined;
    _lte?: ModelTypes['uuid'] | undefined;
    _neq?: ModelTypes['uuid'] | undefined;
    _nin?: Array<ModelTypes['uuid']> | undefined;
  };
};

export type GraphQLTypes = {
  /** columns and relationships of "Application" */
  ['Application']: {
    __typename: 'Application';
    /** An array relationship */
    applicationIntegrations: Array<GraphQLTypes['ApplicationIntegration']>;
    /** An aggregate relationship */
    applicationIntegrations_aggregate: GraphQLTypes['ApplicationIntegration_aggregate'];
    cursorId: GraphQLTypes['bigint'];
    description: string;
    id: string;
    name: string;
    objects: string;
    /** An array relationship */
    packages: Array<GraphQLTypes['PackageApplication']>;
    /** An aggregate relationship */
    packages_aggregate: GraphQLTypes['PackageApplication_aggregate'];
    roles: string;
  };
  /** columns and relationships of "ApplicationIntegration" */
  ['ApplicationIntegration']: {
    __typename: 'ApplicationIntegration';
    /** An object relationship */
    application: GraphQLTypes['Application'];
    applicationId: string;
    cursorId: GraphQLTypes['bigint'];
    description: string;
    id: GraphQLTypes['uuid'];
    menuName: string;
    menuURL: string;
    name: string;
    subMenus: string;
  };
  /** aggregated selection of "ApplicationIntegration" */
  ['ApplicationIntegration_aggregate']: {
    __typename: 'ApplicationIntegration_aggregate';
    aggregate?:
      | GraphQLTypes['ApplicationIntegration_aggregate_fields']
      | undefined;
    nodes: Array<GraphQLTypes['ApplicationIntegration']>;
  };
  ['ApplicationIntegration_aggregate_bool_exp']: {
    count?:
      | GraphQLTypes['ApplicationIntegration_aggregate_bool_exp_count']
      | undefined;
  };
  ['ApplicationIntegration_aggregate_bool_exp_count']: {
    arguments?:
      | Array<GraphQLTypes['ApplicationIntegration_select_column']>
      | undefined;
    distinct?: boolean | undefined;
    filter?: GraphQLTypes['ApplicationIntegration_bool_exp'] | undefined;
    predicate: GraphQLTypes['Int_comparison_exp'];
  };
  /** aggregate fields of "ApplicationIntegration" */
  ['ApplicationIntegration_aggregate_fields']: {
    __typename: 'ApplicationIntegration_aggregate_fields';
    avg?: GraphQLTypes['ApplicationIntegration_avg_fields'] | undefined;
    count: number;
    max?: GraphQLTypes['ApplicationIntegration_max_fields'] | undefined;
    min?: GraphQLTypes['ApplicationIntegration_min_fields'] | undefined;
    stddev?: GraphQLTypes['ApplicationIntegration_stddev_fields'] | undefined;
    stddev_pop?:
      | GraphQLTypes['ApplicationIntegration_stddev_pop_fields']
      | undefined;
    stddev_samp?:
      | GraphQLTypes['ApplicationIntegration_stddev_samp_fields']
      | undefined;
    sum?: GraphQLTypes['ApplicationIntegration_sum_fields'] | undefined;
    var_pop?: GraphQLTypes['ApplicationIntegration_var_pop_fields'] | undefined;
    var_samp?:
      | GraphQLTypes['ApplicationIntegration_var_samp_fields']
      | undefined;
    variance?:
      | GraphQLTypes['ApplicationIntegration_variance_fields']
      | undefined;
  };
  /** order by aggregate values of table "ApplicationIntegration" */
  ['ApplicationIntegration_aggregate_order_by']: {
    avg?: GraphQLTypes['ApplicationIntegration_avg_order_by'] | undefined;
    count?: GraphQLTypes['order_by'] | undefined;
    max?: GraphQLTypes['ApplicationIntegration_max_order_by'] | undefined;
    min?: GraphQLTypes['ApplicationIntegration_min_order_by'] | undefined;
    stddev?: GraphQLTypes['ApplicationIntegration_stddev_order_by'] | undefined;
    stddev_pop?:
      | GraphQLTypes['ApplicationIntegration_stddev_pop_order_by']
      | undefined;
    stddev_samp?:
      | GraphQLTypes['ApplicationIntegration_stddev_samp_order_by']
      | undefined;
    sum?: GraphQLTypes['ApplicationIntegration_sum_order_by'] | undefined;
    var_pop?:
      | GraphQLTypes['ApplicationIntegration_var_pop_order_by']
      | undefined;
    var_samp?:
      | GraphQLTypes['ApplicationIntegration_var_samp_order_by']
      | undefined;
    variance?:
      | GraphQLTypes['ApplicationIntegration_variance_order_by']
      | undefined;
  };
  /** input type for inserting array relation for remote table "ApplicationIntegration" */
  ['ApplicationIntegration_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['ApplicationIntegration_insert_input']>;
    /** upsert condition */
    on_conflict?:
      | GraphQLTypes['ApplicationIntegration_on_conflict']
      | undefined;
  };
  /** aggregate avg on columns */
  ['ApplicationIntegration_avg_fields']: {
    __typename: 'ApplicationIntegration_avg_fields';
    cursorId?: number | undefined;
  };
  /** order by avg() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_avg_order_by']: {
    cursorId?: GraphQLTypes['order_by'] | undefined;
  };
  /** Boolean expression to filter rows from the table "ApplicationIntegration". All fields are combined with a logical 'AND'. */
  ['ApplicationIntegration_bool_exp']: {
    _and?: Array<GraphQLTypes['ApplicationIntegration_bool_exp']> | undefined;
    _not?: GraphQLTypes['ApplicationIntegration_bool_exp'] | undefined;
    _or?: Array<GraphQLTypes['ApplicationIntegration_bool_exp']> | undefined;
    application?: GraphQLTypes['Application_bool_exp'] | undefined;
    applicationId?: GraphQLTypes['String_comparison_exp'] | undefined;
    cursorId?: GraphQLTypes['bigint_comparison_exp'] | undefined;
    description?: GraphQLTypes['String_comparison_exp'] | undefined;
    id?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    menuName?: GraphQLTypes['String_comparison_exp'] | undefined;
    menuURL?: GraphQLTypes['String_comparison_exp'] | undefined;
    name?: GraphQLTypes['String_comparison_exp'] | undefined;
    subMenus?: GraphQLTypes['String_comparison_exp'] | undefined;
  };
  /** unique or primary key constraints on table "ApplicationIntegration" */
  ['ApplicationIntegration_constraint']: ApplicationIntegration_constraint;
  /** input type for incrementing numeric columns in table "ApplicationIntegration" */
  ['ApplicationIntegration_inc_input']: {
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "ApplicationIntegration" */
  ['ApplicationIntegration_insert_input']: {
    application?: GraphQLTypes['Application_obj_rel_insert_input'] | undefined;
    applicationId?: string | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    menuName?: string | undefined;
    menuURL?: string | undefined;
    name?: string | undefined;
    subMenus?: string | undefined;
  };
  /** aggregate max on columns */
  ['ApplicationIntegration_max_fields']: {
    __typename: 'ApplicationIntegration_max_fields';
    applicationId?: string | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    menuName?: string | undefined;
    menuURL?: string | undefined;
    name?: string | undefined;
    subMenus?: string | undefined;
  };
  /** order by max() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_max_order_by']: {
    applicationId?: GraphQLTypes['order_by'] | undefined;
    cursorId?: GraphQLTypes['order_by'] | undefined;
    description?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    menuName?: GraphQLTypes['order_by'] | undefined;
    menuURL?: GraphQLTypes['order_by'] | undefined;
    name?: GraphQLTypes['order_by'] | undefined;
    subMenus?: GraphQLTypes['order_by'] | undefined;
  };
  /** aggregate min on columns */
  ['ApplicationIntegration_min_fields']: {
    __typename: 'ApplicationIntegration_min_fields';
    applicationId?: string | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    menuName?: string | undefined;
    menuURL?: string | undefined;
    name?: string | undefined;
    subMenus?: string | undefined;
  };
  /** order by min() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_min_order_by']: {
    applicationId?: GraphQLTypes['order_by'] | undefined;
    cursorId?: GraphQLTypes['order_by'] | undefined;
    description?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    menuName?: GraphQLTypes['order_by'] | undefined;
    menuURL?: GraphQLTypes['order_by'] | undefined;
    name?: GraphQLTypes['order_by'] | undefined;
    subMenus?: GraphQLTypes['order_by'] | undefined;
  };
  /** response of any mutation on the table "ApplicationIntegration" */
  ['ApplicationIntegration_mutation_response']: {
    __typename: 'ApplicationIntegration_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['ApplicationIntegration']>;
  };
  /** on_conflict condition type for table "ApplicationIntegration" */
  ['ApplicationIntegration_on_conflict']: {
    constraint: GraphQLTypes['ApplicationIntegration_constraint'];
    update_columns: Array<GraphQLTypes['ApplicationIntegration_update_column']>;
    where?: GraphQLTypes['ApplicationIntegration_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "ApplicationIntegration". */
  ['ApplicationIntegration_order_by']: {
    application?: GraphQLTypes['Application_order_by'] | undefined;
    applicationId?: GraphQLTypes['order_by'] | undefined;
    cursorId?: GraphQLTypes['order_by'] | undefined;
    description?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    menuName?: GraphQLTypes['order_by'] | undefined;
    menuURL?: GraphQLTypes['order_by'] | undefined;
    name?: GraphQLTypes['order_by'] | undefined;
    subMenus?: GraphQLTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: ApplicationIntegration */
  ['ApplicationIntegration_pk_columns_input']: {
    id: GraphQLTypes['uuid'];
  };
  /** select columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_select_column']: ApplicationIntegration_select_column;
  /** input type for updating data in table "ApplicationIntegration" */
  ['ApplicationIntegration_set_input']: {
    applicationId?: string | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    menuName?: string | undefined;
    menuURL?: string | undefined;
    name?: string | undefined;
    subMenus?: string | undefined;
  };
  /** aggregate stddev on columns */
  ['ApplicationIntegration_stddev_fields']: {
    __typename: 'ApplicationIntegration_stddev_fields';
    cursorId?: number | undefined;
  };
  /** order by stddev() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_stddev_order_by']: {
    cursorId?: GraphQLTypes['order_by'] | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['ApplicationIntegration_stddev_pop_fields']: {
    __typename: 'ApplicationIntegration_stddev_pop_fields';
    cursorId?: number | undefined;
  };
  /** order by stddev_pop() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_stddev_pop_order_by']: {
    cursorId?: GraphQLTypes['order_by'] | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['ApplicationIntegration_stddev_samp_fields']: {
    __typename: 'ApplicationIntegration_stddev_samp_fields';
    cursorId?: number | undefined;
  };
  /** order by stddev_samp() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_stddev_samp_order_by']: {
    cursorId?: GraphQLTypes['order_by'] | undefined;
  };
  /** Streaming cursor of the table "ApplicationIntegration" */
  ['ApplicationIntegration_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: GraphQLTypes['ApplicationIntegration_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: GraphQLTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['ApplicationIntegration_stream_cursor_value_input']: {
    applicationId?: string | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    menuName?: string | undefined;
    menuURL?: string | undefined;
    name?: string | undefined;
    subMenus?: string | undefined;
  };
  /** aggregate sum on columns */
  ['ApplicationIntegration_sum_fields']: {
    __typename: 'ApplicationIntegration_sum_fields';
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** order by sum() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_sum_order_by']: {
    cursorId?: GraphQLTypes['order_by'] | undefined;
  };
  /** update columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_update_column']: ApplicationIntegration_update_column;
  ['ApplicationIntegration_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: GraphQLTypes['ApplicationIntegration_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: GraphQLTypes['ApplicationIntegration_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: GraphQLTypes['ApplicationIntegration_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['ApplicationIntegration_var_pop_fields']: {
    __typename: 'ApplicationIntegration_var_pop_fields';
    cursorId?: number | undefined;
  };
  /** order by var_pop() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_var_pop_order_by']: {
    cursorId?: GraphQLTypes['order_by'] | undefined;
  };
  /** aggregate var_samp on columns */
  ['ApplicationIntegration_var_samp_fields']: {
    __typename: 'ApplicationIntegration_var_samp_fields';
    cursorId?: number | undefined;
  };
  /** order by var_samp() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_var_samp_order_by']: {
    cursorId?: GraphQLTypes['order_by'] | undefined;
  };
  /** aggregate variance on columns */
  ['ApplicationIntegration_variance_fields']: {
    __typename: 'ApplicationIntegration_variance_fields';
    cursorId?: number | undefined;
  };
  /** order by variance() on columns of table "ApplicationIntegration" */
  ['ApplicationIntegration_variance_order_by']: {
    cursorId?: GraphQLTypes['order_by'] | undefined;
  };
  /** aggregated selection of "Application" */
  ['Application_aggregate']: {
    __typename: 'Application_aggregate';
    aggregate?: GraphQLTypes['Application_aggregate_fields'] | undefined;
    nodes: Array<GraphQLTypes['Application']>;
  };
  /** aggregate fields of "Application" */
  ['Application_aggregate_fields']: {
    __typename: 'Application_aggregate_fields';
    avg?: GraphQLTypes['Application_avg_fields'] | undefined;
    count: number;
    max?: GraphQLTypes['Application_max_fields'] | undefined;
    min?: GraphQLTypes['Application_min_fields'] | undefined;
    stddev?: GraphQLTypes['Application_stddev_fields'] | undefined;
    stddev_pop?: GraphQLTypes['Application_stddev_pop_fields'] | undefined;
    stddev_samp?: GraphQLTypes['Application_stddev_samp_fields'] | undefined;
    sum?: GraphQLTypes['Application_sum_fields'] | undefined;
    var_pop?: GraphQLTypes['Application_var_pop_fields'] | undefined;
    var_samp?: GraphQLTypes['Application_var_samp_fields'] | undefined;
    variance?: GraphQLTypes['Application_variance_fields'] | undefined;
  };
  /** aggregate avg on columns */
  ['Application_avg_fields']: {
    __typename: 'Application_avg_fields';
    cursorId?: number | undefined;
  };
  /** Boolean expression to filter rows from the table "Application". All fields are combined with a logical 'AND'. */
  ['Application_bool_exp']: {
    _and?: Array<GraphQLTypes['Application_bool_exp']> | undefined;
    _not?: GraphQLTypes['Application_bool_exp'] | undefined;
    _or?: Array<GraphQLTypes['Application_bool_exp']> | undefined;
    applicationIntegrations?:
      | GraphQLTypes['ApplicationIntegration_bool_exp']
      | undefined;
    applicationIntegrations_aggregate?:
      | GraphQLTypes['ApplicationIntegration_aggregate_bool_exp']
      | undefined;
    cursorId?: GraphQLTypes['bigint_comparison_exp'] | undefined;
    description?: GraphQLTypes['String_comparison_exp'] | undefined;
    id?: GraphQLTypes['String_comparison_exp'] | undefined;
    name?: GraphQLTypes['String_comparison_exp'] | undefined;
    objects?: GraphQLTypes['String_comparison_exp'] | undefined;
    packages?: GraphQLTypes['PackageApplication_bool_exp'] | undefined;
    packages_aggregate?:
      | GraphQLTypes['PackageApplication_aggregate_bool_exp']
      | undefined;
    roles?: GraphQLTypes['String_comparison_exp'] | undefined;
  };
  /** unique or primary key constraints on table "Application" */
  ['Application_constraint']: Application_constraint;
  /** input type for incrementing numeric columns in table "Application" */
  ['Application_inc_input']: {
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "Application" */
  ['Application_insert_input']: {
    applicationIntegrations?:
      | GraphQLTypes['ApplicationIntegration_arr_rel_insert_input']
      | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    objects?: string | undefined;
    packages?:
      | GraphQLTypes['PackageApplication_arr_rel_insert_input']
      | undefined;
    roles?: string | undefined;
  };
  /** aggregate max on columns */
  ['Application_max_fields']: {
    __typename: 'Application_max_fields';
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    objects?: string | undefined;
    roles?: string | undefined;
  };
  /** aggregate min on columns */
  ['Application_min_fields']: {
    __typename: 'Application_min_fields';
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    objects?: string | undefined;
    roles?: string | undefined;
  };
  /** response of any mutation on the table "Application" */
  ['Application_mutation_response']: {
    __typename: 'Application_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['Application']>;
  };
  /** input type for inserting object relation for remote table "Application" */
  ['Application_obj_rel_insert_input']: {
    data: GraphQLTypes['Application_insert_input'];
    /** upsert condition */
    on_conflict?: GraphQLTypes['Application_on_conflict'] | undefined;
  };
  /** on_conflict condition type for table "Application" */
  ['Application_on_conflict']: {
    constraint: GraphQLTypes['Application_constraint'];
    update_columns: Array<GraphQLTypes['Application_update_column']>;
    where?: GraphQLTypes['Application_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "Application". */
  ['Application_order_by']: {
    applicationIntegrations_aggregate?:
      | GraphQLTypes['ApplicationIntegration_aggregate_order_by']
      | undefined;
    cursorId?: GraphQLTypes['order_by'] | undefined;
    description?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    name?: GraphQLTypes['order_by'] | undefined;
    objects?: GraphQLTypes['order_by'] | undefined;
    packages_aggregate?:
      | GraphQLTypes['PackageApplication_aggregate_order_by']
      | undefined;
    roles?: GraphQLTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: Application */
  ['Application_pk_columns_input']: {
    id: string;
  };
  /** select columns of table "Application" */
  ['Application_select_column']: Application_select_column;
  /** input type for updating data in table "Application" */
  ['Application_set_input']: {
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    objects?: string | undefined;
    roles?: string | undefined;
  };
  /** aggregate stddev on columns */
  ['Application_stddev_fields']: {
    __typename: 'Application_stddev_fields';
    cursorId?: number | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['Application_stddev_pop_fields']: {
    __typename: 'Application_stddev_pop_fields';
    cursorId?: number | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['Application_stddev_samp_fields']: {
    __typename: 'Application_stddev_samp_fields';
    cursorId?: number | undefined;
  };
  /** Streaming cursor of the table "Application" */
  ['Application_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: GraphQLTypes['Application_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: GraphQLTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['Application_stream_cursor_value_input']: {
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    objects?: string | undefined;
    roles?: string | undefined;
  };
  /** aggregate sum on columns */
  ['Application_sum_fields']: {
    __typename: 'Application_sum_fields';
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** update columns of table "Application" */
  ['Application_update_column']: Application_update_column;
  ['Application_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: GraphQLTypes['Application_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: GraphQLTypes['Application_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: GraphQLTypes['Application_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['Application_var_pop_fields']: {
    __typename: 'Application_var_pop_fields';
    cursorId?: number | undefined;
  };
  /** aggregate var_samp on columns */
  ['Application_var_samp_fields']: {
    __typename: 'Application_var_samp_fields';
    cursorId?: number | undefined;
  };
  /** aggregate variance on columns */
  ['Application_variance_fields']: {
    __typename: 'Application_variance_fields';
    cursorId?: number | undefined;
  };
  /** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
  ['Boolean_comparison_exp']: {
    _eq?: boolean | undefined;
    _gt?: boolean | undefined;
    _gte?: boolean | undefined;
    _in?: Array<boolean> | undefined;
    _is_null?: boolean | undefined;
    _lt?: boolean | undefined;
    _lte?: boolean | undefined;
    _neq?: boolean | undefined;
    _nin?: Array<boolean> | undefined;
  };
  /** columns and relationships of "CaseSeverity" */
  ['CaseSeverity']: {
    __typename: 'CaseSeverity';
    createdAt: GraphQLTypes['timestamptz'];
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId: GraphQLTypes['bigint'];
    description: string;
    id: GraphQLTypes['uuid'];
    name: string;
    status: GraphQLTypes['Status_enum'];
    tenantId: GraphQLTypes['uuid'];
    updatedAt: GraphQLTypes['timestamptz'];
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregated selection of "CaseSeverity" */
  ['CaseSeverity_aggregate']: {
    __typename: 'CaseSeverity_aggregate';
    aggregate?: GraphQLTypes['CaseSeverity_aggregate_fields'] | undefined;
    nodes: Array<GraphQLTypes['CaseSeverity']>;
  };
  /** aggregate fields of "CaseSeverity" */
  ['CaseSeverity_aggregate_fields']: {
    __typename: 'CaseSeverity_aggregate_fields';
    avg?: GraphQLTypes['CaseSeverity_avg_fields'] | undefined;
    count: number;
    max?: GraphQLTypes['CaseSeverity_max_fields'] | undefined;
    min?: GraphQLTypes['CaseSeverity_min_fields'] | undefined;
    stddev?: GraphQLTypes['CaseSeverity_stddev_fields'] | undefined;
    stddev_pop?: GraphQLTypes['CaseSeverity_stddev_pop_fields'] | undefined;
    stddev_samp?: GraphQLTypes['CaseSeverity_stddev_samp_fields'] | undefined;
    sum?: GraphQLTypes['CaseSeverity_sum_fields'] | undefined;
    var_pop?: GraphQLTypes['CaseSeverity_var_pop_fields'] | undefined;
    var_samp?: GraphQLTypes['CaseSeverity_var_samp_fields'] | undefined;
    variance?: GraphQLTypes['CaseSeverity_variance_fields'] | undefined;
  };
  /** aggregate avg on columns */
  ['CaseSeverity_avg_fields']: {
    __typename: 'CaseSeverity_avg_fields';
    cursorId?: number | undefined;
  };
  /** Boolean expression to filter rows from the table "CaseSeverity". All fields are combined with a logical 'AND'. */
  ['CaseSeverity_bool_exp']: {
    _and?: Array<GraphQLTypes['CaseSeverity_bool_exp']> | undefined;
    _not?: GraphQLTypes['CaseSeverity_bool_exp'] | undefined;
    _or?: Array<GraphQLTypes['CaseSeverity_bool_exp']> | undefined;
    createdAt?: GraphQLTypes['timestamptz_comparison_exp'] | undefined;
    createdById?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    cursorId?: GraphQLTypes['bigint_comparison_exp'] | undefined;
    description?: GraphQLTypes['String_comparison_exp'] | undefined;
    id?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    name?: GraphQLTypes['String_comparison_exp'] | undefined;
    status?: GraphQLTypes['Status_enum_comparison_exp'] | undefined;
    tenantId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz_comparison_exp'] | undefined;
    updatedById?: GraphQLTypes['uuid_comparison_exp'] | undefined;
  };
  /** unique or primary key constraints on table "CaseSeverity" */
  ['CaseSeverity_constraint']: CaseSeverity_constraint;
  /** input type for incrementing numeric columns in table "CaseSeverity" */
  ['CaseSeverity_inc_input']: {
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "CaseSeverity" */
  ['CaseSeverity_insert_input']: {
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate max on columns */
  ['CaseSeverity_max_fields']: {
    __typename: 'CaseSeverity_max_fields';
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate min on columns */
  ['CaseSeverity_min_fields']: {
    __typename: 'CaseSeverity_min_fields';
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** response of any mutation on the table "CaseSeverity" */
  ['CaseSeverity_mutation_response']: {
    __typename: 'CaseSeverity_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['CaseSeverity']>;
  };
  /** on_conflict condition type for table "CaseSeverity" */
  ['CaseSeverity_on_conflict']: {
    constraint: GraphQLTypes['CaseSeverity_constraint'];
    update_columns: Array<GraphQLTypes['CaseSeverity_update_column']>;
    where?: GraphQLTypes['CaseSeverity_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "CaseSeverity". */
  ['CaseSeverity_order_by']: {
    createdAt?: GraphQLTypes['order_by'] | undefined;
    createdById?: GraphQLTypes['order_by'] | undefined;
    cursorId?: GraphQLTypes['order_by'] | undefined;
    description?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    name?: GraphQLTypes['order_by'] | undefined;
    status?: GraphQLTypes['order_by'] | undefined;
    tenantId?: GraphQLTypes['order_by'] | undefined;
    updatedAt?: GraphQLTypes['order_by'] | undefined;
    updatedById?: GraphQLTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: CaseSeverity */
  ['CaseSeverity_pk_columns_input']: {
    id: GraphQLTypes['uuid'];
  };
  /** select columns of table "CaseSeverity" */
  ['CaseSeverity_select_column']: CaseSeverity_select_column;
  /** input type for updating data in table "CaseSeverity" */
  ['CaseSeverity_set_input']: {
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate stddev on columns */
  ['CaseSeverity_stddev_fields']: {
    __typename: 'CaseSeverity_stddev_fields';
    cursorId?: number | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['CaseSeverity_stddev_pop_fields']: {
    __typename: 'CaseSeverity_stddev_pop_fields';
    cursorId?: number | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['CaseSeverity_stddev_samp_fields']: {
    __typename: 'CaseSeverity_stddev_samp_fields';
    cursorId?: number | undefined;
  };
  /** Streaming cursor of the table "CaseSeverity" */
  ['CaseSeverity_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: GraphQLTypes['CaseSeverity_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: GraphQLTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['CaseSeverity_stream_cursor_value_input']: {
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate sum on columns */
  ['CaseSeverity_sum_fields']: {
    __typename: 'CaseSeverity_sum_fields';
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** update columns of table "CaseSeverity" */
  ['CaseSeverity_update_column']: CaseSeverity_update_column;
  ['CaseSeverity_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: GraphQLTypes['CaseSeverity_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: GraphQLTypes['CaseSeverity_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: GraphQLTypes['CaseSeverity_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['CaseSeverity_var_pop_fields']: {
    __typename: 'CaseSeverity_var_pop_fields';
    cursorId?: number | undefined;
  };
  /** aggregate var_samp on columns */
  ['CaseSeverity_var_samp_fields']: {
    __typename: 'CaseSeverity_var_samp_fields';
    cursorId?: number | undefined;
  };
  /** aggregate variance on columns */
  ['CaseSeverity_variance_fields']: {
    __typename: 'CaseSeverity_variance_fields';
    cursorId?: number | undefined;
  };
  /** columns and relationships of "ClosureReason" */
  ['ClosureReason']: {
    __typename: 'ClosureReason';
    createdAt: GraphQLTypes['timestamptz'];
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId: GraphQLTypes['bigint'];
    description: string;
    id: GraphQLTypes['uuid'];
    name: string;
    status: GraphQLTypes['Status_enum'];
    tenantId: GraphQLTypes['uuid'];
    updatedAt: GraphQLTypes['timestamptz'];
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregated selection of "ClosureReason" */
  ['ClosureReason_aggregate']: {
    __typename: 'ClosureReason_aggregate';
    aggregate?: GraphQLTypes['ClosureReason_aggregate_fields'] | undefined;
    nodes: Array<GraphQLTypes['ClosureReason']>;
  };
  /** aggregate fields of "ClosureReason" */
  ['ClosureReason_aggregate_fields']: {
    __typename: 'ClosureReason_aggregate_fields';
    avg?: GraphQLTypes['ClosureReason_avg_fields'] | undefined;
    count: number;
    max?: GraphQLTypes['ClosureReason_max_fields'] | undefined;
    min?: GraphQLTypes['ClosureReason_min_fields'] | undefined;
    stddev?: GraphQLTypes['ClosureReason_stddev_fields'] | undefined;
    stddev_pop?: GraphQLTypes['ClosureReason_stddev_pop_fields'] | undefined;
    stddev_samp?: GraphQLTypes['ClosureReason_stddev_samp_fields'] | undefined;
    sum?: GraphQLTypes['ClosureReason_sum_fields'] | undefined;
    var_pop?: GraphQLTypes['ClosureReason_var_pop_fields'] | undefined;
    var_samp?: GraphQLTypes['ClosureReason_var_samp_fields'] | undefined;
    variance?: GraphQLTypes['ClosureReason_variance_fields'] | undefined;
  };
  /** aggregate avg on columns */
  ['ClosureReason_avg_fields']: {
    __typename: 'ClosureReason_avg_fields';
    cursorId?: number | undefined;
  };
  /** Boolean expression to filter rows from the table "ClosureReason". All fields are combined with a logical 'AND'. */
  ['ClosureReason_bool_exp']: {
    _and?: Array<GraphQLTypes['ClosureReason_bool_exp']> | undefined;
    _not?: GraphQLTypes['ClosureReason_bool_exp'] | undefined;
    _or?: Array<GraphQLTypes['ClosureReason_bool_exp']> | undefined;
    createdAt?: GraphQLTypes['timestamptz_comparison_exp'] | undefined;
    createdById?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    cursorId?: GraphQLTypes['bigint_comparison_exp'] | undefined;
    description?: GraphQLTypes['String_comparison_exp'] | undefined;
    id?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    name?: GraphQLTypes['String_comparison_exp'] | undefined;
    status?: GraphQLTypes['Status_enum_comparison_exp'] | undefined;
    tenantId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz_comparison_exp'] | undefined;
    updatedById?: GraphQLTypes['uuid_comparison_exp'] | undefined;
  };
  /** unique or primary key constraints on table "ClosureReason" */
  ['ClosureReason_constraint']: ClosureReason_constraint;
  /** input type for incrementing numeric columns in table "ClosureReason" */
  ['ClosureReason_inc_input']: {
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "ClosureReason" */
  ['ClosureReason_insert_input']: {
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate max on columns */
  ['ClosureReason_max_fields']: {
    __typename: 'ClosureReason_max_fields';
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate min on columns */
  ['ClosureReason_min_fields']: {
    __typename: 'ClosureReason_min_fields';
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** response of any mutation on the table "ClosureReason" */
  ['ClosureReason_mutation_response']: {
    __typename: 'ClosureReason_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['ClosureReason']>;
  };
  /** on_conflict condition type for table "ClosureReason" */
  ['ClosureReason_on_conflict']: {
    constraint: GraphQLTypes['ClosureReason_constraint'];
    update_columns: Array<GraphQLTypes['ClosureReason_update_column']>;
    where?: GraphQLTypes['ClosureReason_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "ClosureReason". */
  ['ClosureReason_order_by']: {
    createdAt?: GraphQLTypes['order_by'] | undefined;
    createdById?: GraphQLTypes['order_by'] | undefined;
    cursorId?: GraphQLTypes['order_by'] | undefined;
    description?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    name?: GraphQLTypes['order_by'] | undefined;
    status?: GraphQLTypes['order_by'] | undefined;
    tenantId?: GraphQLTypes['order_by'] | undefined;
    updatedAt?: GraphQLTypes['order_by'] | undefined;
    updatedById?: GraphQLTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: ClosureReason */
  ['ClosureReason_pk_columns_input']: {
    id: GraphQLTypes['uuid'];
  };
  /** select columns of table "ClosureReason" */
  ['ClosureReason_select_column']: ClosureReason_select_column;
  /** input type for updating data in table "ClosureReason" */
  ['ClosureReason_set_input']: {
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate stddev on columns */
  ['ClosureReason_stddev_fields']: {
    __typename: 'ClosureReason_stddev_fields';
    cursorId?: number | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['ClosureReason_stddev_pop_fields']: {
    __typename: 'ClosureReason_stddev_pop_fields';
    cursorId?: number | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['ClosureReason_stddev_samp_fields']: {
    __typename: 'ClosureReason_stddev_samp_fields';
    cursorId?: number | undefined;
  };
  /** Streaming cursor of the table "ClosureReason" */
  ['ClosureReason_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: GraphQLTypes['ClosureReason_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: GraphQLTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['ClosureReason_stream_cursor_value_input']: {
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate sum on columns */
  ['ClosureReason_sum_fields']: {
    __typename: 'ClosureReason_sum_fields';
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** update columns of table "ClosureReason" */
  ['ClosureReason_update_column']: ClosureReason_update_column;
  ['ClosureReason_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: GraphQLTypes['ClosureReason_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: GraphQLTypes['ClosureReason_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: GraphQLTypes['ClosureReason_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['ClosureReason_var_pop_fields']: {
    __typename: 'ClosureReason_var_pop_fields';
    cursorId?: number | undefined;
  };
  /** aggregate var_samp on columns */
  ['ClosureReason_var_samp_fields']: {
    __typename: 'ClosureReason_var_samp_fields';
    cursorId?: number | undefined;
  };
  /** aggregate variance on columns */
  ['ClosureReason_variance_fields']: {
    __typename: 'ClosureReason_variance_fields';
    cursorId?: number | undefined;
  };
  /** columns and relationships of "Currency" */
  ['Currency']: {
    __typename: 'Currency';
    code: string;
    country: string;
    createdAt: GraphQLTypes['timestamp'];
    exchangeRate: string;
    id: GraphQLTypes['uuid'];
    name: string;
    status: GraphQLTypes['Status_enum'];
    tenantId: GraphQLTypes['uuid'];
    updatedAt: GraphQLTypes['timestamp'];
  };
  /** aggregated selection of "Currency" */
  ['Currency_aggregate']: {
    __typename: 'Currency_aggregate';
    aggregate?: GraphQLTypes['Currency_aggregate_fields'] | undefined;
    nodes: Array<GraphQLTypes['Currency']>;
  };
  /** aggregate fields of "Currency" */
  ['Currency_aggregate_fields']: {
    __typename: 'Currency_aggregate_fields';
    count: number;
    max?: GraphQLTypes['Currency_max_fields'] | undefined;
    min?: GraphQLTypes['Currency_min_fields'] | undefined;
  };
  /** Boolean expression to filter rows from the table "Currency". All fields are combined with a logical 'AND'. */
  ['Currency_bool_exp']: {
    _and?: Array<GraphQLTypes['Currency_bool_exp']> | undefined;
    _not?: GraphQLTypes['Currency_bool_exp'] | undefined;
    _or?: Array<GraphQLTypes['Currency_bool_exp']> | undefined;
    code?: GraphQLTypes['String_comparison_exp'] | undefined;
    country?: GraphQLTypes['String_comparison_exp'] | undefined;
    createdAt?: GraphQLTypes['timestamp_comparison_exp'] | undefined;
    exchangeRate?: GraphQLTypes['String_comparison_exp'] | undefined;
    id?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    name?: GraphQLTypes['String_comparison_exp'] | undefined;
    status?: GraphQLTypes['Status_enum_comparison_exp'] | undefined;
    tenantId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    updatedAt?: GraphQLTypes['timestamp_comparison_exp'] | undefined;
  };
  /** unique or primary key constraints on table "Currency" */
  ['Currency_constraint']: Currency_constraint;
  /** input type for inserting data into table "Currency" */
  ['Currency_insert_input']: {
    code?: string | undefined;
    country?: string | undefined;
    createdAt?: GraphQLTypes['timestamp'] | undefined;
    exchangeRate?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamp'] | undefined;
  };
  /** aggregate max on columns */
  ['Currency_max_fields']: {
    __typename: 'Currency_max_fields';
    code?: string | undefined;
    country?: string | undefined;
    createdAt?: GraphQLTypes['timestamp'] | undefined;
    exchangeRate?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamp'] | undefined;
  };
  /** aggregate min on columns */
  ['Currency_min_fields']: {
    __typename: 'Currency_min_fields';
    code?: string | undefined;
    country?: string | undefined;
    createdAt?: GraphQLTypes['timestamp'] | undefined;
    exchangeRate?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamp'] | undefined;
  };
  /** response of any mutation on the table "Currency" */
  ['Currency_mutation_response']: {
    __typename: 'Currency_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['Currency']>;
  };
  /** on_conflict condition type for table "Currency" */
  ['Currency_on_conflict']: {
    constraint: GraphQLTypes['Currency_constraint'];
    update_columns: Array<GraphQLTypes['Currency_update_column']>;
    where?: GraphQLTypes['Currency_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "Currency". */
  ['Currency_order_by']: {
    code?: GraphQLTypes['order_by'] | undefined;
    country?: GraphQLTypes['order_by'] | undefined;
    createdAt?: GraphQLTypes['order_by'] | undefined;
    exchangeRate?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    name?: GraphQLTypes['order_by'] | undefined;
    status?: GraphQLTypes['order_by'] | undefined;
    tenantId?: GraphQLTypes['order_by'] | undefined;
    updatedAt?: GraphQLTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: Currency */
  ['Currency_pk_columns_input']: {
    id: GraphQLTypes['uuid'];
  };
  /** select columns of table "Currency" */
  ['Currency_select_column']: Currency_select_column;
  /** input type for updating data in table "Currency" */
  ['Currency_set_input']: {
    code?: string | undefined;
    country?: string | undefined;
    createdAt?: GraphQLTypes['timestamp'] | undefined;
    exchangeRate?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamp'] | undefined;
  };
  /** Streaming cursor of the table "Currency" */
  ['Currency_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: GraphQLTypes['Currency_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: GraphQLTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['Currency_stream_cursor_value_input']: {
    code?: string | undefined;
    country?: string | undefined;
    createdAt?: GraphQLTypes['timestamp'] | undefined;
    exchangeRate?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamp'] | undefined;
  };
  /** update columns of table "Currency" */
  ['Currency_update_column']: Currency_update_column;
  ['Currency_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: GraphQLTypes['Currency_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: GraphQLTypes['Currency_bool_exp'];
  };
  /** columns and relationships of "CustomRole" */
  ['CustomRole']: {
    __typename: 'CustomRole';
    createdAt: GraphQLTypes['timestamptz'];
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId: GraphQLTypes['bigint'];
    description: string;
    id: GraphQLTypes['uuid'];
    name: string;
    status: GraphQLTypes['Status_enum'];
    tenantId: GraphQLTypes['uuid'];
    updatedAt: GraphQLTypes['timestamptz'];
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregated selection of "CustomRole" */
  ['CustomRole_aggregate']: {
    __typename: 'CustomRole_aggregate';
    aggregate?: GraphQLTypes['CustomRole_aggregate_fields'] | undefined;
    nodes: Array<GraphQLTypes['CustomRole']>;
  };
  /** aggregate fields of "CustomRole" */
  ['CustomRole_aggregate_fields']: {
    __typename: 'CustomRole_aggregate_fields';
    avg?: GraphQLTypes['CustomRole_avg_fields'] | undefined;
    count: number;
    max?: GraphQLTypes['CustomRole_max_fields'] | undefined;
    min?: GraphQLTypes['CustomRole_min_fields'] | undefined;
    stddev?: GraphQLTypes['CustomRole_stddev_fields'] | undefined;
    stddev_pop?: GraphQLTypes['CustomRole_stddev_pop_fields'] | undefined;
    stddev_samp?: GraphQLTypes['CustomRole_stddev_samp_fields'] | undefined;
    sum?: GraphQLTypes['CustomRole_sum_fields'] | undefined;
    var_pop?: GraphQLTypes['CustomRole_var_pop_fields'] | undefined;
    var_samp?: GraphQLTypes['CustomRole_var_samp_fields'] | undefined;
    variance?: GraphQLTypes['CustomRole_variance_fields'] | undefined;
  };
  /** aggregate avg on columns */
  ['CustomRole_avg_fields']: {
    __typename: 'CustomRole_avg_fields';
    cursorId?: number | undefined;
  };
  /** Boolean expression to filter rows from the table "CustomRole". All fields are combined with a logical 'AND'. */
  ['CustomRole_bool_exp']: {
    _and?: Array<GraphQLTypes['CustomRole_bool_exp']> | undefined;
    _not?: GraphQLTypes['CustomRole_bool_exp'] | undefined;
    _or?: Array<GraphQLTypes['CustomRole_bool_exp']> | undefined;
    createdAt?: GraphQLTypes['timestamptz_comparison_exp'] | undefined;
    createdById?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    cursorId?: GraphQLTypes['bigint_comparison_exp'] | undefined;
    description?: GraphQLTypes['String_comparison_exp'] | undefined;
    id?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    name?: GraphQLTypes['String_comparison_exp'] | undefined;
    status?: GraphQLTypes['Status_enum_comparison_exp'] | undefined;
    tenantId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz_comparison_exp'] | undefined;
    updatedById?: GraphQLTypes['uuid_comparison_exp'] | undefined;
  };
  /** unique or primary key constraints on table "CustomRole" */
  ['CustomRole_constraint']: CustomRole_constraint;
  /** input type for incrementing numeric columns in table "CustomRole" */
  ['CustomRole_inc_input']: {
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "CustomRole" */
  ['CustomRole_insert_input']: {
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate max on columns */
  ['CustomRole_max_fields']: {
    __typename: 'CustomRole_max_fields';
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate min on columns */
  ['CustomRole_min_fields']: {
    __typename: 'CustomRole_min_fields';
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** response of any mutation on the table "CustomRole" */
  ['CustomRole_mutation_response']: {
    __typename: 'CustomRole_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['CustomRole']>;
  };
  /** on_conflict condition type for table "CustomRole" */
  ['CustomRole_on_conflict']: {
    constraint: GraphQLTypes['CustomRole_constraint'];
    update_columns: Array<GraphQLTypes['CustomRole_update_column']>;
    where?: GraphQLTypes['CustomRole_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "CustomRole". */
  ['CustomRole_order_by']: {
    createdAt?: GraphQLTypes['order_by'] | undefined;
    createdById?: GraphQLTypes['order_by'] | undefined;
    cursorId?: GraphQLTypes['order_by'] | undefined;
    description?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    name?: GraphQLTypes['order_by'] | undefined;
    status?: GraphQLTypes['order_by'] | undefined;
    tenantId?: GraphQLTypes['order_by'] | undefined;
    updatedAt?: GraphQLTypes['order_by'] | undefined;
    updatedById?: GraphQLTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: CustomRole */
  ['CustomRole_pk_columns_input']: {
    id: GraphQLTypes['uuid'];
  };
  /** select columns of table "CustomRole" */
  ['CustomRole_select_column']: CustomRole_select_column;
  /** input type for updating data in table "CustomRole" */
  ['CustomRole_set_input']: {
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate stddev on columns */
  ['CustomRole_stddev_fields']: {
    __typename: 'CustomRole_stddev_fields';
    cursorId?: number | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['CustomRole_stddev_pop_fields']: {
    __typename: 'CustomRole_stddev_pop_fields';
    cursorId?: number | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['CustomRole_stddev_samp_fields']: {
    __typename: 'CustomRole_stddev_samp_fields';
    cursorId?: number | undefined;
  };
  /** Streaming cursor of the table "CustomRole" */
  ['CustomRole_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: GraphQLTypes['CustomRole_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: GraphQLTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['CustomRole_stream_cursor_value_input']: {
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate sum on columns */
  ['CustomRole_sum_fields']: {
    __typename: 'CustomRole_sum_fields';
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** update columns of table "CustomRole" */
  ['CustomRole_update_column']: CustomRole_update_column;
  ['CustomRole_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: GraphQLTypes['CustomRole_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: GraphQLTypes['CustomRole_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: GraphQLTypes['CustomRole_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['CustomRole_var_pop_fields']: {
    __typename: 'CustomRole_var_pop_fields';
    cursorId?: number | undefined;
  };
  /** aggregate var_samp on columns */
  ['CustomRole_var_samp_fields']: {
    __typename: 'CustomRole_var_samp_fields';
    cursorId?: number | undefined;
  };
  /** aggregate variance on columns */
  ['CustomRole_variance_fields']: {
    __typename: 'CustomRole_variance_fields';
    cursorId?: number | undefined;
  };
  /** columns and relationships of "Group" */
  ['Group']: {
    __typename: 'Group';
    createdBy: GraphQLTypes['uuid'];
    created_at: GraphQLTypes['timestamptz'];
    cursorId: GraphQLTypes['bigint'];
    description: string;
    id: GraphQLTypes['uuid'];
    lastModifiedBy: GraphQLTypes['uuid'];
    name: string;
    role: string;
    /** An array relationship */
    roles: Array<GraphQLTypes['GroupRole']>;
    /** An aggregate relationship */
    roles_aggregate: GraphQLTypes['GroupRole_aggregate'];
    status: GraphQLTypes['Status_enum'];
    tenantId: GraphQLTypes['uuid'];
    updated_at: GraphQLTypes['timestamptz'];
    /** An array relationship */
    users: Array<GraphQLTypes['UserGroup']>;
    /** An aggregate relationship */
    users_aggregate: GraphQLTypes['UserGroup_aggregate'];
  };
  /** columns and relationships of "GroupRole" */
  ['GroupRole']: {
    __typename: 'GroupRole';
    /** An object relationship */
    group: GraphQLTypes['Group'];
    groupId: GraphQLTypes['uuid'];
    id: GraphQLTypes['uuid'];
    /** An object relationship */
    role: GraphQLTypes['Role'];
    roleId: GraphQLTypes['uuid'];
  };
  /** aggregated selection of "GroupRole" */
  ['GroupRole_aggregate']: {
    __typename: 'GroupRole_aggregate';
    aggregate?: GraphQLTypes['GroupRole_aggregate_fields'] | undefined;
    nodes: Array<GraphQLTypes['GroupRole']>;
  };
  ['GroupRole_aggregate_bool_exp']: {
    count?: GraphQLTypes['GroupRole_aggregate_bool_exp_count'] | undefined;
  };
  ['GroupRole_aggregate_bool_exp_count']: {
    arguments?: Array<GraphQLTypes['GroupRole_select_column']> | undefined;
    distinct?: boolean | undefined;
    filter?: GraphQLTypes['GroupRole_bool_exp'] | undefined;
    predicate: GraphQLTypes['Int_comparison_exp'];
  };
  /** aggregate fields of "GroupRole" */
  ['GroupRole_aggregate_fields']: {
    __typename: 'GroupRole_aggregate_fields';
    count: number;
    max?: GraphQLTypes['GroupRole_max_fields'] | undefined;
    min?: GraphQLTypes['GroupRole_min_fields'] | undefined;
  };
  /** order by aggregate values of table "GroupRole" */
  ['GroupRole_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'] | undefined;
    max?: GraphQLTypes['GroupRole_max_order_by'] | undefined;
    min?: GraphQLTypes['GroupRole_min_order_by'] | undefined;
  };
  /** input type for inserting array relation for remote table "GroupRole" */
  ['GroupRole_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['GroupRole_insert_input']>;
    /** upsert condition */
    on_conflict?: GraphQLTypes['GroupRole_on_conflict'] | undefined;
  };
  /** Boolean expression to filter rows from the table "GroupRole". All fields are combined with a logical 'AND'. */
  ['GroupRole_bool_exp']: {
    _and?: Array<GraphQLTypes['GroupRole_bool_exp']> | undefined;
    _not?: GraphQLTypes['GroupRole_bool_exp'] | undefined;
    _or?: Array<GraphQLTypes['GroupRole_bool_exp']> | undefined;
    group?: GraphQLTypes['Group_bool_exp'] | undefined;
    groupId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    id?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    role?: GraphQLTypes['Role_bool_exp'] | undefined;
    roleId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
  };
  /** unique or primary key constraints on table "GroupRole" */
  ['GroupRole_constraint']: GroupRole_constraint;
  /** input type for inserting data into table "GroupRole" */
  ['GroupRole_insert_input']: {
    group?: GraphQLTypes['Group_obj_rel_insert_input'] | undefined;
    groupId?: GraphQLTypes['uuid'] | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    role?: GraphQLTypes['Role_obj_rel_insert_input'] | undefined;
    roleId?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate max on columns */
  ['GroupRole_max_fields']: {
    __typename: 'GroupRole_max_fields';
    groupId?: GraphQLTypes['uuid'] | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    roleId?: GraphQLTypes['uuid'] | undefined;
  };
  /** order by max() on columns of table "GroupRole" */
  ['GroupRole_max_order_by']: {
    groupId?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    roleId?: GraphQLTypes['order_by'] | undefined;
  };
  /** aggregate min on columns */
  ['GroupRole_min_fields']: {
    __typename: 'GroupRole_min_fields';
    groupId?: GraphQLTypes['uuid'] | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    roleId?: GraphQLTypes['uuid'] | undefined;
  };
  /** order by min() on columns of table "GroupRole" */
  ['GroupRole_min_order_by']: {
    groupId?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    roleId?: GraphQLTypes['order_by'] | undefined;
  };
  /** response of any mutation on the table "GroupRole" */
  ['GroupRole_mutation_response']: {
    __typename: 'GroupRole_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['GroupRole']>;
  };
  /** on_conflict condition type for table "GroupRole" */
  ['GroupRole_on_conflict']: {
    constraint: GraphQLTypes['GroupRole_constraint'];
    update_columns: Array<GraphQLTypes['GroupRole_update_column']>;
    where?: GraphQLTypes['GroupRole_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "GroupRole". */
  ['GroupRole_order_by']: {
    group?: GraphQLTypes['Group_order_by'] | undefined;
    groupId?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    role?: GraphQLTypes['Role_order_by'] | undefined;
    roleId?: GraphQLTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: GroupRole */
  ['GroupRole_pk_columns_input']: {
    id: GraphQLTypes['uuid'];
  };
  /** select columns of table "GroupRole" */
  ['GroupRole_select_column']: GroupRole_select_column;
  /** input type for updating data in table "GroupRole" */
  ['GroupRole_set_input']: {
    groupId?: GraphQLTypes['uuid'] | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    roleId?: GraphQLTypes['uuid'] | undefined;
  };
  /** Streaming cursor of the table "GroupRole" */
  ['GroupRole_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: GraphQLTypes['GroupRole_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: GraphQLTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['GroupRole_stream_cursor_value_input']: {
    groupId?: GraphQLTypes['uuid'] | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    roleId?: GraphQLTypes['uuid'] | undefined;
  };
  /** update columns of table "GroupRole" */
  ['GroupRole_update_column']: GroupRole_update_column;
  ['GroupRole_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: GraphQLTypes['GroupRole_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: GraphQLTypes['GroupRole_bool_exp'];
  };
  /** aggregated selection of "Group" */
  ['Group_aggregate']: {
    __typename: 'Group_aggregate';
    aggregate?: GraphQLTypes['Group_aggregate_fields'] | undefined;
    nodes: Array<GraphQLTypes['Group']>;
  };
  /** aggregate fields of "Group" */
  ['Group_aggregate_fields']: {
    __typename: 'Group_aggregate_fields';
    avg?: GraphQLTypes['Group_avg_fields'] | undefined;
    count: number;
    max?: GraphQLTypes['Group_max_fields'] | undefined;
    min?: GraphQLTypes['Group_min_fields'] | undefined;
    stddev?: GraphQLTypes['Group_stddev_fields'] | undefined;
    stddev_pop?: GraphQLTypes['Group_stddev_pop_fields'] | undefined;
    stddev_samp?: GraphQLTypes['Group_stddev_samp_fields'] | undefined;
    sum?: GraphQLTypes['Group_sum_fields'] | undefined;
    var_pop?: GraphQLTypes['Group_var_pop_fields'] | undefined;
    var_samp?: GraphQLTypes['Group_var_samp_fields'] | undefined;
    variance?: GraphQLTypes['Group_variance_fields'] | undefined;
  };
  /** aggregate avg on columns */
  ['Group_avg_fields']: {
    __typename: 'Group_avg_fields';
    cursorId?: number | undefined;
  };
  /** Boolean expression to filter rows from the table "Group". All fields are combined with a logical 'AND'. */
  ['Group_bool_exp']: {
    _and?: Array<GraphQLTypes['Group_bool_exp']> | undefined;
    _not?: GraphQLTypes['Group_bool_exp'] | undefined;
    _or?: Array<GraphQLTypes['Group_bool_exp']> | undefined;
    createdBy?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    created_at?: GraphQLTypes['timestamptz_comparison_exp'] | undefined;
    cursorId?: GraphQLTypes['bigint_comparison_exp'] | undefined;
    description?: GraphQLTypes['String_comparison_exp'] | undefined;
    id?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    lastModifiedBy?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    name?: GraphQLTypes['String_comparison_exp'] | undefined;
    role?: GraphQLTypes['String_comparison_exp'] | undefined;
    roles?: GraphQLTypes['GroupRole_bool_exp'] | undefined;
    roles_aggregate?: GraphQLTypes['GroupRole_aggregate_bool_exp'] | undefined;
    status?: GraphQLTypes['Status_enum_comparison_exp'] | undefined;
    tenantId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    updated_at?: GraphQLTypes['timestamptz_comparison_exp'] | undefined;
    users?: GraphQLTypes['UserGroup_bool_exp'] | undefined;
    users_aggregate?: GraphQLTypes['UserGroup_aggregate_bool_exp'] | undefined;
  };
  /** unique or primary key constraints on table "Group" */
  ['Group_constraint']: Group_constraint;
  /** input type for incrementing numeric columns in table "Group" */
  ['Group_inc_input']: {
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "Group" */
  ['Group_insert_input']: {
    createdBy?: GraphQLTypes['uuid'] | undefined;
    created_at?: GraphQLTypes['timestamptz'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    lastModifiedBy?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    role?: string | undefined;
    roles?: GraphQLTypes['GroupRole_arr_rel_insert_input'] | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updated_at?: GraphQLTypes['timestamptz'] | undefined;
    users?: GraphQLTypes['UserGroup_arr_rel_insert_input'] | undefined;
  };
  /** aggregate max on columns */
  ['Group_max_fields']: {
    __typename: 'Group_max_fields';
    createdBy?: GraphQLTypes['uuid'] | undefined;
    created_at?: GraphQLTypes['timestamptz'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    lastModifiedBy?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    role?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updated_at?: GraphQLTypes['timestamptz'] | undefined;
  };
  /** aggregate min on columns */
  ['Group_min_fields']: {
    __typename: 'Group_min_fields';
    createdBy?: GraphQLTypes['uuid'] | undefined;
    created_at?: GraphQLTypes['timestamptz'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    lastModifiedBy?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    role?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updated_at?: GraphQLTypes['timestamptz'] | undefined;
  };
  /** response of any mutation on the table "Group" */
  ['Group_mutation_response']: {
    __typename: 'Group_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['Group']>;
  };
  /** input type for inserting object relation for remote table "Group" */
  ['Group_obj_rel_insert_input']: {
    data: GraphQLTypes['Group_insert_input'];
    /** upsert condition */
    on_conflict?: GraphQLTypes['Group_on_conflict'] | undefined;
  };
  /** on_conflict condition type for table "Group" */
  ['Group_on_conflict']: {
    constraint: GraphQLTypes['Group_constraint'];
    update_columns: Array<GraphQLTypes['Group_update_column']>;
    where?: GraphQLTypes['Group_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "Group". */
  ['Group_order_by']: {
    createdBy?: GraphQLTypes['order_by'] | undefined;
    created_at?: GraphQLTypes['order_by'] | undefined;
    cursorId?: GraphQLTypes['order_by'] | undefined;
    description?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    lastModifiedBy?: GraphQLTypes['order_by'] | undefined;
    name?: GraphQLTypes['order_by'] | undefined;
    role?: GraphQLTypes['order_by'] | undefined;
    roles_aggregate?: GraphQLTypes['GroupRole_aggregate_order_by'] | undefined;
    status?: GraphQLTypes['order_by'] | undefined;
    tenantId?: GraphQLTypes['order_by'] | undefined;
    updated_at?: GraphQLTypes['order_by'] | undefined;
    users_aggregate?: GraphQLTypes['UserGroup_aggregate_order_by'] | undefined;
  };
  /** primary key columns input for table: Group */
  ['Group_pk_columns_input']: {
    id: GraphQLTypes['uuid'];
  };
  /** select columns of table "Group" */
  ['Group_select_column']: Group_select_column;
  /** input type for updating data in table "Group" */
  ['Group_set_input']: {
    createdBy?: GraphQLTypes['uuid'] | undefined;
    created_at?: GraphQLTypes['timestamptz'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    lastModifiedBy?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    role?: string | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updated_at?: GraphQLTypes['timestamptz'] | undefined;
  };
  /** aggregate stddev on columns */
  ['Group_stddev_fields']: {
    __typename: 'Group_stddev_fields';
    cursorId?: number | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['Group_stddev_pop_fields']: {
    __typename: 'Group_stddev_pop_fields';
    cursorId?: number | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['Group_stddev_samp_fields']: {
    __typename: 'Group_stddev_samp_fields';
    cursorId?: number | undefined;
  };
  /** Streaming cursor of the table "Group" */
  ['Group_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: GraphQLTypes['Group_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: GraphQLTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['Group_stream_cursor_value_input']: {
    createdBy?: GraphQLTypes['uuid'] | undefined;
    created_at?: GraphQLTypes['timestamptz'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    lastModifiedBy?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    role?: string | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updated_at?: GraphQLTypes['timestamptz'] | undefined;
  };
  /** aggregate sum on columns */
  ['Group_sum_fields']: {
    __typename: 'Group_sum_fields';
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** update columns of table "Group" */
  ['Group_update_column']: Group_update_column;
  ['Group_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: GraphQLTypes['Group_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: GraphQLTypes['Group_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: GraphQLTypes['Group_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['Group_var_pop_fields']: {
    __typename: 'Group_var_pop_fields';
    cursorId?: number | undefined;
  };
  /** aggregate var_samp on columns */
  ['Group_var_samp_fields']: {
    __typename: 'Group_var_samp_fields';
    cursorId?: number | undefined;
  };
  /** aggregate variance on columns */
  ['Group_variance_fields']: {
    __typename: 'Group_variance_fields';
    cursorId?: number | undefined;
  };
  /** columns and relationships of "Industry" */
  ['Industry']: {
    __typename: 'Industry';
    createdAt: GraphQLTypes['timestamptz'];
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId: GraphQLTypes['bigint'];
    description: string;
    id: GraphQLTypes['uuid'];
    name: string;
    status: GraphQLTypes['Status_enum'];
    tenantId: GraphQLTypes['uuid'];
    updatedAt: GraphQLTypes['timestamptz'];
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregated selection of "Industry" */
  ['Industry_aggregate']: {
    __typename: 'Industry_aggregate';
    aggregate?: GraphQLTypes['Industry_aggregate_fields'] | undefined;
    nodes: Array<GraphQLTypes['Industry']>;
  };
  /** aggregate fields of "Industry" */
  ['Industry_aggregate_fields']: {
    __typename: 'Industry_aggregate_fields';
    avg?: GraphQLTypes['Industry_avg_fields'] | undefined;
    count: number;
    max?: GraphQLTypes['Industry_max_fields'] | undefined;
    min?: GraphQLTypes['Industry_min_fields'] | undefined;
    stddev?: GraphQLTypes['Industry_stddev_fields'] | undefined;
    stddev_pop?: GraphQLTypes['Industry_stddev_pop_fields'] | undefined;
    stddev_samp?: GraphQLTypes['Industry_stddev_samp_fields'] | undefined;
    sum?: GraphQLTypes['Industry_sum_fields'] | undefined;
    var_pop?: GraphQLTypes['Industry_var_pop_fields'] | undefined;
    var_samp?: GraphQLTypes['Industry_var_samp_fields'] | undefined;
    variance?: GraphQLTypes['Industry_variance_fields'] | undefined;
  };
  /** aggregate avg on columns */
  ['Industry_avg_fields']: {
    __typename: 'Industry_avg_fields';
    cursorId?: number | undefined;
  };
  /** Boolean expression to filter rows from the table "Industry". All fields are combined with a logical 'AND'. */
  ['Industry_bool_exp']: {
    _and?: Array<GraphQLTypes['Industry_bool_exp']> | undefined;
    _not?: GraphQLTypes['Industry_bool_exp'] | undefined;
    _or?: Array<GraphQLTypes['Industry_bool_exp']> | undefined;
    createdAt?: GraphQLTypes['timestamptz_comparison_exp'] | undefined;
    createdById?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    cursorId?: GraphQLTypes['bigint_comparison_exp'] | undefined;
    description?: GraphQLTypes['String_comparison_exp'] | undefined;
    id?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    name?: GraphQLTypes['String_comparison_exp'] | undefined;
    status?: GraphQLTypes['Status_enum_comparison_exp'] | undefined;
    tenantId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz_comparison_exp'] | undefined;
    updatedById?: GraphQLTypes['uuid_comparison_exp'] | undefined;
  };
  /** unique or primary key constraints on table "Industry" */
  ['Industry_constraint']: Industry_constraint;
  /** input type for incrementing numeric columns in table "Industry" */
  ['Industry_inc_input']: {
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "Industry" */
  ['Industry_insert_input']: {
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate max on columns */
  ['Industry_max_fields']: {
    __typename: 'Industry_max_fields';
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate min on columns */
  ['Industry_min_fields']: {
    __typename: 'Industry_min_fields';
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** response of any mutation on the table "Industry" */
  ['Industry_mutation_response']: {
    __typename: 'Industry_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['Industry']>;
  };
  /** on_conflict condition type for table "Industry" */
  ['Industry_on_conflict']: {
    constraint: GraphQLTypes['Industry_constraint'];
    update_columns: Array<GraphQLTypes['Industry_update_column']>;
    where?: GraphQLTypes['Industry_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "Industry". */
  ['Industry_order_by']: {
    createdAt?: GraphQLTypes['order_by'] | undefined;
    createdById?: GraphQLTypes['order_by'] | undefined;
    cursorId?: GraphQLTypes['order_by'] | undefined;
    description?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    name?: GraphQLTypes['order_by'] | undefined;
    status?: GraphQLTypes['order_by'] | undefined;
    tenantId?: GraphQLTypes['order_by'] | undefined;
    updatedAt?: GraphQLTypes['order_by'] | undefined;
    updatedById?: GraphQLTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: Industry */
  ['Industry_pk_columns_input']: {
    id: GraphQLTypes['uuid'];
  };
  /** select columns of table "Industry" */
  ['Industry_select_column']: Industry_select_column;
  /** input type for updating data in table "Industry" */
  ['Industry_set_input']: {
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate stddev on columns */
  ['Industry_stddev_fields']: {
    __typename: 'Industry_stddev_fields';
    cursorId?: number | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['Industry_stddev_pop_fields']: {
    __typename: 'Industry_stddev_pop_fields';
    cursorId?: number | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['Industry_stddev_samp_fields']: {
    __typename: 'Industry_stddev_samp_fields';
    cursorId?: number | undefined;
  };
  /** Streaming cursor of the table "Industry" */
  ['Industry_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: GraphQLTypes['Industry_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: GraphQLTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['Industry_stream_cursor_value_input']: {
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate sum on columns */
  ['Industry_sum_fields']: {
    __typename: 'Industry_sum_fields';
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** update columns of table "Industry" */
  ['Industry_update_column']: Industry_update_column;
  ['Industry_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: GraphQLTypes['Industry_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: GraphQLTypes['Industry_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: GraphQLTypes['Industry_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['Industry_var_pop_fields']: {
    __typename: 'Industry_var_pop_fields';
    cursorId?: number | undefined;
  };
  /** aggregate var_samp on columns */
  ['Industry_var_samp_fields']: {
    __typename: 'Industry_var_samp_fields';
    cursorId?: number | undefined;
  };
  /** aggregate variance on columns */
  ['Industry_variance_fields']: {
    __typename: 'Industry_variance_fields';
    cursorId?: number | undefined;
  };
  /** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
  ['Int_comparison_exp']: {
    _eq?: number | undefined;
    _gt?: number | undefined;
    _gte?: number | undefined;
    _in?: Array<number> | undefined;
    _is_null?: boolean | undefined;
    _lt?: number | undefined;
    _lte?: number | undefined;
    _neq?: number | undefined;
    _nin?: Array<number> | undefined;
  };
  /** columns and relationships of "IssueCategory" */
  ['IssueCategory']: {
    __typename: 'IssueCategory';
    createdAt: GraphQLTypes['timestamptz'];
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId: GraphQLTypes['bigint'];
    description: string;
    id: GraphQLTypes['uuid'];
    name: string;
    status: GraphQLTypes['Status_enum'];
    tenantId: GraphQLTypes['uuid'];
    updatedAt: GraphQLTypes['timestamptz'];
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregated selection of "IssueCategory" */
  ['IssueCategory_aggregate']: {
    __typename: 'IssueCategory_aggregate';
    aggregate?: GraphQLTypes['IssueCategory_aggregate_fields'] | undefined;
    nodes: Array<GraphQLTypes['IssueCategory']>;
  };
  /** aggregate fields of "IssueCategory" */
  ['IssueCategory_aggregate_fields']: {
    __typename: 'IssueCategory_aggregate_fields';
    avg?: GraphQLTypes['IssueCategory_avg_fields'] | undefined;
    count: number;
    max?: GraphQLTypes['IssueCategory_max_fields'] | undefined;
    min?: GraphQLTypes['IssueCategory_min_fields'] | undefined;
    stddev?: GraphQLTypes['IssueCategory_stddev_fields'] | undefined;
    stddev_pop?: GraphQLTypes['IssueCategory_stddev_pop_fields'] | undefined;
    stddev_samp?: GraphQLTypes['IssueCategory_stddev_samp_fields'] | undefined;
    sum?: GraphQLTypes['IssueCategory_sum_fields'] | undefined;
    var_pop?: GraphQLTypes['IssueCategory_var_pop_fields'] | undefined;
    var_samp?: GraphQLTypes['IssueCategory_var_samp_fields'] | undefined;
    variance?: GraphQLTypes['IssueCategory_variance_fields'] | undefined;
  };
  /** aggregate avg on columns */
  ['IssueCategory_avg_fields']: {
    __typename: 'IssueCategory_avg_fields';
    cursorId?: number | undefined;
  };
  /** Boolean expression to filter rows from the table "IssueCategory". All fields are combined with a logical 'AND'. */
  ['IssueCategory_bool_exp']: {
    _and?: Array<GraphQLTypes['IssueCategory_bool_exp']> | undefined;
    _not?: GraphQLTypes['IssueCategory_bool_exp'] | undefined;
    _or?: Array<GraphQLTypes['IssueCategory_bool_exp']> | undefined;
    createdAt?: GraphQLTypes['timestamptz_comparison_exp'] | undefined;
    createdById?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    cursorId?: GraphQLTypes['bigint_comparison_exp'] | undefined;
    description?: GraphQLTypes['String_comparison_exp'] | undefined;
    id?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    name?: GraphQLTypes['String_comparison_exp'] | undefined;
    status?: GraphQLTypes['Status_enum_comparison_exp'] | undefined;
    tenantId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz_comparison_exp'] | undefined;
    updatedById?: GraphQLTypes['uuid_comparison_exp'] | undefined;
  };
  /** unique or primary key constraints on table "IssueCategory" */
  ['IssueCategory_constraint']: IssueCategory_constraint;
  /** input type for incrementing numeric columns in table "IssueCategory" */
  ['IssueCategory_inc_input']: {
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "IssueCategory" */
  ['IssueCategory_insert_input']: {
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate max on columns */
  ['IssueCategory_max_fields']: {
    __typename: 'IssueCategory_max_fields';
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate min on columns */
  ['IssueCategory_min_fields']: {
    __typename: 'IssueCategory_min_fields';
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** response of any mutation on the table "IssueCategory" */
  ['IssueCategory_mutation_response']: {
    __typename: 'IssueCategory_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['IssueCategory']>;
  };
  /** on_conflict condition type for table "IssueCategory" */
  ['IssueCategory_on_conflict']: {
    constraint: GraphQLTypes['IssueCategory_constraint'];
    update_columns: Array<GraphQLTypes['IssueCategory_update_column']>;
    where?: GraphQLTypes['IssueCategory_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "IssueCategory". */
  ['IssueCategory_order_by']: {
    createdAt?: GraphQLTypes['order_by'] | undefined;
    createdById?: GraphQLTypes['order_by'] | undefined;
    cursorId?: GraphQLTypes['order_by'] | undefined;
    description?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    name?: GraphQLTypes['order_by'] | undefined;
    status?: GraphQLTypes['order_by'] | undefined;
    tenantId?: GraphQLTypes['order_by'] | undefined;
    updatedAt?: GraphQLTypes['order_by'] | undefined;
    updatedById?: GraphQLTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: IssueCategory */
  ['IssueCategory_pk_columns_input']: {
    id: GraphQLTypes['uuid'];
  };
  /** select columns of table "IssueCategory" */
  ['IssueCategory_select_column']: IssueCategory_select_column;
  /** input type for updating data in table "IssueCategory" */
  ['IssueCategory_set_input']: {
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate stddev on columns */
  ['IssueCategory_stddev_fields']: {
    __typename: 'IssueCategory_stddev_fields';
    cursorId?: number | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['IssueCategory_stddev_pop_fields']: {
    __typename: 'IssueCategory_stddev_pop_fields';
    cursorId?: number | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['IssueCategory_stddev_samp_fields']: {
    __typename: 'IssueCategory_stddev_samp_fields';
    cursorId?: number | undefined;
  };
  /** Streaming cursor of the table "IssueCategory" */
  ['IssueCategory_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: GraphQLTypes['IssueCategory_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: GraphQLTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['IssueCategory_stream_cursor_value_input']: {
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate sum on columns */
  ['IssueCategory_sum_fields']: {
    __typename: 'IssueCategory_sum_fields';
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** update columns of table "IssueCategory" */
  ['IssueCategory_update_column']: IssueCategory_update_column;
  ['IssueCategory_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: GraphQLTypes['IssueCategory_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: GraphQLTypes['IssueCategory_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: GraphQLTypes['IssueCategory_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['IssueCategory_var_pop_fields']: {
    __typename: 'IssueCategory_var_pop_fields';
    cursorId?: number | undefined;
  };
  /** aggregate var_samp on columns */
  ['IssueCategory_var_samp_fields']: {
    __typename: 'IssueCategory_var_samp_fields';
    cursorId?: number | undefined;
  };
  /** aggregate variance on columns */
  ['IssueCategory_variance_fields']: {
    __typename: 'IssueCategory_variance_fields';
    cursorId?: number | undefined;
  };
  /** columns and relationships of "Object" */
  ['Object']: {
    __typename: 'Object';
    /** An object relationship */
    application: GraphQLTypes['Application'];
    applicationId: string;
    description: string;
    id: GraphQLTypes['uuid'];
    name: string;
  };
  /** aggregated selection of "Object" */
  ['Object_aggregate']: {
    __typename: 'Object_aggregate';
    aggregate?: GraphQLTypes['Object_aggregate_fields'] | undefined;
    nodes: Array<GraphQLTypes['Object']>;
  };
  /** aggregate fields of "Object" */
  ['Object_aggregate_fields']: {
    __typename: 'Object_aggregate_fields';
    count: number;
    max?: GraphQLTypes['Object_max_fields'] | undefined;
    min?: GraphQLTypes['Object_min_fields'] | undefined;
  };
  /** Boolean expression to filter rows from the table "Object". All fields are combined with a logical 'AND'. */
  ['Object_bool_exp']: {
    _and?: Array<GraphQLTypes['Object_bool_exp']> | undefined;
    _not?: GraphQLTypes['Object_bool_exp'] | undefined;
    _or?: Array<GraphQLTypes['Object_bool_exp']> | undefined;
    application?: GraphQLTypes['Application_bool_exp'] | undefined;
    applicationId?: GraphQLTypes['String_comparison_exp'] | undefined;
    description?: GraphQLTypes['String_comparison_exp'] | undefined;
    id?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    name?: GraphQLTypes['String_comparison_exp'] | undefined;
  };
  /** unique or primary key constraints on table "Object" */
  ['Object_constraint']: Object_constraint;
  /** input type for inserting data into table "Object" */
  ['Object_insert_input']: {
    application?: GraphQLTypes['Application_obj_rel_insert_input'] | undefined;
    applicationId?: string | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
  };
  /** aggregate max on columns */
  ['Object_max_fields']: {
    __typename: 'Object_max_fields';
    applicationId?: string | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
  };
  /** aggregate min on columns */
  ['Object_min_fields']: {
    __typename: 'Object_min_fields';
    applicationId?: string | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
  };
  /** response of any mutation on the table "Object" */
  ['Object_mutation_response']: {
    __typename: 'Object_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['Object']>;
  };
  /** on_conflict condition type for table "Object" */
  ['Object_on_conflict']: {
    constraint: GraphQLTypes['Object_constraint'];
    update_columns: Array<GraphQLTypes['Object_update_column']>;
    where?: GraphQLTypes['Object_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "Object". */
  ['Object_order_by']: {
    application?: GraphQLTypes['Application_order_by'] | undefined;
    applicationId?: GraphQLTypes['order_by'] | undefined;
    description?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    name?: GraphQLTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: Object */
  ['Object_pk_columns_input']: {
    id: GraphQLTypes['uuid'];
  };
  /** select columns of table "Object" */
  ['Object_select_column']: Object_select_column;
  /** input type for updating data in table "Object" */
  ['Object_set_input']: {
    applicationId?: string | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
  };
  /** Streaming cursor of the table "Object" */
  ['Object_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: GraphQLTypes['Object_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: GraphQLTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['Object_stream_cursor_value_input']: {
    applicationId?: string | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
  };
  /** update columns of table "Object" */
  ['Object_update_column']: Object_update_column;
  ['Object_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: GraphQLTypes['Object_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: GraphQLTypes['Object_bool_exp'];
  };
  /** columns and relationships of "Organization" */
  ['Organization']: {
    __typename: 'Organization';
    address: string;
    city: string;
    country: string;
    createdAt: GraphQLTypes['timestamp'];
    domain: string;
    id: string;
    industry: string;
    name: string;
    postalCode: string;
    state: string;
    tenantId: GraphQLTypes['uuid'];
    type: string;
    updatedAt: GraphQLTypes['timestamp'];
    websiteUrl: string;
  };
  /** aggregated selection of "Organization" */
  ['Organization_aggregate']: {
    __typename: 'Organization_aggregate';
    aggregate?: GraphQLTypes['Organization_aggregate_fields'] | undefined;
    nodes: Array<GraphQLTypes['Organization']>;
  };
  /** aggregate fields of "Organization" */
  ['Organization_aggregate_fields']: {
    __typename: 'Organization_aggregate_fields';
    count: number;
    max?: GraphQLTypes['Organization_max_fields'] | undefined;
    min?: GraphQLTypes['Organization_min_fields'] | undefined;
  };
  /** Boolean expression to filter rows from the table "Organization". All fields are combined with a logical 'AND'. */
  ['Organization_bool_exp']: {
    _and?: Array<GraphQLTypes['Organization_bool_exp']> | undefined;
    _not?: GraphQLTypes['Organization_bool_exp'] | undefined;
    _or?: Array<GraphQLTypes['Organization_bool_exp']> | undefined;
    address?: GraphQLTypes['String_comparison_exp'] | undefined;
    city?: GraphQLTypes['String_comparison_exp'] | undefined;
    country?: GraphQLTypes['String_comparison_exp'] | undefined;
    createdAt?: GraphQLTypes['timestamp_comparison_exp'] | undefined;
    domain?: GraphQLTypes['String_comparison_exp'] | undefined;
    id?: GraphQLTypes['String_comparison_exp'] | undefined;
    industry?: GraphQLTypes['String_comparison_exp'] | undefined;
    name?: GraphQLTypes['String_comparison_exp'] | undefined;
    postalCode?: GraphQLTypes['String_comparison_exp'] | undefined;
    state?: GraphQLTypes['String_comparison_exp'] | undefined;
    tenantId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    type?: GraphQLTypes['String_comparison_exp'] | undefined;
    updatedAt?: GraphQLTypes['timestamp_comparison_exp'] | undefined;
    websiteUrl?: GraphQLTypes['String_comparison_exp'] | undefined;
  };
  /** unique or primary key constraints on table "Organization" */
  ['Organization_constraint']: Organization_constraint;
  /** input type for inserting data into table "Organization" */
  ['Organization_insert_input']: {
    address?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    createdAt?: GraphQLTypes['timestamp'] | undefined;
    domain?: string | undefined;
    id?: string | undefined;
    industry?: string | undefined;
    name?: string | undefined;
    postalCode?: string | undefined;
    state?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    type?: string | undefined;
    updatedAt?: GraphQLTypes['timestamp'] | undefined;
    websiteUrl?: string | undefined;
  };
  /** aggregate max on columns */
  ['Organization_max_fields']: {
    __typename: 'Organization_max_fields';
    address?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    createdAt?: GraphQLTypes['timestamp'] | undefined;
    domain?: string | undefined;
    id?: string | undefined;
    industry?: string | undefined;
    name?: string | undefined;
    postalCode?: string | undefined;
    state?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    type?: string | undefined;
    updatedAt?: GraphQLTypes['timestamp'] | undefined;
    websiteUrl?: string | undefined;
  };
  /** aggregate min on columns */
  ['Organization_min_fields']: {
    __typename: 'Organization_min_fields';
    address?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    createdAt?: GraphQLTypes['timestamp'] | undefined;
    domain?: string | undefined;
    id?: string | undefined;
    industry?: string | undefined;
    name?: string | undefined;
    postalCode?: string | undefined;
    state?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    type?: string | undefined;
    updatedAt?: GraphQLTypes['timestamp'] | undefined;
    websiteUrl?: string | undefined;
  };
  /** response of any mutation on the table "Organization" */
  ['Organization_mutation_response']: {
    __typename: 'Organization_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['Organization']>;
  };
  /** on_conflict condition type for table "Organization" */
  ['Organization_on_conflict']: {
    constraint: GraphQLTypes['Organization_constraint'];
    update_columns: Array<GraphQLTypes['Organization_update_column']>;
    where?: GraphQLTypes['Organization_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "Organization". */
  ['Organization_order_by']: {
    address?: GraphQLTypes['order_by'] | undefined;
    city?: GraphQLTypes['order_by'] | undefined;
    country?: GraphQLTypes['order_by'] | undefined;
    createdAt?: GraphQLTypes['order_by'] | undefined;
    domain?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    industry?: GraphQLTypes['order_by'] | undefined;
    name?: GraphQLTypes['order_by'] | undefined;
    postalCode?: GraphQLTypes['order_by'] | undefined;
    state?: GraphQLTypes['order_by'] | undefined;
    tenantId?: GraphQLTypes['order_by'] | undefined;
    type?: GraphQLTypes['order_by'] | undefined;
    updatedAt?: GraphQLTypes['order_by'] | undefined;
    websiteUrl?: GraphQLTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: Organization */
  ['Organization_pk_columns_input']: {
    id: string;
  };
  /** select columns of table "Organization" */
  ['Organization_select_column']: Organization_select_column;
  /** input type for updating data in table "Organization" */
  ['Organization_set_input']: {
    address?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    createdAt?: GraphQLTypes['timestamp'] | undefined;
    domain?: string | undefined;
    id?: string | undefined;
    industry?: string | undefined;
    name?: string | undefined;
    postalCode?: string | undefined;
    state?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    type?: string | undefined;
    updatedAt?: GraphQLTypes['timestamp'] | undefined;
    websiteUrl?: string | undefined;
  };
  /** Streaming cursor of the table "Organization" */
  ['Organization_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: GraphQLTypes['Organization_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: GraphQLTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['Organization_stream_cursor_value_input']: {
    address?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    createdAt?: GraphQLTypes['timestamp'] | undefined;
    domain?: string | undefined;
    id?: string | undefined;
    industry?: string | undefined;
    name?: string | undefined;
    postalCode?: string | undefined;
    state?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    type?: string | undefined;
    updatedAt?: GraphQLTypes['timestamp'] | undefined;
    websiteUrl?: string | undefined;
  };
  /** update columns of table "Organization" */
  ['Organization_update_column']: Organization_update_column;
  ['Organization_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: GraphQLTypes['Organization_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: GraphQLTypes['Organization_bool_exp'];
  };
  /** columns and relationships of "Package" */
  ['Package']: {
    __typename: 'Package';
    /** An array relationship */
    applications: Array<GraphQLTypes['PackageApplication']>;
    /** An aggregate relationship */
    applications_aggregate: GraphQLTypes['PackageApplication_aggregate'];
    cursorId: GraphQLTypes['bigint'];
    description: string;
    id: GraphQLTypes['uuid'];
    name: string;
    objects?: string | undefined;
    price: string;
    roles?: string | undefined;
    /** An array relationship */
    tenants: Array<GraphQLTypes['TenantPackage']>;
    /** An aggregate relationship */
    tenants_aggregate: GraphQLTypes['TenantPackage_aggregate'];
  };
  /** columns and relationships of "PackageApplication" */
  ['PackageApplication']: {
    __typename: 'PackageApplication';
    /** An object relationship */
    application: GraphQLTypes['Application'];
    applicationId: string;
    id: GraphQLTypes['uuid'];
    /** An object relationship */
    package?: GraphQLTypes['Package'] | undefined;
    packageId: GraphQLTypes['uuid'];
  };
  /** aggregated selection of "PackageApplication" */
  ['PackageApplication_aggregate']: {
    __typename: 'PackageApplication_aggregate';
    aggregate?: GraphQLTypes['PackageApplication_aggregate_fields'] | undefined;
    nodes: Array<GraphQLTypes['PackageApplication']>;
  };
  ['PackageApplication_aggregate_bool_exp']: {
    count?:
      | GraphQLTypes['PackageApplication_aggregate_bool_exp_count']
      | undefined;
  };
  ['PackageApplication_aggregate_bool_exp_count']: {
    arguments?:
      | Array<GraphQLTypes['PackageApplication_select_column']>
      | undefined;
    distinct?: boolean | undefined;
    filter?: GraphQLTypes['PackageApplication_bool_exp'] | undefined;
    predicate: GraphQLTypes['Int_comparison_exp'];
  };
  /** aggregate fields of "PackageApplication" */
  ['PackageApplication_aggregate_fields']: {
    __typename: 'PackageApplication_aggregate_fields';
    count: number;
    max?: GraphQLTypes['PackageApplication_max_fields'] | undefined;
    min?: GraphQLTypes['PackageApplication_min_fields'] | undefined;
  };
  /** order by aggregate values of table "PackageApplication" */
  ['PackageApplication_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'] | undefined;
    max?: GraphQLTypes['PackageApplication_max_order_by'] | undefined;
    min?: GraphQLTypes['PackageApplication_min_order_by'] | undefined;
  };
  /** input type for inserting array relation for remote table "PackageApplication" */
  ['PackageApplication_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['PackageApplication_insert_input']>;
    /** upsert condition */
    on_conflict?: GraphQLTypes['PackageApplication_on_conflict'] | undefined;
  };
  /** Boolean expression to filter rows from the table "PackageApplication". All fields are combined with a logical 'AND'. */
  ['PackageApplication_bool_exp']: {
    _and?: Array<GraphQLTypes['PackageApplication_bool_exp']> | undefined;
    _not?: GraphQLTypes['PackageApplication_bool_exp'] | undefined;
    _or?: Array<GraphQLTypes['PackageApplication_bool_exp']> | undefined;
    application?: GraphQLTypes['Application_bool_exp'] | undefined;
    applicationId?: GraphQLTypes['String_comparison_exp'] | undefined;
    id?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    package?: GraphQLTypes['Package_bool_exp'] | undefined;
    packageId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
  };
  /** unique or primary key constraints on table "PackageApplication" */
  ['PackageApplication_constraint']: PackageApplication_constraint;
  /** input type for inserting data into table "PackageApplication" */
  ['PackageApplication_insert_input']: {
    application?: GraphQLTypes['Application_obj_rel_insert_input'] | undefined;
    applicationId?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    package?: GraphQLTypes['Package_obj_rel_insert_input'] | undefined;
    packageId?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate max on columns */
  ['PackageApplication_max_fields']: {
    __typename: 'PackageApplication_max_fields';
    applicationId?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    packageId?: GraphQLTypes['uuid'] | undefined;
  };
  /** order by max() on columns of table "PackageApplication" */
  ['PackageApplication_max_order_by']: {
    applicationId?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    packageId?: GraphQLTypes['order_by'] | undefined;
  };
  /** aggregate min on columns */
  ['PackageApplication_min_fields']: {
    __typename: 'PackageApplication_min_fields';
    applicationId?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    packageId?: GraphQLTypes['uuid'] | undefined;
  };
  /** order by min() on columns of table "PackageApplication" */
  ['PackageApplication_min_order_by']: {
    applicationId?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    packageId?: GraphQLTypes['order_by'] | undefined;
  };
  /** response of any mutation on the table "PackageApplication" */
  ['PackageApplication_mutation_response']: {
    __typename: 'PackageApplication_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['PackageApplication']>;
  };
  /** on_conflict condition type for table "PackageApplication" */
  ['PackageApplication_on_conflict']: {
    constraint: GraphQLTypes['PackageApplication_constraint'];
    update_columns: Array<GraphQLTypes['PackageApplication_update_column']>;
    where?: GraphQLTypes['PackageApplication_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "PackageApplication". */
  ['PackageApplication_order_by']: {
    application?: GraphQLTypes['Application_order_by'] | undefined;
    applicationId?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    package?: GraphQLTypes['Package_order_by'] | undefined;
    packageId?: GraphQLTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: PackageApplication */
  ['PackageApplication_pk_columns_input']: {
    id: GraphQLTypes['uuid'];
  };
  /** select columns of table "PackageApplication" */
  ['PackageApplication_select_column']: PackageApplication_select_column;
  /** input type for updating data in table "PackageApplication" */
  ['PackageApplication_set_input']: {
    applicationId?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    packageId?: GraphQLTypes['uuid'] | undefined;
  };
  /** Streaming cursor of the table "PackageApplication" */
  ['PackageApplication_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: GraphQLTypes['PackageApplication_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: GraphQLTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['PackageApplication_stream_cursor_value_input']: {
    applicationId?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    packageId?: GraphQLTypes['uuid'] | undefined;
  };
  /** update columns of table "PackageApplication" */
  ['PackageApplication_update_column']: PackageApplication_update_column;
  ['PackageApplication_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: GraphQLTypes['PackageApplication_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: GraphQLTypes['PackageApplication_bool_exp'];
  };
  /** aggregated selection of "Package" */
  ['Package_aggregate']: {
    __typename: 'Package_aggregate';
    aggregate?: GraphQLTypes['Package_aggregate_fields'] | undefined;
    nodes: Array<GraphQLTypes['Package']>;
  };
  /** aggregate fields of "Package" */
  ['Package_aggregate_fields']: {
    __typename: 'Package_aggregate_fields';
    avg?: GraphQLTypes['Package_avg_fields'] | undefined;
    count: number;
    max?: GraphQLTypes['Package_max_fields'] | undefined;
    min?: GraphQLTypes['Package_min_fields'] | undefined;
    stddev?: GraphQLTypes['Package_stddev_fields'] | undefined;
    stddev_pop?: GraphQLTypes['Package_stddev_pop_fields'] | undefined;
    stddev_samp?: GraphQLTypes['Package_stddev_samp_fields'] | undefined;
    sum?: GraphQLTypes['Package_sum_fields'] | undefined;
    var_pop?: GraphQLTypes['Package_var_pop_fields'] | undefined;
    var_samp?: GraphQLTypes['Package_var_samp_fields'] | undefined;
    variance?: GraphQLTypes['Package_variance_fields'] | undefined;
  };
  /** aggregate avg on columns */
  ['Package_avg_fields']: {
    __typename: 'Package_avg_fields';
    cursorId?: number | undefined;
  };
  /** Boolean expression to filter rows from the table "Package". All fields are combined with a logical 'AND'. */
  ['Package_bool_exp']: {
    _and?: Array<GraphQLTypes['Package_bool_exp']> | undefined;
    _not?: GraphQLTypes['Package_bool_exp'] | undefined;
    _or?: Array<GraphQLTypes['Package_bool_exp']> | undefined;
    applications?: GraphQLTypes['PackageApplication_bool_exp'] | undefined;
    applications_aggregate?:
      | GraphQLTypes['PackageApplication_aggregate_bool_exp']
      | undefined;
    cursorId?: GraphQLTypes['bigint_comparison_exp'] | undefined;
    description?: GraphQLTypes['String_comparison_exp'] | undefined;
    id?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    name?: GraphQLTypes['String_comparison_exp'] | undefined;
    objects?: GraphQLTypes['String_comparison_exp'] | undefined;
    price?: GraphQLTypes['String_comparison_exp'] | undefined;
    roles?: GraphQLTypes['String_comparison_exp'] | undefined;
    tenants?: GraphQLTypes['TenantPackage_bool_exp'] | undefined;
    tenants_aggregate?:
      | GraphQLTypes['TenantPackage_aggregate_bool_exp']
      | undefined;
  };
  /** unique or primary key constraints on table "Package" */
  ['Package_constraint']: Package_constraint;
  /** input type for incrementing numeric columns in table "Package" */
  ['Package_inc_input']: {
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "Package" */
  ['Package_insert_input']: {
    applications?:
      | GraphQLTypes['PackageApplication_arr_rel_insert_input']
      | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    objects?: string | undefined;
    price?: string | undefined;
    roles?: string | undefined;
    tenants?: GraphQLTypes['TenantPackage_arr_rel_insert_input'] | undefined;
  };
  /** aggregate max on columns */
  ['Package_max_fields']: {
    __typename: 'Package_max_fields';
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    objects?: string | undefined;
    price?: string | undefined;
    roles?: string | undefined;
  };
  /** aggregate min on columns */
  ['Package_min_fields']: {
    __typename: 'Package_min_fields';
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    objects?: string | undefined;
    price?: string | undefined;
    roles?: string | undefined;
  };
  /** response of any mutation on the table "Package" */
  ['Package_mutation_response']: {
    __typename: 'Package_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['Package']>;
  };
  /** input type for inserting object relation for remote table "Package" */
  ['Package_obj_rel_insert_input']: {
    data: GraphQLTypes['Package_insert_input'];
    /** upsert condition */
    on_conflict?: GraphQLTypes['Package_on_conflict'] | undefined;
  };
  /** on_conflict condition type for table "Package" */
  ['Package_on_conflict']: {
    constraint: GraphQLTypes['Package_constraint'];
    update_columns: Array<GraphQLTypes['Package_update_column']>;
    where?: GraphQLTypes['Package_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "Package". */
  ['Package_order_by']: {
    applications_aggregate?:
      | GraphQLTypes['PackageApplication_aggregate_order_by']
      | undefined;
    cursorId?: GraphQLTypes['order_by'] | undefined;
    description?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    name?: GraphQLTypes['order_by'] | undefined;
    objects?: GraphQLTypes['order_by'] | undefined;
    price?: GraphQLTypes['order_by'] | undefined;
    roles?: GraphQLTypes['order_by'] | undefined;
    tenants_aggregate?:
      | GraphQLTypes['TenantPackage_aggregate_order_by']
      | undefined;
  };
  /** primary key columns input for table: Package */
  ['Package_pk_columns_input']: {
    id: GraphQLTypes['uuid'];
  };
  /** select columns of table "Package" */
  ['Package_select_column']: Package_select_column;
  /** input type for updating data in table "Package" */
  ['Package_set_input']: {
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    objects?: string | undefined;
    price?: string | undefined;
    roles?: string | undefined;
  };
  /** aggregate stddev on columns */
  ['Package_stddev_fields']: {
    __typename: 'Package_stddev_fields';
    cursorId?: number | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['Package_stddev_pop_fields']: {
    __typename: 'Package_stddev_pop_fields';
    cursorId?: number | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['Package_stddev_samp_fields']: {
    __typename: 'Package_stddev_samp_fields';
    cursorId?: number | undefined;
  };
  /** Streaming cursor of the table "Package" */
  ['Package_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: GraphQLTypes['Package_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: GraphQLTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['Package_stream_cursor_value_input']: {
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    objects?: string | undefined;
    price?: string | undefined;
    roles?: string | undefined;
  };
  /** aggregate sum on columns */
  ['Package_sum_fields']: {
    __typename: 'Package_sum_fields';
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** update columns of table "Package" */
  ['Package_update_column']: Package_update_column;
  ['Package_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: GraphQLTypes['Package_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: GraphQLTypes['Package_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: GraphQLTypes['Package_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['Package_var_pop_fields']: {
    __typename: 'Package_var_pop_fields';
    cursorId?: number | undefined;
  };
  /** aggregate var_samp on columns */
  ['Package_var_samp_fields']: {
    __typename: 'Package_var_samp_fields';
    cursorId?: number | undefined;
  };
  /** aggregate variance on columns */
  ['Package_variance_fields']: {
    __typename: 'Package_variance_fields';
    cursorId?: number | undefined;
  };
  /** columns and relationships of "Product" */
  ['Product']: {
    __typename: 'Product';
    code: string;
    createdAt: GraphQLTypes['timestamp'];
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId: GraphQLTypes['bigint'];
    description: string;
    id: GraphQLTypes['uuid'];
    metric?: string | undefined;
    name: string;
    /** An array relationship */
    productCategories: Array<GraphQLTypes['ProductCategory']>;
    /** An aggregate relationship */
    productCategories_aggregate: GraphQLTypes['ProductCategory_aggregate'];
    /** An array relationship */
    productVersions: Array<GraphQLTypes['ProductVersion']>;
    /** An aggregate relationship */
    productVersions_aggregate: GraphQLTypes['ProductVersion_aggregate'];
    status: GraphQLTypes['Status_enum'];
    tenantId: GraphQLTypes['uuid'];
    updatedAt: GraphQLTypes['timestamptz'];
    updatedById?: GraphQLTypes['uuid'] | undefined;
    version: string;
  };
  /** columns and relationships of "ProductCategory" */
  ['ProductCategory']: {
    __typename: 'ProductCategory';
    createdAt: GraphQLTypes['timestamptz'];
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId: GraphQLTypes['bigint'];
    id: GraphQLTypes['uuid'];
    name: string;
    /** An object relationship */
    product?: GraphQLTypes['Product'] | undefined;
    productId: GraphQLTypes['uuid'];
    status: GraphQLTypes['Status_enum'];
    tenantId: GraphQLTypes['uuid'];
    updatedAt: GraphQLTypes['timestamptz'];
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregated selection of "ProductCategory" */
  ['ProductCategory_aggregate']: {
    __typename: 'ProductCategory_aggregate';
    aggregate?: GraphQLTypes['ProductCategory_aggregate_fields'] | undefined;
    nodes: Array<GraphQLTypes['ProductCategory']>;
  };
  ['ProductCategory_aggregate_bool_exp']: {
    count?:
      | GraphQLTypes['ProductCategory_aggregate_bool_exp_count']
      | undefined;
  };
  ['ProductCategory_aggregate_bool_exp_count']: {
    arguments?:
      | Array<GraphQLTypes['ProductCategory_select_column']>
      | undefined;
    distinct?: boolean | undefined;
    filter?: GraphQLTypes['ProductCategory_bool_exp'] | undefined;
    predicate: GraphQLTypes['Int_comparison_exp'];
  };
  /** aggregate fields of "ProductCategory" */
  ['ProductCategory_aggregate_fields']: {
    __typename: 'ProductCategory_aggregate_fields';
    avg?: GraphQLTypes['ProductCategory_avg_fields'] | undefined;
    count: number;
    max?: GraphQLTypes['ProductCategory_max_fields'] | undefined;
    min?: GraphQLTypes['ProductCategory_min_fields'] | undefined;
    stddev?: GraphQLTypes['ProductCategory_stddev_fields'] | undefined;
    stddev_pop?: GraphQLTypes['ProductCategory_stddev_pop_fields'] | undefined;
    stddev_samp?:
      | GraphQLTypes['ProductCategory_stddev_samp_fields']
      | undefined;
    sum?: GraphQLTypes['ProductCategory_sum_fields'] | undefined;
    var_pop?: GraphQLTypes['ProductCategory_var_pop_fields'] | undefined;
    var_samp?: GraphQLTypes['ProductCategory_var_samp_fields'] | undefined;
    variance?: GraphQLTypes['ProductCategory_variance_fields'] | undefined;
  };
  /** order by aggregate values of table "ProductCategory" */
  ['ProductCategory_aggregate_order_by']: {
    avg?: GraphQLTypes['ProductCategory_avg_order_by'] | undefined;
    count?: GraphQLTypes['order_by'] | undefined;
    max?: GraphQLTypes['ProductCategory_max_order_by'] | undefined;
    min?: GraphQLTypes['ProductCategory_min_order_by'] | undefined;
    stddev?: GraphQLTypes['ProductCategory_stddev_order_by'] | undefined;
    stddev_pop?:
      | GraphQLTypes['ProductCategory_stddev_pop_order_by']
      | undefined;
    stddev_samp?:
      | GraphQLTypes['ProductCategory_stddev_samp_order_by']
      | undefined;
    sum?: GraphQLTypes['ProductCategory_sum_order_by'] | undefined;
    var_pop?: GraphQLTypes['ProductCategory_var_pop_order_by'] | undefined;
    var_samp?: GraphQLTypes['ProductCategory_var_samp_order_by'] | undefined;
    variance?: GraphQLTypes['ProductCategory_variance_order_by'] | undefined;
  };
  /** input type for inserting array relation for remote table "ProductCategory" */
  ['ProductCategory_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['ProductCategory_insert_input']>;
    /** upsert condition */
    on_conflict?: GraphQLTypes['ProductCategory_on_conflict'] | undefined;
  };
  /** aggregate avg on columns */
  ['ProductCategory_avg_fields']: {
    __typename: 'ProductCategory_avg_fields';
    cursorId?: number | undefined;
  };
  /** order by avg() on columns of table "ProductCategory" */
  ['ProductCategory_avg_order_by']: {
    cursorId?: GraphQLTypes['order_by'] | undefined;
  };
  /** Boolean expression to filter rows from the table "ProductCategory". All fields are combined with a logical 'AND'. */
  ['ProductCategory_bool_exp']: {
    _and?: Array<GraphQLTypes['ProductCategory_bool_exp']> | undefined;
    _not?: GraphQLTypes['ProductCategory_bool_exp'] | undefined;
    _or?: Array<GraphQLTypes['ProductCategory_bool_exp']> | undefined;
    createdAt?: GraphQLTypes['timestamptz_comparison_exp'] | undefined;
    createdById?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    cursorId?: GraphQLTypes['bigint_comparison_exp'] | undefined;
    id?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    name?: GraphQLTypes['String_comparison_exp'] | undefined;
    product?: GraphQLTypes['Product_bool_exp'] | undefined;
    productId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    status?: GraphQLTypes['Status_enum_comparison_exp'] | undefined;
    tenantId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz_comparison_exp'] | undefined;
    updatedById?: GraphQLTypes['uuid_comparison_exp'] | undefined;
  };
  /** unique or primary key constraints on table "ProductCategory" */
  ['ProductCategory_constraint']: ProductCategory_constraint;
  /** input type for incrementing numeric columns in table "ProductCategory" */
  ['ProductCategory_inc_input']: {
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "ProductCategory" */
  ['ProductCategory_insert_input']: {
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    product?: GraphQLTypes['Product_obj_rel_insert_input'] | undefined;
    productId?: GraphQLTypes['uuid'] | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate max on columns */
  ['ProductCategory_max_fields']: {
    __typename: 'ProductCategory_max_fields';
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    productId?: GraphQLTypes['uuid'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** order by max() on columns of table "ProductCategory" */
  ['ProductCategory_max_order_by']: {
    createdAt?: GraphQLTypes['order_by'] | undefined;
    createdById?: GraphQLTypes['order_by'] | undefined;
    cursorId?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    name?: GraphQLTypes['order_by'] | undefined;
    productId?: GraphQLTypes['order_by'] | undefined;
    tenantId?: GraphQLTypes['order_by'] | undefined;
    updatedAt?: GraphQLTypes['order_by'] | undefined;
    updatedById?: GraphQLTypes['order_by'] | undefined;
  };
  /** aggregate min on columns */
  ['ProductCategory_min_fields']: {
    __typename: 'ProductCategory_min_fields';
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    productId?: GraphQLTypes['uuid'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** order by min() on columns of table "ProductCategory" */
  ['ProductCategory_min_order_by']: {
    createdAt?: GraphQLTypes['order_by'] | undefined;
    createdById?: GraphQLTypes['order_by'] | undefined;
    cursorId?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    name?: GraphQLTypes['order_by'] | undefined;
    productId?: GraphQLTypes['order_by'] | undefined;
    tenantId?: GraphQLTypes['order_by'] | undefined;
    updatedAt?: GraphQLTypes['order_by'] | undefined;
    updatedById?: GraphQLTypes['order_by'] | undefined;
  };
  /** response of any mutation on the table "ProductCategory" */
  ['ProductCategory_mutation_response']: {
    __typename: 'ProductCategory_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['ProductCategory']>;
  };
  /** on_conflict condition type for table "ProductCategory" */
  ['ProductCategory_on_conflict']: {
    constraint: GraphQLTypes['ProductCategory_constraint'];
    update_columns: Array<GraphQLTypes['ProductCategory_update_column']>;
    where?: GraphQLTypes['ProductCategory_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "ProductCategory". */
  ['ProductCategory_order_by']: {
    createdAt?: GraphQLTypes['order_by'] | undefined;
    createdById?: GraphQLTypes['order_by'] | undefined;
    cursorId?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    name?: GraphQLTypes['order_by'] | undefined;
    product?: GraphQLTypes['Product_order_by'] | undefined;
    productId?: GraphQLTypes['order_by'] | undefined;
    status?: GraphQLTypes['order_by'] | undefined;
    tenantId?: GraphQLTypes['order_by'] | undefined;
    updatedAt?: GraphQLTypes['order_by'] | undefined;
    updatedById?: GraphQLTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: ProductCategory */
  ['ProductCategory_pk_columns_input']: {
    id: GraphQLTypes['uuid'];
  };
  /** select columns of table "ProductCategory" */
  ['ProductCategory_select_column']: ProductCategory_select_column;
  /** input type for updating data in table "ProductCategory" */
  ['ProductCategory_set_input']: {
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    productId?: GraphQLTypes['uuid'] | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate stddev on columns */
  ['ProductCategory_stddev_fields']: {
    __typename: 'ProductCategory_stddev_fields';
    cursorId?: number | undefined;
  };
  /** order by stddev() on columns of table "ProductCategory" */
  ['ProductCategory_stddev_order_by']: {
    cursorId?: GraphQLTypes['order_by'] | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['ProductCategory_stddev_pop_fields']: {
    __typename: 'ProductCategory_stddev_pop_fields';
    cursorId?: number | undefined;
  };
  /** order by stddev_pop() on columns of table "ProductCategory" */
  ['ProductCategory_stddev_pop_order_by']: {
    cursorId?: GraphQLTypes['order_by'] | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['ProductCategory_stddev_samp_fields']: {
    __typename: 'ProductCategory_stddev_samp_fields';
    cursorId?: number | undefined;
  };
  /** order by stddev_samp() on columns of table "ProductCategory" */
  ['ProductCategory_stddev_samp_order_by']: {
    cursorId?: GraphQLTypes['order_by'] | undefined;
  };
  /** Streaming cursor of the table "ProductCategory" */
  ['ProductCategory_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: GraphQLTypes['ProductCategory_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: GraphQLTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['ProductCategory_stream_cursor_value_input']: {
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    productId?: GraphQLTypes['uuid'] | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate sum on columns */
  ['ProductCategory_sum_fields']: {
    __typename: 'ProductCategory_sum_fields';
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** order by sum() on columns of table "ProductCategory" */
  ['ProductCategory_sum_order_by']: {
    cursorId?: GraphQLTypes['order_by'] | undefined;
  };
  /** update columns of table "ProductCategory" */
  ['ProductCategory_update_column']: ProductCategory_update_column;
  ['ProductCategory_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: GraphQLTypes['ProductCategory_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: GraphQLTypes['ProductCategory_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: GraphQLTypes['ProductCategory_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['ProductCategory_var_pop_fields']: {
    __typename: 'ProductCategory_var_pop_fields';
    cursorId?: number | undefined;
  };
  /** order by var_pop() on columns of table "ProductCategory" */
  ['ProductCategory_var_pop_order_by']: {
    cursorId?: GraphQLTypes['order_by'] | undefined;
  };
  /** aggregate var_samp on columns */
  ['ProductCategory_var_samp_fields']: {
    __typename: 'ProductCategory_var_samp_fields';
    cursorId?: number | undefined;
  };
  /** order by var_samp() on columns of table "ProductCategory" */
  ['ProductCategory_var_samp_order_by']: {
    cursorId?: GraphQLTypes['order_by'] | undefined;
  };
  /** aggregate variance on columns */
  ['ProductCategory_variance_fields']: {
    __typename: 'ProductCategory_variance_fields';
    cursorId?: number | undefined;
  };
  /** order by variance() on columns of table "ProductCategory" */
  ['ProductCategory_variance_order_by']: {
    cursorId?: GraphQLTypes['order_by'] | undefined;
  };
  /** columns and relationships of "ProductVersion" */
  ['ProductVersion']: {
    __typename: 'ProductVersion';
    createdAt: GraphQLTypes['timestamptz'];
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId: GraphQLTypes['bigint'];
    id: GraphQLTypes['uuid'];
    name: string;
    /** An object relationship */
    product?: GraphQLTypes['Product'] | undefined;
    productId: GraphQLTypes['uuid'];
    status: GraphQLTypes['Status_enum'];
    tenantId: GraphQLTypes['uuid'];
    updatedAt: GraphQLTypes['timestamptz'];
    updatedById?: GraphQLTypes['uuid'] | undefined;
    version: string;
  };
  /** aggregated selection of "ProductVersion" */
  ['ProductVersion_aggregate']: {
    __typename: 'ProductVersion_aggregate';
    aggregate?: GraphQLTypes['ProductVersion_aggregate_fields'] | undefined;
    nodes: Array<GraphQLTypes['ProductVersion']>;
  };
  ['ProductVersion_aggregate_bool_exp']: {
    count?: GraphQLTypes['ProductVersion_aggregate_bool_exp_count'] | undefined;
  };
  ['ProductVersion_aggregate_bool_exp_count']: {
    arguments?: Array<GraphQLTypes['ProductVersion_select_column']> | undefined;
    distinct?: boolean | undefined;
    filter?: GraphQLTypes['ProductVersion_bool_exp'] | undefined;
    predicate: GraphQLTypes['Int_comparison_exp'];
  };
  /** aggregate fields of "ProductVersion" */
  ['ProductVersion_aggregate_fields']: {
    __typename: 'ProductVersion_aggregate_fields';
    avg?: GraphQLTypes['ProductVersion_avg_fields'] | undefined;
    count: number;
    max?: GraphQLTypes['ProductVersion_max_fields'] | undefined;
    min?: GraphQLTypes['ProductVersion_min_fields'] | undefined;
    stddev?: GraphQLTypes['ProductVersion_stddev_fields'] | undefined;
    stddev_pop?: GraphQLTypes['ProductVersion_stddev_pop_fields'] | undefined;
    stddev_samp?: GraphQLTypes['ProductVersion_stddev_samp_fields'] | undefined;
    sum?: GraphQLTypes['ProductVersion_sum_fields'] | undefined;
    var_pop?: GraphQLTypes['ProductVersion_var_pop_fields'] | undefined;
    var_samp?: GraphQLTypes['ProductVersion_var_samp_fields'] | undefined;
    variance?: GraphQLTypes['ProductVersion_variance_fields'] | undefined;
  };
  /** order by aggregate values of table "ProductVersion" */
  ['ProductVersion_aggregate_order_by']: {
    avg?: GraphQLTypes['ProductVersion_avg_order_by'] | undefined;
    count?: GraphQLTypes['order_by'] | undefined;
    max?: GraphQLTypes['ProductVersion_max_order_by'] | undefined;
    min?: GraphQLTypes['ProductVersion_min_order_by'] | undefined;
    stddev?: GraphQLTypes['ProductVersion_stddev_order_by'] | undefined;
    stddev_pop?: GraphQLTypes['ProductVersion_stddev_pop_order_by'] | undefined;
    stddev_samp?:
      | GraphQLTypes['ProductVersion_stddev_samp_order_by']
      | undefined;
    sum?: GraphQLTypes['ProductVersion_sum_order_by'] | undefined;
    var_pop?: GraphQLTypes['ProductVersion_var_pop_order_by'] | undefined;
    var_samp?: GraphQLTypes['ProductVersion_var_samp_order_by'] | undefined;
    variance?: GraphQLTypes['ProductVersion_variance_order_by'] | undefined;
  };
  /** input type for inserting array relation for remote table "ProductVersion" */
  ['ProductVersion_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['ProductVersion_insert_input']>;
    /** upsert condition */
    on_conflict?: GraphQLTypes['ProductVersion_on_conflict'] | undefined;
  };
  /** aggregate avg on columns */
  ['ProductVersion_avg_fields']: {
    __typename: 'ProductVersion_avg_fields';
    cursorId?: number | undefined;
  };
  /** order by avg() on columns of table "ProductVersion" */
  ['ProductVersion_avg_order_by']: {
    cursorId?: GraphQLTypes['order_by'] | undefined;
  };
  /** Boolean expression to filter rows from the table "ProductVersion". All fields are combined with a logical 'AND'. */
  ['ProductVersion_bool_exp']: {
    _and?: Array<GraphQLTypes['ProductVersion_bool_exp']> | undefined;
    _not?: GraphQLTypes['ProductVersion_bool_exp'] | undefined;
    _or?: Array<GraphQLTypes['ProductVersion_bool_exp']> | undefined;
    createdAt?: GraphQLTypes['timestamptz_comparison_exp'] | undefined;
    createdById?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    cursorId?: GraphQLTypes['bigint_comparison_exp'] | undefined;
    id?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    name?: GraphQLTypes['String_comparison_exp'] | undefined;
    product?: GraphQLTypes['Product_bool_exp'] | undefined;
    productId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    status?: GraphQLTypes['Status_enum_comparison_exp'] | undefined;
    tenantId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz_comparison_exp'] | undefined;
    updatedById?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    version?: GraphQLTypes['String_comparison_exp'] | undefined;
  };
  /** unique or primary key constraints on table "ProductVersion" */
  ['ProductVersion_constraint']: ProductVersion_constraint;
  /** input type for incrementing numeric columns in table "ProductVersion" */
  ['ProductVersion_inc_input']: {
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "ProductVersion" */
  ['ProductVersion_insert_input']: {
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    product?: GraphQLTypes['Product_obj_rel_insert_input'] | undefined;
    productId?: GraphQLTypes['uuid'] | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
    version?: string | undefined;
  };
  /** aggregate max on columns */
  ['ProductVersion_max_fields']: {
    __typename: 'ProductVersion_max_fields';
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    productId?: GraphQLTypes['uuid'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
    version?: string | undefined;
  };
  /** order by max() on columns of table "ProductVersion" */
  ['ProductVersion_max_order_by']: {
    createdAt?: GraphQLTypes['order_by'] | undefined;
    createdById?: GraphQLTypes['order_by'] | undefined;
    cursorId?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    name?: GraphQLTypes['order_by'] | undefined;
    productId?: GraphQLTypes['order_by'] | undefined;
    tenantId?: GraphQLTypes['order_by'] | undefined;
    updatedAt?: GraphQLTypes['order_by'] | undefined;
    updatedById?: GraphQLTypes['order_by'] | undefined;
    version?: GraphQLTypes['order_by'] | undefined;
  };
  /** aggregate min on columns */
  ['ProductVersion_min_fields']: {
    __typename: 'ProductVersion_min_fields';
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    productId?: GraphQLTypes['uuid'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
    version?: string | undefined;
  };
  /** order by min() on columns of table "ProductVersion" */
  ['ProductVersion_min_order_by']: {
    createdAt?: GraphQLTypes['order_by'] | undefined;
    createdById?: GraphQLTypes['order_by'] | undefined;
    cursorId?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    name?: GraphQLTypes['order_by'] | undefined;
    productId?: GraphQLTypes['order_by'] | undefined;
    tenantId?: GraphQLTypes['order_by'] | undefined;
    updatedAt?: GraphQLTypes['order_by'] | undefined;
    updatedById?: GraphQLTypes['order_by'] | undefined;
    version?: GraphQLTypes['order_by'] | undefined;
  };
  /** response of any mutation on the table "ProductVersion" */
  ['ProductVersion_mutation_response']: {
    __typename: 'ProductVersion_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['ProductVersion']>;
  };
  /** on_conflict condition type for table "ProductVersion" */
  ['ProductVersion_on_conflict']: {
    constraint: GraphQLTypes['ProductVersion_constraint'];
    update_columns: Array<GraphQLTypes['ProductVersion_update_column']>;
    where?: GraphQLTypes['ProductVersion_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "ProductVersion". */
  ['ProductVersion_order_by']: {
    createdAt?: GraphQLTypes['order_by'] | undefined;
    createdById?: GraphQLTypes['order_by'] | undefined;
    cursorId?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    name?: GraphQLTypes['order_by'] | undefined;
    product?: GraphQLTypes['Product_order_by'] | undefined;
    productId?: GraphQLTypes['order_by'] | undefined;
    status?: GraphQLTypes['order_by'] | undefined;
    tenantId?: GraphQLTypes['order_by'] | undefined;
    updatedAt?: GraphQLTypes['order_by'] | undefined;
    updatedById?: GraphQLTypes['order_by'] | undefined;
    version?: GraphQLTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: ProductVersion */
  ['ProductVersion_pk_columns_input']: {
    id: GraphQLTypes['uuid'];
  };
  /** select columns of table "ProductVersion" */
  ['ProductVersion_select_column']: ProductVersion_select_column;
  /** input type for updating data in table "ProductVersion" */
  ['ProductVersion_set_input']: {
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    productId?: GraphQLTypes['uuid'] | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
    version?: string | undefined;
  };
  /** aggregate stddev on columns */
  ['ProductVersion_stddev_fields']: {
    __typename: 'ProductVersion_stddev_fields';
    cursorId?: number | undefined;
  };
  /** order by stddev() on columns of table "ProductVersion" */
  ['ProductVersion_stddev_order_by']: {
    cursorId?: GraphQLTypes['order_by'] | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['ProductVersion_stddev_pop_fields']: {
    __typename: 'ProductVersion_stddev_pop_fields';
    cursorId?: number | undefined;
  };
  /** order by stddev_pop() on columns of table "ProductVersion" */
  ['ProductVersion_stddev_pop_order_by']: {
    cursorId?: GraphQLTypes['order_by'] | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['ProductVersion_stddev_samp_fields']: {
    __typename: 'ProductVersion_stddev_samp_fields';
    cursorId?: number | undefined;
  };
  /** order by stddev_samp() on columns of table "ProductVersion" */
  ['ProductVersion_stddev_samp_order_by']: {
    cursorId?: GraphQLTypes['order_by'] | undefined;
  };
  /** Streaming cursor of the table "ProductVersion" */
  ['ProductVersion_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: GraphQLTypes['ProductVersion_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: GraphQLTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['ProductVersion_stream_cursor_value_input']: {
    createdAt?: GraphQLTypes['timestamptz'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    productId?: GraphQLTypes['uuid'] | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
    version?: string | undefined;
  };
  /** aggregate sum on columns */
  ['ProductVersion_sum_fields']: {
    __typename: 'ProductVersion_sum_fields';
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** order by sum() on columns of table "ProductVersion" */
  ['ProductVersion_sum_order_by']: {
    cursorId?: GraphQLTypes['order_by'] | undefined;
  };
  /** update columns of table "ProductVersion" */
  ['ProductVersion_update_column']: ProductVersion_update_column;
  ['ProductVersion_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: GraphQLTypes['ProductVersion_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: GraphQLTypes['ProductVersion_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: GraphQLTypes['ProductVersion_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['ProductVersion_var_pop_fields']: {
    __typename: 'ProductVersion_var_pop_fields';
    cursorId?: number | undefined;
  };
  /** order by var_pop() on columns of table "ProductVersion" */
  ['ProductVersion_var_pop_order_by']: {
    cursorId?: GraphQLTypes['order_by'] | undefined;
  };
  /** aggregate var_samp on columns */
  ['ProductVersion_var_samp_fields']: {
    __typename: 'ProductVersion_var_samp_fields';
    cursorId?: number | undefined;
  };
  /** order by var_samp() on columns of table "ProductVersion" */
  ['ProductVersion_var_samp_order_by']: {
    cursorId?: GraphQLTypes['order_by'] | undefined;
  };
  /** aggregate variance on columns */
  ['ProductVersion_variance_fields']: {
    __typename: 'ProductVersion_variance_fields';
    cursorId?: number | undefined;
  };
  /** order by variance() on columns of table "ProductVersion" */
  ['ProductVersion_variance_order_by']: {
    cursorId?: GraphQLTypes['order_by'] | undefined;
  };
  /** aggregated selection of "Product" */
  ['Product_aggregate']: {
    __typename: 'Product_aggregate';
    aggregate?: GraphQLTypes['Product_aggregate_fields'] | undefined;
    nodes: Array<GraphQLTypes['Product']>;
  };
  /** aggregate fields of "Product" */
  ['Product_aggregate_fields']: {
    __typename: 'Product_aggregate_fields';
    avg?: GraphQLTypes['Product_avg_fields'] | undefined;
    count: number;
    max?: GraphQLTypes['Product_max_fields'] | undefined;
    min?: GraphQLTypes['Product_min_fields'] | undefined;
    stddev?: GraphQLTypes['Product_stddev_fields'] | undefined;
    stddev_pop?: GraphQLTypes['Product_stddev_pop_fields'] | undefined;
    stddev_samp?: GraphQLTypes['Product_stddev_samp_fields'] | undefined;
    sum?: GraphQLTypes['Product_sum_fields'] | undefined;
    var_pop?: GraphQLTypes['Product_var_pop_fields'] | undefined;
    var_samp?: GraphQLTypes['Product_var_samp_fields'] | undefined;
    variance?: GraphQLTypes['Product_variance_fields'] | undefined;
  };
  /** aggregate avg on columns */
  ['Product_avg_fields']: {
    __typename: 'Product_avg_fields';
    cursorId?: number | undefined;
  };
  /** Boolean expression to filter rows from the table "Product". All fields are combined with a logical 'AND'. */
  ['Product_bool_exp']: {
    _and?: Array<GraphQLTypes['Product_bool_exp']> | undefined;
    _not?: GraphQLTypes['Product_bool_exp'] | undefined;
    _or?: Array<GraphQLTypes['Product_bool_exp']> | undefined;
    code?: GraphQLTypes['String_comparison_exp'] | undefined;
    createdAt?: GraphQLTypes['timestamp_comparison_exp'] | undefined;
    createdById?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    cursorId?: GraphQLTypes['bigint_comparison_exp'] | undefined;
    description?: GraphQLTypes['String_comparison_exp'] | undefined;
    id?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    metric?: GraphQLTypes['String_comparison_exp'] | undefined;
    name?: GraphQLTypes['String_comparison_exp'] | undefined;
    productCategories?: GraphQLTypes['ProductCategory_bool_exp'] | undefined;
    productCategories_aggregate?:
      | GraphQLTypes['ProductCategory_aggregate_bool_exp']
      | undefined;
    productVersions?: GraphQLTypes['ProductVersion_bool_exp'] | undefined;
    productVersions_aggregate?:
      | GraphQLTypes['ProductVersion_aggregate_bool_exp']
      | undefined;
    status?: GraphQLTypes['Status_enum_comparison_exp'] | undefined;
    tenantId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz_comparison_exp'] | undefined;
    updatedById?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    version?: GraphQLTypes['String_comparison_exp'] | undefined;
  };
  /** unique or primary key constraints on table "Product" */
  ['Product_constraint']: Product_constraint;
  /** input type for incrementing numeric columns in table "Product" */
  ['Product_inc_input']: {
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "Product" */
  ['Product_insert_input']: {
    code?: string | undefined;
    createdAt?: GraphQLTypes['timestamp'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    metric?: string | undefined;
    name?: string | undefined;
    productCategories?:
      | GraphQLTypes['ProductCategory_arr_rel_insert_input']
      | undefined;
    productVersions?:
      | GraphQLTypes['ProductVersion_arr_rel_insert_input']
      | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
    version?: string | undefined;
  };
  /** aggregate max on columns */
  ['Product_max_fields']: {
    __typename: 'Product_max_fields';
    code?: string | undefined;
    createdAt?: GraphQLTypes['timestamp'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    metric?: string | undefined;
    name?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
    version?: string | undefined;
  };
  /** aggregate min on columns */
  ['Product_min_fields']: {
    __typename: 'Product_min_fields';
    code?: string | undefined;
    createdAt?: GraphQLTypes['timestamp'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    metric?: string | undefined;
    name?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
    version?: string | undefined;
  };
  /** response of any mutation on the table "Product" */
  ['Product_mutation_response']: {
    __typename: 'Product_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['Product']>;
  };
  /** input type for inserting object relation for remote table "Product" */
  ['Product_obj_rel_insert_input']: {
    data: GraphQLTypes['Product_insert_input'];
    /** upsert condition */
    on_conflict?: GraphQLTypes['Product_on_conflict'] | undefined;
  };
  /** on_conflict condition type for table "Product" */
  ['Product_on_conflict']: {
    constraint: GraphQLTypes['Product_constraint'];
    update_columns: Array<GraphQLTypes['Product_update_column']>;
    where?: GraphQLTypes['Product_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "Product". */
  ['Product_order_by']: {
    code?: GraphQLTypes['order_by'] | undefined;
    createdAt?: GraphQLTypes['order_by'] | undefined;
    createdById?: GraphQLTypes['order_by'] | undefined;
    cursorId?: GraphQLTypes['order_by'] | undefined;
    description?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    metric?: GraphQLTypes['order_by'] | undefined;
    name?: GraphQLTypes['order_by'] | undefined;
    productCategories_aggregate?:
      | GraphQLTypes['ProductCategory_aggregate_order_by']
      | undefined;
    productVersions_aggregate?:
      | GraphQLTypes['ProductVersion_aggregate_order_by']
      | undefined;
    status?: GraphQLTypes['order_by'] | undefined;
    tenantId?: GraphQLTypes['order_by'] | undefined;
    updatedAt?: GraphQLTypes['order_by'] | undefined;
    updatedById?: GraphQLTypes['order_by'] | undefined;
    version?: GraphQLTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: Product */
  ['Product_pk_columns_input']: {
    id: GraphQLTypes['uuid'];
  };
  /** select columns of table "Product" */
  ['Product_select_column']: Product_select_column;
  /** input type for updating data in table "Product" */
  ['Product_set_input']: {
    code?: string | undefined;
    createdAt?: GraphQLTypes['timestamp'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    metric?: string | undefined;
    name?: string | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
    version?: string | undefined;
  };
  /** aggregate stddev on columns */
  ['Product_stddev_fields']: {
    __typename: 'Product_stddev_fields';
    cursorId?: number | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['Product_stddev_pop_fields']: {
    __typename: 'Product_stddev_pop_fields';
    cursorId?: number | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['Product_stddev_samp_fields']: {
    __typename: 'Product_stddev_samp_fields';
    cursorId?: number | undefined;
  };
  /** Streaming cursor of the table "Product" */
  ['Product_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: GraphQLTypes['Product_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: GraphQLTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['Product_stream_cursor_value_input']: {
    code?: string | undefined;
    createdAt?: GraphQLTypes['timestamp'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    metric?: string | undefined;
    name?: string | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamptz'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
    version?: string | undefined;
  };
  /** aggregate sum on columns */
  ['Product_sum_fields']: {
    __typename: 'Product_sum_fields';
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** update columns of table "Product" */
  ['Product_update_column']: Product_update_column;
  ['Product_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: GraphQLTypes['Product_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: GraphQLTypes['Product_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: GraphQLTypes['Product_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['Product_var_pop_fields']: {
    __typename: 'Product_var_pop_fields';
    cursorId?: number | undefined;
  };
  /** aggregate var_samp on columns */
  ['Product_var_samp_fields']: {
    __typename: 'Product_var_samp_fields';
    cursorId?: number | undefined;
  };
  /** aggregate variance on columns */
  ['Product_variance_fields']: {
    __typename: 'Product_variance_fields';
    cursorId?: number | undefined;
  };
  /** columns and relationships of "Role" */
  ['Role']: {
    __typename: 'Role';
    /** An object relationship */
    application: GraphQLTypes['Application'];
    applicationId: string;
    description: string;
    id: GraphQLTypes['uuid'];
    name: string;
    /** An array relationship */
    roleGroups: Array<GraphQLTypes['GroupRole']>;
    /** An aggregate relationship */
    roleGroups_aggregate: GraphQLTypes['GroupRole_aggregate'];
    /** An array relationship */
    userRoles: Array<GraphQLTypes['UserRole']>;
    /** An aggregate relationship */
    userRoles_aggregate: GraphQLTypes['UserRole_aggregate'];
  };
  /** aggregated selection of "Role" */
  ['Role_aggregate']: {
    __typename: 'Role_aggregate';
    aggregate?: GraphQLTypes['Role_aggregate_fields'] | undefined;
    nodes: Array<GraphQLTypes['Role']>;
  };
  /** aggregate fields of "Role" */
  ['Role_aggregate_fields']: {
    __typename: 'Role_aggregate_fields';
    count: number;
    max?: GraphQLTypes['Role_max_fields'] | undefined;
    min?: GraphQLTypes['Role_min_fields'] | undefined;
  };
  /** Boolean expression to filter rows from the table "Role". All fields are combined with a logical 'AND'. */
  ['Role_bool_exp']: {
    _and?: Array<GraphQLTypes['Role_bool_exp']> | undefined;
    _not?: GraphQLTypes['Role_bool_exp'] | undefined;
    _or?: Array<GraphQLTypes['Role_bool_exp']> | undefined;
    application?: GraphQLTypes['Application_bool_exp'] | undefined;
    applicationId?: GraphQLTypes['String_comparison_exp'] | undefined;
    description?: GraphQLTypes['String_comparison_exp'] | undefined;
    id?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    name?: GraphQLTypes['String_comparison_exp'] | undefined;
    roleGroups?: GraphQLTypes['GroupRole_bool_exp'] | undefined;
    roleGroups_aggregate?:
      | GraphQLTypes['GroupRole_aggregate_bool_exp']
      | undefined;
    userRoles?: GraphQLTypes['UserRole_bool_exp'] | undefined;
    userRoles_aggregate?:
      | GraphQLTypes['UserRole_aggregate_bool_exp']
      | undefined;
  };
  /** unique or primary key constraints on table "Role" */
  ['Role_constraint']: Role_constraint;
  /** input type for inserting data into table "Role" */
  ['Role_insert_input']: {
    application?: GraphQLTypes['Application_obj_rel_insert_input'] | undefined;
    applicationId?: string | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
    roleGroups?: GraphQLTypes['GroupRole_arr_rel_insert_input'] | undefined;
    userRoles?: GraphQLTypes['UserRole_arr_rel_insert_input'] | undefined;
  };
  /** aggregate max on columns */
  ['Role_max_fields']: {
    __typename: 'Role_max_fields';
    applicationId?: string | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
  };
  /** aggregate min on columns */
  ['Role_min_fields']: {
    __typename: 'Role_min_fields';
    applicationId?: string | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
  };
  /** response of any mutation on the table "Role" */
  ['Role_mutation_response']: {
    __typename: 'Role_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['Role']>;
  };
  /** input type for inserting object relation for remote table "Role" */
  ['Role_obj_rel_insert_input']: {
    data: GraphQLTypes['Role_insert_input'];
    /** upsert condition */
    on_conflict?: GraphQLTypes['Role_on_conflict'] | undefined;
  };
  /** on_conflict condition type for table "Role" */
  ['Role_on_conflict']: {
    constraint: GraphQLTypes['Role_constraint'];
    update_columns: Array<GraphQLTypes['Role_update_column']>;
    where?: GraphQLTypes['Role_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "Role". */
  ['Role_order_by']: {
    application?: GraphQLTypes['Application_order_by'] | undefined;
    applicationId?: GraphQLTypes['order_by'] | undefined;
    description?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    name?: GraphQLTypes['order_by'] | undefined;
    roleGroups_aggregate?:
      | GraphQLTypes['GroupRole_aggregate_order_by']
      | undefined;
    userRoles_aggregate?:
      | GraphQLTypes['UserRole_aggregate_order_by']
      | undefined;
  };
  /** primary key columns input for table: Role */
  ['Role_pk_columns_input']: {
    id: GraphQLTypes['uuid'];
  };
  /** select columns of table "Role" */
  ['Role_select_column']: Role_select_column;
  /** input type for updating data in table "Role" */
  ['Role_set_input']: {
    applicationId?: string | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
  };
  /** Streaming cursor of the table "Role" */
  ['Role_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: GraphQLTypes['Role_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: GraphQLTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['Role_stream_cursor_value_input']: {
    applicationId?: string | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    name?: string | undefined;
  };
  /** update columns of table "Role" */
  ['Role_update_column']: Role_update_column;
  ['Role_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: GraphQLTypes['Role_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: GraphQLTypes['Role_bool_exp'];
  };
  /** columns and relationships of "Status" */
  ['Status']: {
    __typename: 'Status';
    value: string;
  };
  /** aggregated selection of "Status" */
  ['Status_aggregate']: {
    __typename: 'Status_aggregate';
    aggregate?: GraphQLTypes['Status_aggregate_fields'] | undefined;
    nodes: Array<GraphQLTypes['Status']>;
  };
  /** aggregate fields of "Status" */
  ['Status_aggregate_fields']: {
    __typename: 'Status_aggregate_fields';
    count: number;
    max?: GraphQLTypes['Status_max_fields'] | undefined;
    min?: GraphQLTypes['Status_min_fields'] | undefined;
  };
  /** Boolean expression to filter rows from the table "Status". All fields are combined with a logical 'AND'. */
  ['Status_bool_exp']: {
    _and?: Array<GraphQLTypes['Status_bool_exp']> | undefined;
    _not?: GraphQLTypes['Status_bool_exp'] | undefined;
    _or?: Array<GraphQLTypes['Status_bool_exp']> | undefined;
    value?: GraphQLTypes['String_comparison_exp'] | undefined;
  };
  /** unique or primary key constraints on table "Status" */
  ['Status_constraint']: Status_constraint;
  ['Status_enum']: Status_enum;
  /** Boolean expression to compare columns of type "Status_enum". All fields are combined with logical 'AND'. */
  ['Status_enum_comparison_exp']: {
    _eq?: GraphQLTypes['Status_enum'] | undefined;
    _in?: Array<GraphQLTypes['Status_enum']> | undefined;
    _is_null?: boolean | undefined;
    _neq?: GraphQLTypes['Status_enum'] | undefined;
    _nin?: Array<GraphQLTypes['Status_enum']> | undefined;
  };
  /** input type for inserting data into table "Status" */
  ['Status_insert_input']: {
    value?: string | undefined;
  };
  /** aggregate max on columns */
  ['Status_max_fields']: {
    __typename: 'Status_max_fields';
    value?: string | undefined;
  };
  /** aggregate min on columns */
  ['Status_min_fields']: {
    __typename: 'Status_min_fields';
    value?: string | undefined;
  };
  /** response of any mutation on the table "Status" */
  ['Status_mutation_response']: {
    __typename: 'Status_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['Status']>;
  };
  /** on_conflict condition type for table "Status" */
  ['Status_on_conflict']: {
    constraint: GraphQLTypes['Status_constraint'];
    update_columns: Array<GraphQLTypes['Status_update_column']>;
    where?: GraphQLTypes['Status_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "Status". */
  ['Status_order_by']: {
    value?: GraphQLTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: Status */
  ['Status_pk_columns_input']: {
    value: string;
  };
  /** select columns of table "Status" */
  ['Status_select_column']: Status_select_column;
  /** input type for updating data in table "Status" */
  ['Status_set_input']: {
    value?: string | undefined;
  };
  /** Streaming cursor of the table "Status" */
  ['Status_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: GraphQLTypes['Status_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: GraphQLTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['Status_stream_cursor_value_input']: {
    value?: string | undefined;
  };
  /** update columns of table "Status" */
  ['Status_update_column']: Status_update_column;
  ['Status_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: GraphQLTypes['Status_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: GraphQLTypes['Status_bool_exp'];
  };
  /** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
  ['String_comparison_exp']: {
    _eq?: string | undefined;
    _gt?: string | undefined;
    _gte?: string | undefined;
    /** does the column match the given case-insensitive pattern */
    _ilike?: string | undefined;
    _in?: Array<string> | undefined;
    /** does the column match the given POSIX regular expression, case insensitive */
    _iregex?: string | undefined;
    _is_null?: boolean | undefined;
    /** does the column match the given pattern */
    _like?: string | undefined;
    _lt?: string | undefined;
    _lte?: string | undefined;
    _neq?: string | undefined;
    /** does the column NOT match the given case-insensitive pattern */
    _nilike?: string | undefined;
    _nin?: Array<string> | undefined;
    /** does the column NOT match the given POSIX regular expression, case insensitive */
    _niregex?: string | undefined;
    /** does the column NOT match the given pattern */
    _nlike?: string | undefined;
    /** does the column NOT match the given POSIX regular expression, case sensitive */
    _nregex?: string | undefined;
    /** does the column NOT match the given SQL regular expression */
    _nsimilar?: string | undefined;
    /** does the column match the given POSIX regular expression, case sensitive */
    _regex?: string | undefined;
    /** does the column match the given SQL regular expression */
    _similar?: string | undefined;
  };
  /** columns and relationships of "Task" */
  ['Task']: {
    __typename: 'Task';
    closureReason: string;
    description: string;
    hasSensitiveInfo: boolean;
    id: GraphQLTypes['uuid'];
    isRejected: boolean;
    isSupportEngineerIdentityHidden: boolean;
    issueCategory: string;
    linkedTickets?: string | undefined;
    name: string;
    organizationId: string;
    productDocId: GraphQLTypes['uuid'];
    productVersion: string;
    requestForInformation: string;
    requestedByUserId: GraphQLTypes['uuid'];
    reviewedByUserId: GraphQLTypes['uuid'];
    rootChapterId: GraphQLTypes['uuid'];
    rootChapterVersion: string;
    salesForceTicketId: string;
    severity: string;
    severityUpdatedAt: GraphQLTypes['timestamp'];
    status: string;
    subCategory: string;
    tenantId: GraphQLTypes['uuid'];
    ticketRef: string;
    type: string;
    usersToNotify?: string | undefined;
  };
  /** aggregated selection of "Task" */
  ['Task_aggregate']: {
    __typename: 'Task_aggregate';
    aggregate?: GraphQLTypes['Task_aggregate_fields'] | undefined;
    nodes: Array<GraphQLTypes['Task']>;
  };
  /** aggregate fields of "Task" */
  ['Task_aggregate_fields']: {
    __typename: 'Task_aggregate_fields';
    count: number;
    max?: GraphQLTypes['Task_max_fields'] | undefined;
    min?: GraphQLTypes['Task_min_fields'] | undefined;
  };
  /** Boolean expression to filter rows from the table "Task". All fields are combined with a logical 'AND'. */
  ['Task_bool_exp']: {
    _and?: Array<GraphQLTypes['Task_bool_exp']> | undefined;
    _not?: GraphQLTypes['Task_bool_exp'] | undefined;
    _or?: Array<GraphQLTypes['Task_bool_exp']> | undefined;
    closureReason?: GraphQLTypes['String_comparison_exp'] | undefined;
    description?: GraphQLTypes['String_comparison_exp'] | undefined;
    hasSensitiveInfo?: GraphQLTypes['Boolean_comparison_exp'] | undefined;
    id?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    isRejected?: GraphQLTypes['Boolean_comparison_exp'] | undefined;
    isSupportEngineerIdentityHidden?:
      | GraphQLTypes['Boolean_comparison_exp']
      | undefined;
    issueCategory?: GraphQLTypes['String_comparison_exp'] | undefined;
    linkedTickets?: GraphQLTypes['String_comparison_exp'] | undefined;
    name?: GraphQLTypes['String_comparison_exp'] | undefined;
    organizationId?: GraphQLTypes['String_comparison_exp'] | undefined;
    productDocId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    productVersion?: GraphQLTypes['String_comparison_exp'] | undefined;
    requestForInformation?: GraphQLTypes['String_comparison_exp'] | undefined;
    requestedByUserId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    reviewedByUserId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    rootChapterId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    rootChapterVersion?: GraphQLTypes['String_comparison_exp'] | undefined;
    salesForceTicketId?: GraphQLTypes['String_comparison_exp'] | undefined;
    severity?: GraphQLTypes['String_comparison_exp'] | undefined;
    severityUpdatedAt?: GraphQLTypes['timestamp_comparison_exp'] | undefined;
    status?: GraphQLTypes['String_comparison_exp'] | undefined;
    subCategory?: GraphQLTypes['String_comparison_exp'] | undefined;
    tenantId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    ticketRef?: GraphQLTypes['String_comparison_exp'] | undefined;
    type?: GraphQLTypes['String_comparison_exp'] | undefined;
    usersToNotify?: GraphQLTypes['String_comparison_exp'] | undefined;
  };
  /** unique or primary key constraints on table "Task" */
  ['Task_constraint']: Task_constraint;
  /** input type for inserting data into table "Task" */
  ['Task_insert_input']: {
    closureReason?: string | undefined;
    description?: string | undefined;
    hasSensitiveInfo?: boolean | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    isRejected?: boolean | undefined;
    isSupportEngineerIdentityHidden?: boolean | undefined;
    issueCategory?: string | undefined;
    linkedTickets?: string | undefined;
    name?: string | undefined;
    organizationId?: string | undefined;
    productDocId?: GraphQLTypes['uuid'] | undefined;
    productVersion?: string | undefined;
    requestForInformation?: string | undefined;
    requestedByUserId?: GraphQLTypes['uuid'] | undefined;
    reviewedByUserId?: GraphQLTypes['uuid'] | undefined;
    rootChapterId?: GraphQLTypes['uuid'] | undefined;
    rootChapterVersion?: string | undefined;
    salesForceTicketId?: string | undefined;
    severity?: string | undefined;
    severityUpdatedAt?: GraphQLTypes['timestamp'] | undefined;
    status?: string | undefined;
    subCategory?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    ticketRef?: string | undefined;
    type?: string | undefined;
    usersToNotify?: string | undefined;
  };
  /** aggregate max on columns */
  ['Task_max_fields']: {
    __typename: 'Task_max_fields';
    closureReason?: string | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    issueCategory?: string | undefined;
    linkedTickets?: string | undefined;
    name?: string | undefined;
    organizationId?: string | undefined;
    productDocId?: GraphQLTypes['uuid'] | undefined;
    productVersion?: string | undefined;
    requestForInformation?: string | undefined;
    requestedByUserId?: GraphQLTypes['uuid'] | undefined;
    reviewedByUserId?: GraphQLTypes['uuid'] | undefined;
    rootChapterId?: GraphQLTypes['uuid'] | undefined;
    rootChapterVersion?: string | undefined;
    salesForceTicketId?: string | undefined;
    severity?: string | undefined;
    severityUpdatedAt?: GraphQLTypes['timestamp'] | undefined;
    status?: string | undefined;
    subCategory?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    ticketRef?: string | undefined;
    type?: string | undefined;
    usersToNotify?: string | undefined;
  };
  /** aggregate min on columns */
  ['Task_min_fields']: {
    __typename: 'Task_min_fields';
    closureReason?: string | undefined;
    description?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    issueCategory?: string | undefined;
    linkedTickets?: string | undefined;
    name?: string | undefined;
    organizationId?: string | undefined;
    productDocId?: GraphQLTypes['uuid'] | undefined;
    productVersion?: string | undefined;
    requestForInformation?: string | undefined;
    requestedByUserId?: GraphQLTypes['uuid'] | undefined;
    reviewedByUserId?: GraphQLTypes['uuid'] | undefined;
    rootChapterId?: GraphQLTypes['uuid'] | undefined;
    rootChapterVersion?: string | undefined;
    salesForceTicketId?: string | undefined;
    severity?: string | undefined;
    severityUpdatedAt?: GraphQLTypes['timestamp'] | undefined;
    status?: string | undefined;
    subCategory?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    ticketRef?: string | undefined;
    type?: string | undefined;
    usersToNotify?: string | undefined;
  };
  /** response of any mutation on the table "Task" */
  ['Task_mutation_response']: {
    __typename: 'Task_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['Task']>;
  };
  /** on_conflict condition type for table "Task" */
  ['Task_on_conflict']: {
    constraint: GraphQLTypes['Task_constraint'];
    update_columns: Array<GraphQLTypes['Task_update_column']>;
    where?: GraphQLTypes['Task_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "Task". */
  ['Task_order_by']: {
    closureReason?: GraphQLTypes['order_by'] | undefined;
    description?: GraphQLTypes['order_by'] | undefined;
    hasSensitiveInfo?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    isRejected?: GraphQLTypes['order_by'] | undefined;
    isSupportEngineerIdentityHidden?: GraphQLTypes['order_by'] | undefined;
    issueCategory?: GraphQLTypes['order_by'] | undefined;
    linkedTickets?: GraphQLTypes['order_by'] | undefined;
    name?: GraphQLTypes['order_by'] | undefined;
    organizationId?: GraphQLTypes['order_by'] | undefined;
    productDocId?: GraphQLTypes['order_by'] | undefined;
    productVersion?: GraphQLTypes['order_by'] | undefined;
    requestForInformation?: GraphQLTypes['order_by'] | undefined;
    requestedByUserId?: GraphQLTypes['order_by'] | undefined;
    reviewedByUserId?: GraphQLTypes['order_by'] | undefined;
    rootChapterId?: GraphQLTypes['order_by'] | undefined;
    rootChapterVersion?: GraphQLTypes['order_by'] | undefined;
    salesForceTicketId?: GraphQLTypes['order_by'] | undefined;
    severity?: GraphQLTypes['order_by'] | undefined;
    severityUpdatedAt?: GraphQLTypes['order_by'] | undefined;
    status?: GraphQLTypes['order_by'] | undefined;
    subCategory?: GraphQLTypes['order_by'] | undefined;
    tenantId?: GraphQLTypes['order_by'] | undefined;
    ticketRef?: GraphQLTypes['order_by'] | undefined;
    type?: GraphQLTypes['order_by'] | undefined;
    usersToNotify?: GraphQLTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: Task */
  ['Task_pk_columns_input']: {
    id: GraphQLTypes['uuid'];
  };
  /** select columns of table "Task" */
  ['Task_select_column']: Task_select_column;
  /** input type for updating data in table "Task" */
  ['Task_set_input']: {
    closureReason?: string | undefined;
    description?: string | undefined;
    hasSensitiveInfo?: boolean | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    isRejected?: boolean | undefined;
    isSupportEngineerIdentityHidden?: boolean | undefined;
    issueCategory?: string | undefined;
    linkedTickets?: string | undefined;
    name?: string | undefined;
    organizationId?: string | undefined;
    productDocId?: GraphQLTypes['uuid'] | undefined;
    productVersion?: string | undefined;
    requestForInformation?: string | undefined;
    requestedByUserId?: GraphQLTypes['uuid'] | undefined;
    reviewedByUserId?: GraphQLTypes['uuid'] | undefined;
    rootChapterId?: GraphQLTypes['uuid'] | undefined;
    rootChapterVersion?: string | undefined;
    salesForceTicketId?: string | undefined;
    severity?: string | undefined;
    severityUpdatedAt?: GraphQLTypes['timestamp'] | undefined;
    status?: string | undefined;
    subCategory?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    ticketRef?: string | undefined;
    type?: string | undefined;
    usersToNotify?: string | undefined;
  };
  /** Streaming cursor of the table "Task" */
  ['Task_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: GraphQLTypes['Task_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: GraphQLTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['Task_stream_cursor_value_input']: {
    closureReason?: string | undefined;
    description?: string | undefined;
    hasSensitiveInfo?: boolean | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    isRejected?: boolean | undefined;
    isSupportEngineerIdentityHidden?: boolean | undefined;
    issueCategory?: string | undefined;
    linkedTickets?: string | undefined;
    name?: string | undefined;
    organizationId?: string | undefined;
    productDocId?: GraphQLTypes['uuid'] | undefined;
    productVersion?: string | undefined;
    requestForInformation?: string | undefined;
    requestedByUserId?: GraphQLTypes['uuid'] | undefined;
    reviewedByUserId?: GraphQLTypes['uuid'] | undefined;
    rootChapterId?: GraphQLTypes['uuid'] | undefined;
    rootChapterVersion?: string | undefined;
    salesForceTicketId?: string | undefined;
    severity?: string | undefined;
    severityUpdatedAt?: GraphQLTypes['timestamp'] | undefined;
    status?: string | undefined;
    subCategory?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    ticketRef?: string | undefined;
    type?: string | undefined;
    usersToNotify?: string | undefined;
  };
  /** update columns of table "Task" */
  ['Task_update_column']: Task_update_column;
  ['Task_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: GraphQLTypes['Task_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: GraphQLTypes['Task_bool_exp'];
  };
  /** columns and relationships of "Tenant" */
  ['Tenant']: {
    __typename: 'Tenant';
    address: string;
    contact: string;
    createdAt: GraphQLTypes['timestamp'];
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId: GraphQLTypes['bigint'];
    emailId: string;
    firstName: string;
    id: GraphQLTypes['uuid'];
    lastName: string;
    name: string;
    organizationId: string;
    /** An array relationship */
    packages: Array<GraphQLTypes['TenantPackage']>;
    /** An aggregate relationship */
    packages_aggregate: GraphQLTypes['TenantPackage_aggregate'];
    sidebarLinkId?: GraphQLTypes['uuid'] | undefined;
    status: string;
    tenantCustomizationId?: GraphQLTypes['uuid'] | undefined;
    totalSpaceForDoc?: string | undefined;
    updatedAt: GraphQLTypes['timestamp'];
    updatedById?: GraphQLTypes['uuid'] | undefined;
    usedSpaceByDoc?: string | undefined;
    verificationStatus: string;
  };
  /** columns and relationships of "TenantPackage" */
  ['TenantPackage']: {
    __typename: 'TenantPackage';
    id: GraphQLTypes['uuid'];
    /** An object relationship */
    package: GraphQLTypes['Package'];
    packageId: GraphQLTypes['uuid'];
    /** An object relationship */
    tenant: GraphQLTypes['Tenant'];
    tenantId: GraphQLTypes['uuid'];
  };
  /** aggregated selection of "TenantPackage" */
  ['TenantPackage_aggregate']: {
    __typename: 'TenantPackage_aggregate';
    aggregate?: GraphQLTypes['TenantPackage_aggregate_fields'] | undefined;
    nodes: Array<GraphQLTypes['TenantPackage']>;
  };
  ['TenantPackage_aggregate_bool_exp']: {
    count?: GraphQLTypes['TenantPackage_aggregate_bool_exp_count'] | undefined;
  };
  ['TenantPackage_aggregate_bool_exp_count']: {
    arguments?: Array<GraphQLTypes['TenantPackage_select_column']> | undefined;
    distinct?: boolean | undefined;
    filter?: GraphQLTypes['TenantPackage_bool_exp'] | undefined;
    predicate: GraphQLTypes['Int_comparison_exp'];
  };
  /** aggregate fields of "TenantPackage" */
  ['TenantPackage_aggregate_fields']: {
    __typename: 'TenantPackage_aggregate_fields';
    count: number;
    max?: GraphQLTypes['TenantPackage_max_fields'] | undefined;
    min?: GraphQLTypes['TenantPackage_min_fields'] | undefined;
  };
  /** order by aggregate values of table "TenantPackage" */
  ['TenantPackage_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'] | undefined;
    max?: GraphQLTypes['TenantPackage_max_order_by'] | undefined;
    min?: GraphQLTypes['TenantPackage_min_order_by'] | undefined;
  };
  /** input type for inserting array relation for remote table "TenantPackage" */
  ['TenantPackage_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['TenantPackage_insert_input']>;
    /** upsert condition */
    on_conflict?: GraphQLTypes['TenantPackage_on_conflict'] | undefined;
  };
  /** Boolean expression to filter rows from the table "TenantPackage". All fields are combined with a logical 'AND'. */
  ['TenantPackage_bool_exp']: {
    _and?: Array<GraphQLTypes['TenantPackage_bool_exp']> | undefined;
    _not?: GraphQLTypes['TenantPackage_bool_exp'] | undefined;
    _or?: Array<GraphQLTypes['TenantPackage_bool_exp']> | undefined;
    id?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    package?: GraphQLTypes['Package_bool_exp'] | undefined;
    packageId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    tenant?: GraphQLTypes['Tenant_bool_exp'] | undefined;
    tenantId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
  };
  /** unique or primary key constraints on table "TenantPackage" */
  ['TenantPackage_constraint']: TenantPackage_constraint;
  /** input type for inserting data into table "TenantPackage" */
  ['TenantPackage_insert_input']: {
    id?: GraphQLTypes['uuid'] | undefined;
    package?: GraphQLTypes['Package_obj_rel_insert_input'] | undefined;
    packageId?: GraphQLTypes['uuid'] | undefined;
    tenant?: GraphQLTypes['Tenant_obj_rel_insert_input'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate max on columns */
  ['TenantPackage_max_fields']: {
    __typename: 'TenantPackage_max_fields';
    id?: GraphQLTypes['uuid'] | undefined;
    packageId?: GraphQLTypes['uuid'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
  };
  /** order by max() on columns of table "TenantPackage" */
  ['TenantPackage_max_order_by']: {
    id?: GraphQLTypes['order_by'] | undefined;
    packageId?: GraphQLTypes['order_by'] | undefined;
    tenantId?: GraphQLTypes['order_by'] | undefined;
  };
  /** aggregate min on columns */
  ['TenantPackage_min_fields']: {
    __typename: 'TenantPackage_min_fields';
    id?: GraphQLTypes['uuid'] | undefined;
    packageId?: GraphQLTypes['uuid'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
  };
  /** order by min() on columns of table "TenantPackage" */
  ['TenantPackage_min_order_by']: {
    id?: GraphQLTypes['order_by'] | undefined;
    packageId?: GraphQLTypes['order_by'] | undefined;
    tenantId?: GraphQLTypes['order_by'] | undefined;
  };
  /** response of any mutation on the table "TenantPackage" */
  ['TenantPackage_mutation_response']: {
    __typename: 'TenantPackage_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['TenantPackage']>;
  };
  /** on_conflict condition type for table "TenantPackage" */
  ['TenantPackage_on_conflict']: {
    constraint: GraphQLTypes['TenantPackage_constraint'];
    update_columns: Array<GraphQLTypes['TenantPackage_update_column']>;
    where?: GraphQLTypes['TenantPackage_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "TenantPackage". */
  ['TenantPackage_order_by']: {
    id?: GraphQLTypes['order_by'] | undefined;
    package?: GraphQLTypes['Package_order_by'] | undefined;
    packageId?: GraphQLTypes['order_by'] | undefined;
    tenant?: GraphQLTypes['Tenant_order_by'] | undefined;
    tenantId?: GraphQLTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: TenantPackage */
  ['TenantPackage_pk_columns_input']: {
    id: GraphQLTypes['uuid'];
  };
  /** select columns of table "TenantPackage" */
  ['TenantPackage_select_column']: TenantPackage_select_column;
  /** input type for updating data in table "TenantPackage" */
  ['TenantPackage_set_input']: {
    id?: GraphQLTypes['uuid'] | undefined;
    packageId?: GraphQLTypes['uuid'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
  };
  /** Streaming cursor of the table "TenantPackage" */
  ['TenantPackage_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: GraphQLTypes['TenantPackage_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: GraphQLTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['TenantPackage_stream_cursor_value_input']: {
    id?: GraphQLTypes['uuid'] | undefined;
    packageId?: GraphQLTypes['uuid'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
  };
  /** update columns of table "TenantPackage" */
  ['TenantPackage_update_column']: TenantPackage_update_column;
  ['TenantPackage_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: GraphQLTypes['TenantPackage_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: GraphQLTypes['TenantPackage_bool_exp'];
  };
  /** aggregated selection of "Tenant" */
  ['Tenant_aggregate']: {
    __typename: 'Tenant_aggregate';
    aggregate?: GraphQLTypes['Tenant_aggregate_fields'] | undefined;
    nodes: Array<GraphQLTypes['Tenant']>;
  };
  /** aggregate fields of "Tenant" */
  ['Tenant_aggregate_fields']: {
    __typename: 'Tenant_aggregate_fields';
    avg?: GraphQLTypes['Tenant_avg_fields'] | undefined;
    count: number;
    max?: GraphQLTypes['Tenant_max_fields'] | undefined;
    min?: GraphQLTypes['Tenant_min_fields'] | undefined;
    stddev?: GraphQLTypes['Tenant_stddev_fields'] | undefined;
    stddev_pop?: GraphQLTypes['Tenant_stddev_pop_fields'] | undefined;
    stddev_samp?: GraphQLTypes['Tenant_stddev_samp_fields'] | undefined;
    sum?: GraphQLTypes['Tenant_sum_fields'] | undefined;
    var_pop?: GraphQLTypes['Tenant_var_pop_fields'] | undefined;
    var_samp?: GraphQLTypes['Tenant_var_samp_fields'] | undefined;
    variance?: GraphQLTypes['Tenant_variance_fields'] | undefined;
  };
  /** aggregate avg on columns */
  ['Tenant_avg_fields']: {
    __typename: 'Tenant_avg_fields';
    cursorId?: number | undefined;
  };
  /** Boolean expression to filter rows from the table "Tenant". All fields are combined with a logical 'AND'. */
  ['Tenant_bool_exp']: {
    _and?: Array<GraphQLTypes['Tenant_bool_exp']> | undefined;
    _not?: GraphQLTypes['Tenant_bool_exp'] | undefined;
    _or?: Array<GraphQLTypes['Tenant_bool_exp']> | undefined;
    address?: GraphQLTypes['String_comparison_exp'] | undefined;
    contact?: GraphQLTypes['String_comparison_exp'] | undefined;
    createdAt?: GraphQLTypes['timestamp_comparison_exp'] | undefined;
    createdById?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    cursorId?: GraphQLTypes['bigint_comparison_exp'] | undefined;
    emailId?: GraphQLTypes['String_comparison_exp'] | undefined;
    firstName?: GraphQLTypes['String_comparison_exp'] | undefined;
    id?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    lastName?: GraphQLTypes['String_comparison_exp'] | undefined;
    name?: GraphQLTypes['String_comparison_exp'] | undefined;
    organizationId?: GraphQLTypes['String_comparison_exp'] | undefined;
    packages?: GraphQLTypes['TenantPackage_bool_exp'] | undefined;
    packages_aggregate?:
      | GraphQLTypes['TenantPackage_aggregate_bool_exp']
      | undefined;
    sidebarLinkId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    status?: GraphQLTypes['String_comparison_exp'] | undefined;
    tenantCustomizationId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    totalSpaceForDoc?: GraphQLTypes['String_comparison_exp'] | undefined;
    updatedAt?: GraphQLTypes['timestamp_comparison_exp'] | undefined;
    updatedById?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    usedSpaceByDoc?: GraphQLTypes['String_comparison_exp'] | undefined;
    verificationStatus?: GraphQLTypes['String_comparison_exp'] | undefined;
  };
  /** unique or primary key constraints on table "Tenant" */
  ['Tenant_constraint']: Tenant_constraint;
  /** input type for incrementing numeric columns in table "Tenant" */
  ['Tenant_inc_input']: {
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "Tenant" */
  ['Tenant_insert_input']: {
    address?: string | undefined;
    contact?: string | undefined;
    createdAt?: GraphQLTypes['timestamp'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    emailId?: string | undefined;
    firstName?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    organizationId?: string | undefined;
    packages?: GraphQLTypes['TenantPackage_arr_rel_insert_input'] | undefined;
    sidebarLinkId?: GraphQLTypes['uuid'] | undefined;
    status?: string | undefined;
    tenantCustomizationId?: GraphQLTypes['uuid'] | undefined;
    totalSpaceForDoc?: string | undefined;
    updatedAt?: GraphQLTypes['timestamp'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
    usedSpaceByDoc?: string | undefined;
    verificationStatus?: string | undefined;
  };
  /** aggregate max on columns */
  ['Tenant_max_fields']: {
    __typename: 'Tenant_max_fields';
    address?: string | undefined;
    contact?: string | undefined;
    createdAt?: GraphQLTypes['timestamp'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    emailId?: string | undefined;
    firstName?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    organizationId?: string | undefined;
    sidebarLinkId?: GraphQLTypes['uuid'] | undefined;
    status?: string | undefined;
    tenantCustomizationId?: GraphQLTypes['uuid'] | undefined;
    totalSpaceForDoc?: string | undefined;
    updatedAt?: GraphQLTypes['timestamp'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
    usedSpaceByDoc?: string | undefined;
    verificationStatus?: string | undefined;
  };
  /** aggregate min on columns */
  ['Tenant_min_fields']: {
    __typename: 'Tenant_min_fields';
    address?: string | undefined;
    contact?: string | undefined;
    createdAt?: GraphQLTypes['timestamp'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    emailId?: string | undefined;
    firstName?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    organizationId?: string | undefined;
    sidebarLinkId?: GraphQLTypes['uuid'] | undefined;
    status?: string | undefined;
    tenantCustomizationId?: GraphQLTypes['uuid'] | undefined;
    totalSpaceForDoc?: string | undefined;
    updatedAt?: GraphQLTypes['timestamp'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
    usedSpaceByDoc?: string | undefined;
    verificationStatus?: string | undefined;
  };
  /** response of any mutation on the table "Tenant" */
  ['Tenant_mutation_response']: {
    __typename: 'Tenant_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['Tenant']>;
  };
  /** input type for inserting object relation for remote table "Tenant" */
  ['Tenant_obj_rel_insert_input']: {
    data: GraphQLTypes['Tenant_insert_input'];
    /** upsert condition */
    on_conflict?: GraphQLTypes['Tenant_on_conflict'] | undefined;
  };
  /** on_conflict condition type for table "Tenant" */
  ['Tenant_on_conflict']: {
    constraint: GraphQLTypes['Tenant_constraint'];
    update_columns: Array<GraphQLTypes['Tenant_update_column']>;
    where?: GraphQLTypes['Tenant_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "Tenant". */
  ['Tenant_order_by']: {
    address?: GraphQLTypes['order_by'] | undefined;
    contact?: GraphQLTypes['order_by'] | undefined;
    createdAt?: GraphQLTypes['order_by'] | undefined;
    createdById?: GraphQLTypes['order_by'] | undefined;
    cursorId?: GraphQLTypes['order_by'] | undefined;
    emailId?: GraphQLTypes['order_by'] | undefined;
    firstName?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    lastName?: GraphQLTypes['order_by'] | undefined;
    name?: GraphQLTypes['order_by'] | undefined;
    organizationId?: GraphQLTypes['order_by'] | undefined;
    packages_aggregate?:
      | GraphQLTypes['TenantPackage_aggregate_order_by']
      | undefined;
    sidebarLinkId?: GraphQLTypes['order_by'] | undefined;
    status?: GraphQLTypes['order_by'] | undefined;
    tenantCustomizationId?: GraphQLTypes['order_by'] | undefined;
    totalSpaceForDoc?: GraphQLTypes['order_by'] | undefined;
    updatedAt?: GraphQLTypes['order_by'] | undefined;
    updatedById?: GraphQLTypes['order_by'] | undefined;
    usedSpaceByDoc?: GraphQLTypes['order_by'] | undefined;
    verificationStatus?: GraphQLTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: Tenant */
  ['Tenant_pk_columns_input']: {
    id: GraphQLTypes['uuid'];
  };
  /** select columns of table "Tenant" */
  ['Tenant_select_column']: Tenant_select_column;
  /** input type for updating data in table "Tenant" */
  ['Tenant_set_input']: {
    address?: string | undefined;
    contact?: string | undefined;
    createdAt?: GraphQLTypes['timestamp'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    emailId?: string | undefined;
    firstName?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    organizationId?: string | undefined;
    sidebarLinkId?: GraphQLTypes['uuid'] | undefined;
    status?: string | undefined;
    tenantCustomizationId?: GraphQLTypes['uuid'] | undefined;
    totalSpaceForDoc?: string | undefined;
    updatedAt?: GraphQLTypes['timestamp'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
    usedSpaceByDoc?: string | undefined;
    verificationStatus?: string | undefined;
  };
  /** aggregate stddev on columns */
  ['Tenant_stddev_fields']: {
    __typename: 'Tenant_stddev_fields';
    cursorId?: number | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['Tenant_stddev_pop_fields']: {
    __typename: 'Tenant_stddev_pop_fields';
    cursorId?: number | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['Tenant_stddev_samp_fields']: {
    __typename: 'Tenant_stddev_samp_fields';
    cursorId?: number | undefined;
  };
  /** Streaming cursor of the table "Tenant" */
  ['Tenant_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: GraphQLTypes['Tenant_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: GraphQLTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['Tenant_stream_cursor_value_input']: {
    address?: string | undefined;
    contact?: string | undefined;
    createdAt?: GraphQLTypes['timestamp'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    emailId?: string | undefined;
    firstName?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    organizationId?: string | undefined;
    sidebarLinkId?: GraphQLTypes['uuid'] | undefined;
    status?: string | undefined;
    tenantCustomizationId?: GraphQLTypes['uuid'] | undefined;
    totalSpaceForDoc?: string | undefined;
    updatedAt?: GraphQLTypes['timestamp'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
    usedSpaceByDoc?: string | undefined;
    verificationStatus?: string | undefined;
  };
  /** aggregate sum on columns */
  ['Tenant_sum_fields']: {
    __typename: 'Tenant_sum_fields';
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** update columns of table "Tenant" */
  ['Tenant_update_column']: Tenant_update_column;
  ['Tenant_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: GraphQLTypes['Tenant_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: GraphQLTypes['Tenant_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: GraphQLTypes['Tenant_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['Tenant_var_pop_fields']: {
    __typename: 'Tenant_var_pop_fields';
    cursorId?: number | undefined;
  };
  /** aggregate var_samp on columns */
  ['Tenant_var_samp_fields']: {
    __typename: 'Tenant_var_samp_fields';
    cursorId?: number | undefined;
  };
  /** aggregate variance on columns */
  ['Tenant_variance_fields']: {
    __typename: 'Tenant_variance_fields';
    cursorId?: number | undefined;
  };
  /** columns and relationships of "User" */
  ['User']: {
    __typename: 'User';
    address?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    createdAt: GraphQLTypes['timestamp'];
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId: GraphQLTypes['bigint'];
    displayName?: string | undefined;
    email: string;
    firstName: string;
    /** An array relationship */
    groups: Array<GraphQLTypes['UserGroup']>;
    /** An aggregate relationship */
    groups_aggregate: GraphQLTypes['UserGroup_aggregate'];
    id: GraphQLTypes['uuid'];
    isMigrated?: boolean | undefined;
    isTenantAdmin?: boolean | undefined;
    jobTitle?: string | undefined;
    lastName: string;
    organizationId: string;
    postalCode?: string | undefined;
    preferredCurrency?: string | undefined;
    profilePictureUrl?: string | undefined;
    role?: string | undefined;
    /** An array relationship */
    roles: Array<GraphQLTypes['UserRole']>;
    /** An aggregate relationship */
    roles_aggregate: GraphQLTypes['UserRole_aggregate'];
    secondaryEmail: string;
    state?: string | undefined;
    status: GraphQLTypes['Status_enum'];
    /** An object relationship */
    tenant: GraphQLTypes['Tenant'];
    tenantId: GraphQLTypes['uuid'];
    updatedAt?: GraphQLTypes['timestamp'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
    userType: GraphQLTypes['UserType_enum'];
  };
  /** columns and relationships of "UserGroup" */
  ['UserGroup']: {
    __typename: 'UserGroup';
    /** An object relationship */
    group: GraphQLTypes['Group'];
    groupId: GraphQLTypes['uuid'];
    id: GraphQLTypes['uuid'];
    /** An object relationship */
    user: GraphQLTypes['User'];
    userId: GraphQLTypes['uuid'];
  };
  /** aggregated selection of "UserGroup" */
  ['UserGroup_aggregate']: {
    __typename: 'UserGroup_aggregate';
    aggregate?: GraphQLTypes['UserGroup_aggregate_fields'] | undefined;
    nodes: Array<GraphQLTypes['UserGroup']>;
  };
  ['UserGroup_aggregate_bool_exp']: {
    count?: GraphQLTypes['UserGroup_aggregate_bool_exp_count'] | undefined;
  };
  ['UserGroup_aggregate_bool_exp_count']: {
    arguments?: Array<GraphQLTypes['UserGroup_select_column']> | undefined;
    distinct?: boolean | undefined;
    filter?: GraphQLTypes['UserGroup_bool_exp'] | undefined;
    predicate: GraphQLTypes['Int_comparison_exp'];
  };
  /** aggregate fields of "UserGroup" */
  ['UserGroup_aggregate_fields']: {
    __typename: 'UserGroup_aggregate_fields';
    count: number;
    max?: GraphQLTypes['UserGroup_max_fields'] | undefined;
    min?: GraphQLTypes['UserGroup_min_fields'] | undefined;
  };
  /** order by aggregate values of table "UserGroup" */
  ['UserGroup_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'] | undefined;
    max?: GraphQLTypes['UserGroup_max_order_by'] | undefined;
    min?: GraphQLTypes['UserGroup_min_order_by'] | undefined;
  };
  /** input type for inserting array relation for remote table "UserGroup" */
  ['UserGroup_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['UserGroup_insert_input']>;
    /** upsert condition */
    on_conflict?: GraphQLTypes['UserGroup_on_conflict'] | undefined;
  };
  /** Boolean expression to filter rows from the table "UserGroup". All fields are combined with a logical 'AND'. */
  ['UserGroup_bool_exp']: {
    _and?: Array<GraphQLTypes['UserGroup_bool_exp']> | undefined;
    _not?: GraphQLTypes['UserGroup_bool_exp'] | undefined;
    _or?: Array<GraphQLTypes['UserGroup_bool_exp']> | undefined;
    group?: GraphQLTypes['Group_bool_exp'] | undefined;
    groupId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    id?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    user?: GraphQLTypes['User_bool_exp'] | undefined;
    userId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
  };
  /** unique or primary key constraints on table "UserGroup" */
  ['UserGroup_constraint']: UserGroup_constraint;
  /** input type for inserting data into table "UserGroup" */
  ['UserGroup_insert_input']: {
    group?: GraphQLTypes['Group_obj_rel_insert_input'] | undefined;
    groupId?: GraphQLTypes['uuid'] | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    user?: GraphQLTypes['User_obj_rel_insert_input'] | undefined;
    userId?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate max on columns */
  ['UserGroup_max_fields']: {
    __typename: 'UserGroup_max_fields';
    groupId?: GraphQLTypes['uuid'] | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    userId?: GraphQLTypes['uuid'] | undefined;
  };
  /** order by max() on columns of table "UserGroup" */
  ['UserGroup_max_order_by']: {
    groupId?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    userId?: GraphQLTypes['order_by'] | undefined;
  };
  /** aggregate min on columns */
  ['UserGroup_min_fields']: {
    __typename: 'UserGroup_min_fields';
    groupId?: GraphQLTypes['uuid'] | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    userId?: GraphQLTypes['uuid'] | undefined;
  };
  /** order by min() on columns of table "UserGroup" */
  ['UserGroup_min_order_by']: {
    groupId?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    userId?: GraphQLTypes['order_by'] | undefined;
  };
  /** response of any mutation on the table "UserGroup" */
  ['UserGroup_mutation_response']: {
    __typename: 'UserGroup_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['UserGroup']>;
  };
  /** on_conflict condition type for table "UserGroup" */
  ['UserGroup_on_conflict']: {
    constraint: GraphQLTypes['UserGroup_constraint'];
    update_columns: Array<GraphQLTypes['UserGroup_update_column']>;
    where?: GraphQLTypes['UserGroup_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "UserGroup". */
  ['UserGroup_order_by']: {
    group?: GraphQLTypes['Group_order_by'] | undefined;
    groupId?: GraphQLTypes['order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    user?: GraphQLTypes['User_order_by'] | undefined;
    userId?: GraphQLTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: UserGroup */
  ['UserGroup_pk_columns_input']: {
    id: GraphQLTypes['uuid'];
  };
  /** select columns of table "UserGroup" */
  ['UserGroup_select_column']: UserGroup_select_column;
  /** input type for updating data in table "UserGroup" */
  ['UserGroup_set_input']: {
    groupId?: GraphQLTypes['uuid'] | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    userId?: GraphQLTypes['uuid'] | undefined;
  };
  /** Streaming cursor of the table "UserGroup" */
  ['UserGroup_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: GraphQLTypes['UserGroup_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: GraphQLTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['UserGroup_stream_cursor_value_input']: {
    groupId?: GraphQLTypes['uuid'] | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    userId?: GraphQLTypes['uuid'] | undefined;
  };
  /** update columns of table "UserGroup" */
  ['UserGroup_update_column']: UserGroup_update_column;
  ['UserGroup_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: GraphQLTypes['UserGroup_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: GraphQLTypes['UserGroup_bool_exp'];
  };
  /** columns and relationships of "UserRole" */
  ['UserRole']: {
    __typename: 'UserRole';
    id: GraphQLTypes['uuid'];
    /** An object relationship */
    role: GraphQLTypes['Role'];
    roleId: GraphQLTypes['uuid'];
    /** An object relationship */
    user: GraphQLTypes['User'];
    userId: GraphQLTypes['uuid'];
  };
  /** aggregated selection of "UserRole" */
  ['UserRole_aggregate']: {
    __typename: 'UserRole_aggregate';
    aggregate?: GraphQLTypes['UserRole_aggregate_fields'] | undefined;
    nodes: Array<GraphQLTypes['UserRole']>;
  };
  ['UserRole_aggregate_bool_exp']: {
    count?: GraphQLTypes['UserRole_aggregate_bool_exp_count'] | undefined;
  };
  ['UserRole_aggregate_bool_exp_count']: {
    arguments?: Array<GraphQLTypes['UserRole_select_column']> | undefined;
    distinct?: boolean | undefined;
    filter?: GraphQLTypes['UserRole_bool_exp'] | undefined;
    predicate: GraphQLTypes['Int_comparison_exp'];
  };
  /** aggregate fields of "UserRole" */
  ['UserRole_aggregate_fields']: {
    __typename: 'UserRole_aggregate_fields';
    count: number;
    max?: GraphQLTypes['UserRole_max_fields'] | undefined;
    min?: GraphQLTypes['UserRole_min_fields'] | undefined;
  };
  /** order by aggregate values of table "UserRole" */
  ['UserRole_aggregate_order_by']: {
    count?: GraphQLTypes['order_by'] | undefined;
    max?: GraphQLTypes['UserRole_max_order_by'] | undefined;
    min?: GraphQLTypes['UserRole_min_order_by'] | undefined;
  };
  /** input type for inserting array relation for remote table "UserRole" */
  ['UserRole_arr_rel_insert_input']: {
    data: Array<GraphQLTypes['UserRole_insert_input']>;
    /** upsert condition */
    on_conflict?: GraphQLTypes['UserRole_on_conflict'] | undefined;
  };
  /** Boolean expression to filter rows from the table "UserRole". All fields are combined with a logical 'AND'. */
  ['UserRole_bool_exp']: {
    _and?: Array<GraphQLTypes['UserRole_bool_exp']> | undefined;
    _not?: GraphQLTypes['UserRole_bool_exp'] | undefined;
    _or?: Array<GraphQLTypes['UserRole_bool_exp']> | undefined;
    id?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    role?: GraphQLTypes['Role_bool_exp'] | undefined;
    roleId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    user?: GraphQLTypes['User_bool_exp'] | undefined;
    userId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
  };
  /** unique or primary key constraints on table "UserRole" */
  ['UserRole_constraint']: UserRole_constraint;
  /** input type for inserting data into table "UserRole" */
  ['UserRole_insert_input']: {
    id?: GraphQLTypes['uuid'] | undefined;
    role?: GraphQLTypes['Role_obj_rel_insert_input'] | undefined;
    roleId?: GraphQLTypes['uuid'] | undefined;
    user?: GraphQLTypes['User_obj_rel_insert_input'] | undefined;
    userId?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate max on columns */
  ['UserRole_max_fields']: {
    __typename: 'UserRole_max_fields';
    id?: GraphQLTypes['uuid'] | undefined;
    roleId?: GraphQLTypes['uuid'] | undefined;
    userId?: GraphQLTypes['uuid'] | undefined;
  };
  /** order by max() on columns of table "UserRole" */
  ['UserRole_max_order_by']: {
    id?: GraphQLTypes['order_by'] | undefined;
    roleId?: GraphQLTypes['order_by'] | undefined;
    userId?: GraphQLTypes['order_by'] | undefined;
  };
  /** aggregate min on columns */
  ['UserRole_min_fields']: {
    __typename: 'UserRole_min_fields';
    id?: GraphQLTypes['uuid'] | undefined;
    roleId?: GraphQLTypes['uuid'] | undefined;
    userId?: GraphQLTypes['uuid'] | undefined;
  };
  /** order by min() on columns of table "UserRole" */
  ['UserRole_min_order_by']: {
    id?: GraphQLTypes['order_by'] | undefined;
    roleId?: GraphQLTypes['order_by'] | undefined;
    userId?: GraphQLTypes['order_by'] | undefined;
  };
  /** response of any mutation on the table "UserRole" */
  ['UserRole_mutation_response']: {
    __typename: 'UserRole_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['UserRole']>;
  };
  /** on_conflict condition type for table "UserRole" */
  ['UserRole_on_conflict']: {
    constraint: GraphQLTypes['UserRole_constraint'];
    update_columns: Array<GraphQLTypes['UserRole_update_column']>;
    where?: GraphQLTypes['UserRole_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "UserRole". */
  ['UserRole_order_by']: {
    id?: GraphQLTypes['order_by'] | undefined;
    role?: GraphQLTypes['Role_order_by'] | undefined;
    roleId?: GraphQLTypes['order_by'] | undefined;
    user?: GraphQLTypes['User_order_by'] | undefined;
    userId?: GraphQLTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: UserRole */
  ['UserRole_pk_columns_input']: {
    id: GraphQLTypes['uuid'];
  };
  /** select columns of table "UserRole" */
  ['UserRole_select_column']: UserRole_select_column;
  /** input type for updating data in table "UserRole" */
  ['UserRole_set_input']: {
    id?: GraphQLTypes['uuid'] | undefined;
    roleId?: GraphQLTypes['uuid'] | undefined;
    userId?: GraphQLTypes['uuid'] | undefined;
  };
  /** Streaming cursor of the table "UserRole" */
  ['UserRole_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: GraphQLTypes['UserRole_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: GraphQLTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['UserRole_stream_cursor_value_input']: {
    id?: GraphQLTypes['uuid'] | undefined;
    roleId?: GraphQLTypes['uuid'] | undefined;
    userId?: GraphQLTypes['uuid'] | undefined;
  };
  /** update columns of table "UserRole" */
  ['UserRole_update_column']: UserRole_update_column;
  ['UserRole_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: GraphQLTypes['UserRole_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: GraphQLTypes['UserRole_bool_exp'];
  };
  /** columns and relationships of "UserType" */
  ['UserType']: {
    __typename: 'UserType';
    value: string;
  };
  /** aggregated selection of "UserType" */
  ['UserType_aggregate']: {
    __typename: 'UserType_aggregate';
    aggregate?: GraphQLTypes['UserType_aggregate_fields'] | undefined;
    nodes: Array<GraphQLTypes['UserType']>;
  };
  /** aggregate fields of "UserType" */
  ['UserType_aggregate_fields']: {
    __typename: 'UserType_aggregate_fields';
    count: number;
    max?: GraphQLTypes['UserType_max_fields'] | undefined;
    min?: GraphQLTypes['UserType_min_fields'] | undefined;
  };
  /** Boolean expression to filter rows from the table "UserType". All fields are combined with a logical 'AND'. */
  ['UserType_bool_exp']: {
    _and?: Array<GraphQLTypes['UserType_bool_exp']> | undefined;
    _not?: GraphQLTypes['UserType_bool_exp'] | undefined;
    _or?: Array<GraphQLTypes['UserType_bool_exp']> | undefined;
    value?: GraphQLTypes['String_comparison_exp'] | undefined;
  };
  /** unique or primary key constraints on table "UserType" */
  ['UserType_constraint']: UserType_constraint;
  ['UserType_enum']: UserType_enum;
  /** Boolean expression to compare columns of type "UserType_enum". All fields are combined with logical 'AND'. */
  ['UserType_enum_comparison_exp']: {
    _eq?: GraphQLTypes['UserType_enum'] | undefined;
    _in?: Array<GraphQLTypes['UserType_enum']> | undefined;
    _is_null?: boolean | undefined;
    _neq?: GraphQLTypes['UserType_enum'] | undefined;
    _nin?: Array<GraphQLTypes['UserType_enum']> | undefined;
  };
  /** input type for inserting data into table "UserType" */
  ['UserType_insert_input']: {
    value?: string | undefined;
  };
  /** aggregate max on columns */
  ['UserType_max_fields']: {
    __typename: 'UserType_max_fields';
    value?: string | undefined;
  };
  /** aggregate min on columns */
  ['UserType_min_fields']: {
    __typename: 'UserType_min_fields';
    value?: string | undefined;
  };
  /** response of any mutation on the table "UserType" */
  ['UserType_mutation_response']: {
    __typename: 'UserType_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['UserType']>;
  };
  /** on_conflict condition type for table "UserType" */
  ['UserType_on_conflict']: {
    constraint: GraphQLTypes['UserType_constraint'];
    update_columns: Array<GraphQLTypes['UserType_update_column']>;
    where?: GraphQLTypes['UserType_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "UserType". */
  ['UserType_order_by']: {
    value?: GraphQLTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: UserType */
  ['UserType_pk_columns_input']: {
    value: string;
  };
  /** select columns of table "UserType" */
  ['UserType_select_column']: UserType_select_column;
  /** input type for updating data in table "UserType" */
  ['UserType_set_input']: {
    value?: string | undefined;
  };
  /** Streaming cursor of the table "UserType" */
  ['UserType_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: GraphQLTypes['UserType_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: GraphQLTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['UserType_stream_cursor_value_input']: {
    value?: string | undefined;
  };
  /** update columns of table "UserType" */
  ['UserType_update_column']: UserType_update_column;
  ['UserType_updates']: {
    /** sets the columns of the filtered rows to the given values */
    _set?: GraphQLTypes['UserType_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: GraphQLTypes['UserType_bool_exp'];
  };
  /** aggregated selection of "User" */
  ['User_aggregate']: {
    __typename: 'User_aggregate';
    aggregate?: GraphQLTypes['User_aggregate_fields'] | undefined;
    nodes: Array<GraphQLTypes['User']>;
  };
  /** aggregate fields of "User" */
  ['User_aggregate_fields']: {
    __typename: 'User_aggregate_fields';
    avg?: GraphQLTypes['User_avg_fields'] | undefined;
    count: number;
    max?: GraphQLTypes['User_max_fields'] | undefined;
    min?: GraphQLTypes['User_min_fields'] | undefined;
    stddev?: GraphQLTypes['User_stddev_fields'] | undefined;
    stddev_pop?: GraphQLTypes['User_stddev_pop_fields'] | undefined;
    stddev_samp?: GraphQLTypes['User_stddev_samp_fields'] | undefined;
    sum?: GraphQLTypes['User_sum_fields'] | undefined;
    var_pop?: GraphQLTypes['User_var_pop_fields'] | undefined;
    var_samp?: GraphQLTypes['User_var_samp_fields'] | undefined;
    variance?: GraphQLTypes['User_variance_fields'] | undefined;
  };
  /** aggregate avg on columns */
  ['User_avg_fields']: {
    __typename: 'User_avg_fields';
    cursorId?: number | undefined;
  };
  /** Boolean expression to filter rows from the table "User". All fields are combined with a logical 'AND'. */
  ['User_bool_exp']: {
    _and?: Array<GraphQLTypes['User_bool_exp']> | undefined;
    _not?: GraphQLTypes['User_bool_exp'] | undefined;
    _or?: Array<GraphQLTypes['User_bool_exp']> | undefined;
    address?: GraphQLTypes['String_comparison_exp'] | undefined;
    city?: GraphQLTypes['String_comparison_exp'] | undefined;
    country?: GraphQLTypes['String_comparison_exp'] | undefined;
    createdAt?: GraphQLTypes['timestamp_comparison_exp'] | undefined;
    createdById?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    cursorId?: GraphQLTypes['bigint_comparison_exp'] | undefined;
    displayName?: GraphQLTypes['String_comparison_exp'] | undefined;
    email?: GraphQLTypes['String_comparison_exp'] | undefined;
    firstName?: GraphQLTypes['String_comparison_exp'] | undefined;
    groups?: GraphQLTypes['UserGroup_bool_exp'] | undefined;
    groups_aggregate?: GraphQLTypes['UserGroup_aggregate_bool_exp'] | undefined;
    id?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    isMigrated?: GraphQLTypes['Boolean_comparison_exp'] | undefined;
    isTenantAdmin?: GraphQLTypes['Boolean_comparison_exp'] | undefined;
    jobTitle?: GraphQLTypes['String_comparison_exp'] | undefined;
    lastName?: GraphQLTypes['String_comparison_exp'] | undefined;
    organizationId?: GraphQLTypes['String_comparison_exp'] | undefined;
    postalCode?: GraphQLTypes['String_comparison_exp'] | undefined;
    preferredCurrency?: GraphQLTypes['String_comparison_exp'] | undefined;
    profilePictureUrl?: GraphQLTypes['String_comparison_exp'] | undefined;
    role?: GraphQLTypes['String_comparison_exp'] | undefined;
    roles?: GraphQLTypes['UserRole_bool_exp'] | undefined;
    roles_aggregate?: GraphQLTypes['UserRole_aggregate_bool_exp'] | undefined;
    secondaryEmail?: GraphQLTypes['String_comparison_exp'] | undefined;
    state?: GraphQLTypes['String_comparison_exp'] | undefined;
    status?: GraphQLTypes['Status_enum_comparison_exp'] | undefined;
    tenant?: GraphQLTypes['Tenant_bool_exp'] | undefined;
    tenantId?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    updatedAt?: GraphQLTypes['timestamp_comparison_exp'] | undefined;
    updatedById?: GraphQLTypes['uuid_comparison_exp'] | undefined;
    userType?: GraphQLTypes['UserType_enum_comparison_exp'] | undefined;
  };
  /** unique or primary key constraints on table "User" */
  ['User_constraint']: User_constraint;
  /** input type for incrementing numeric columns in table "User" */
  ['User_inc_input']: {
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** input type for inserting data into table "User" */
  ['User_insert_input']: {
    address?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    createdAt?: GraphQLTypes['timestamp'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    displayName?: string | undefined;
    email?: string | undefined;
    firstName?: string | undefined;
    groups?: GraphQLTypes['UserGroup_arr_rel_insert_input'] | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    isMigrated?: boolean | undefined;
    isTenantAdmin?: boolean | undefined;
    jobTitle?: string | undefined;
    lastName?: string | undefined;
    organizationId?: string | undefined;
    postalCode?: string | undefined;
    preferredCurrency?: string | undefined;
    profilePictureUrl?: string | undefined;
    role?: string | undefined;
    roles?: GraphQLTypes['UserRole_arr_rel_insert_input'] | undefined;
    secondaryEmail?: string | undefined;
    state?: string | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenant?: GraphQLTypes['Tenant_obj_rel_insert_input'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamp'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
    userType?: GraphQLTypes['UserType_enum'] | undefined;
  };
  /** aggregate max on columns */
  ['User_max_fields']: {
    __typename: 'User_max_fields';
    address?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    createdAt?: GraphQLTypes['timestamp'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    displayName?: string | undefined;
    email?: string | undefined;
    firstName?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    jobTitle?: string | undefined;
    lastName?: string | undefined;
    organizationId?: string | undefined;
    postalCode?: string | undefined;
    preferredCurrency?: string | undefined;
    profilePictureUrl?: string | undefined;
    role?: string | undefined;
    secondaryEmail?: string | undefined;
    state?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamp'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** aggregate min on columns */
  ['User_min_fields']: {
    __typename: 'User_min_fields';
    address?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    createdAt?: GraphQLTypes['timestamp'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    displayName?: string | undefined;
    email?: string | undefined;
    firstName?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    jobTitle?: string | undefined;
    lastName?: string | undefined;
    organizationId?: string | undefined;
    postalCode?: string | undefined;
    preferredCurrency?: string | undefined;
    profilePictureUrl?: string | undefined;
    role?: string | undefined;
    secondaryEmail?: string | undefined;
    state?: string | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamp'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
  };
  /** response of any mutation on the table "User" */
  ['User_mutation_response']: {
    __typename: 'User_mutation_response';
    /** number of rows affected by the mutation */
    affected_rows: number;
    /** data from the rows affected by the mutation */
    returning: Array<GraphQLTypes['User']>;
  };
  /** input type for inserting object relation for remote table "User" */
  ['User_obj_rel_insert_input']: {
    data: GraphQLTypes['User_insert_input'];
    /** upsert condition */
    on_conflict?: GraphQLTypes['User_on_conflict'] | undefined;
  };
  /** on_conflict condition type for table "User" */
  ['User_on_conflict']: {
    constraint: GraphQLTypes['User_constraint'];
    update_columns: Array<GraphQLTypes['User_update_column']>;
    where?: GraphQLTypes['User_bool_exp'] | undefined;
  };
  /** Ordering options when selecting data from "User". */
  ['User_order_by']: {
    address?: GraphQLTypes['order_by'] | undefined;
    city?: GraphQLTypes['order_by'] | undefined;
    country?: GraphQLTypes['order_by'] | undefined;
    createdAt?: GraphQLTypes['order_by'] | undefined;
    createdById?: GraphQLTypes['order_by'] | undefined;
    cursorId?: GraphQLTypes['order_by'] | undefined;
    displayName?: GraphQLTypes['order_by'] | undefined;
    email?: GraphQLTypes['order_by'] | undefined;
    firstName?: GraphQLTypes['order_by'] | undefined;
    groups_aggregate?: GraphQLTypes['UserGroup_aggregate_order_by'] | undefined;
    id?: GraphQLTypes['order_by'] | undefined;
    isMigrated?: GraphQLTypes['order_by'] | undefined;
    isTenantAdmin?: GraphQLTypes['order_by'] | undefined;
    jobTitle?: GraphQLTypes['order_by'] | undefined;
    lastName?: GraphQLTypes['order_by'] | undefined;
    organizationId?: GraphQLTypes['order_by'] | undefined;
    postalCode?: GraphQLTypes['order_by'] | undefined;
    preferredCurrency?: GraphQLTypes['order_by'] | undefined;
    profilePictureUrl?: GraphQLTypes['order_by'] | undefined;
    role?: GraphQLTypes['order_by'] | undefined;
    roles_aggregate?: GraphQLTypes['UserRole_aggregate_order_by'] | undefined;
    secondaryEmail?: GraphQLTypes['order_by'] | undefined;
    state?: GraphQLTypes['order_by'] | undefined;
    status?: GraphQLTypes['order_by'] | undefined;
    tenant?: GraphQLTypes['Tenant_order_by'] | undefined;
    tenantId?: GraphQLTypes['order_by'] | undefined;
    updatedAt?: GraphQLTypes['order_by'] | undefined;
    updatedById?: GraphQLTypes['order_by'] | undefined;
    userType?: GraphQLTypes['order_by'] | undefined;
  };
  /** primary key columns input for table: User */
  ['User_pk_columns_input']: {
    id: GraphQLTypes['uuid'];
  };
  /** select columns of table "User" */
  ['User_select_column']: User_select_column;
  /** input type for updating data in table "User" */
  ['User_set_input']: {
    address?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    createdAt?: GraphQLTypes['timestamp'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    displayName?: string | undefined;
    email?: string | undefined;
    firstName?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    isMigrated?: boolean | undefined;
    isTenantAdmin?: boolean | undefined;
    jobTitle?: string | undefined;
    lastName?: string | undefined;
    organizationId?: string | undefined;
    postalCode?: string | undefined;
    preferredCurrency?: string | undefined;
    profilePictureUrl?: string | undefined;
    role?: string | undefined;
    secondaryEmail?: string | undefined;
    state?: string | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamp'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
    userType?: GraphQLTypes['UserType_enum'] | undefined;
  };
  /** aggregate stddev on columns */
  ['User_stddev_fields']: {
    __typename: 'User_stddev_fields';
    cursorId?: number | undefined;
  };
  /** aggregate stddev_pop on columns */
  ['User_stddev_pop_fields']: {
    __typename: 'User_stddev_pop_fields';
    cursorId?: number | undefined;
  };
  /** aggregate stddev_samp on columns */
  ['User_stddev_samp_fields']: {
    __typename: 'User_stddev_samp_fields';
    cursorId?: number | undefined;
  };
  /** Streaming cursor of the table "User" */
  ['User_stream_cursor_input']: {
    /** Stream column input with initial value */
    initial_value: GraphQLTypes['User_stream_cursor_value_input'];
    /** cursor ordering */
    ordering?: GraphQLTypes['cursor_ordering'] | undefined;
  };
  /** Initial value of the column from where the streaming should start */
  ['User_stream_cursor_value_input']: {
    address?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    createdAt?: GraphQLTypes['timestamp'] | undefined;
    createdById?: GraphQLTypes['uuid'] | undefined;
    cursorId?: GraphQLTypes['bigint'] | undefined;
    displayName?: string | undefined;
    email?: string | undefined;
    firstName?: string | undefined;
    id?: GraphQLTypes['uuid'] | undefined;
    isMigrated?: boolean | undefined;
    isTenantAdmin?: boolean | undefined;
    jobTitle?: string | undefined;
    lastName?: string | undefined;
    organizationId?: string | undefined;
    postalCode?: string | undefined;
    preferredCurrency?: string | undefined;
    profilePictureUrl?: string | undefined;
    role?: string | undefined;
    secondaryEmail?: string | undefined;
    state?: string | undefined;
    status?: GraphQLTypes['Status_enum'] | undefined;
    tenantId?: GraphQLTypes['uuid'] | undefined;
    updatedAt?: GraphQLTypes['timestamp'] | undefined;
    updatedById?: GraphQLTypes['uuid'] | undefined;
    userType?: GraphQLTypes['UserType_enum'] | undefined;
  };
  /** aggregate sum on columns */
  ['User_sum_fields']: {
    __typename: 'User_sum_fields';
    cursorId?: GraphQLTypes['bigint'] | undefined;
  };
  /** update columns of table "User" */
  ['User_update_column']: User_update_column;
  ['User_updates']: {
    /** increments the numeric columns with given value of the filtered values */
    _inc?: GraphQLTypes['User_inc_input'] | undefined;
    /** sets the columns of the filtered rows to the given values */
    _set?: GraphQLTypes['User_set_input'] | undefined;
    /** filter the rows which have to be updated */
    where: GraphQLTypes['User_bool_exp'];
  };
  /** aggregate var_pop on columns */
  ['User_var_pop_fields']: {
    __typename: 'User_var_pop_fields';
    cursorId?: number | undefined;
  };
  /** aggregate var_samp on columns */
  ['User_var_samp_fields']: {
    __typename: 'User_var_samp_fields';
    cursorId?: number | undefined;
  };
  /** aggregate variance on columns */
  ['User_variance_fields']: {
    __typename: 'User_variance_fields';
    cursorId?: number | undefined;
  };
  ['bigint']: 'scalar' & { name: 'bigint' };
  /** Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'. */
  ['bigint_comparison_exp']: {
    _eq?: GraphQLTypes['bigint'] | undefined;
    _gt?: GraphQLTypes['bigint'] | undefined;
    _gte?: GraphQLTypes['bigint'] | undefined;
    _in?: Array<GraphQLTypes['bigint']> | undefined;
    _is_null?: boolean | undefined;
    _lt?: GraphQLTypes['bigint'] | undefined;
    _lte?: GraphQLTypes['bigint'] | undefined;
    _neq?: GraphQLTypes['bigint'] | undefined;
    _nin?: Array<GraphQLTypes['bigint']> | undefined;
  };
  /** ordering argument of a cursor */
  ['cursor_ordering']: cursor_ordering;
  /** mutation root */
  ['mutation_root']: {
    __typename: 'mutation_root';
    /** delete data from the table: "Application" */
    delete_Application?:
      | GraphQLTypes['Application_mutation_response']
      | undefined;
    /** delete data from the table: "ApplicationIntegration" */
    delete_ApplicationIntegration?:
      | GraphQLTypes['ApplicationIntegration_mutation_response']
      | undefined;
    /** delete single row from the table: "ApplicationIntegration" */
    delete_ApplicationIntegration_by_pk?:
      | GraphQLTypes['ApplicationIntegration']
      | undefined;
    /** delete single row from the table: "Application" */
    delete_Application_by_pk?: GraphQLTypes['Application'] | undefined;
    /** delete data from the table: "CaseSeverity" */
    delete_CaseSeverity?:
      | GraphQLTypes['CaseSeverity_mutation_response']
      | undefined;
    /** delete single row from the table: "CaseSeverity" */
    delete_CaseSeverity_by_pk?: GraphQLTypes['CaseSeverity'] | undefined;
    /** delete data from the table: "ClosureReason" */
    delete_ClosureReason?:
      | GraphQLTypes['ClosureReason_mutation_response']
      | undefined;
    /** delete single row from the table: "ClosureReason" */
    delete_ClosureReason_by_pk?: GraphQLTypes['ClosureReason'] | undefined;
    /** delete data from the table: "Currency" */
    delete_Currency?: GraphQLTypes['Currency_mutation_response'] | undefined;
    /** delete single row from the table: "Currency" */
    delete_Currency_by_pk?: GraphQLTypes['Currency'] | undefined;
    /** delete data from the table: "CustomRole" */
    delete_CustomRole?:
      | GraphQLTypes['CustomRole_mutation_response']
      | undefined;
    /** delete single row from the table: "CustomRole" */
    delete_CustomRole_by_pk?: GraphQLTypes['CustomRole'] | undefined;
    /** delete data from the table: "Group" */
    delete_Group?: GraphQLTypes['Group_mutation_response'] | undefined;
    /** delete data from the table: "GroupRole" */
    delete_GroupRole?: GraphQLTypes['GroupRole_mutation_response'] | undefined;
    /** delete single row from the table: "GroupRole" */
    delete_GroupRole_by_pk?: GraphQLTypes['GroupRole'] | undefined;
    /** delete single row from the table: "Group" */
    delete_Group_by_pk?: GraphQLTypes['Group'] | undefined;
    /** delete data from the table: "Industry" */
    delete_Industry?: GraphQLTypes['Industry_mutation_response'] | undefined;
    /** delete single row from the table: "Industry" */
    delete_Industry_by_pk?: GraphQLTypes['Industry'] | undefined;
    /** delete data from the table: "IssueCategory" */
    delete_IssueCategory?:
      | GraphQLTypes['IssueCategory_mutation_response']
      | undefined;
    /** delete single row from the table: "IssueCategory" */
    delete_IssueCategory_by_pk?: GraphQLTypes['IssueCategory'] | undefined;
    /** delete data from the table: "Object" */
    delete_Object?: GraphQLTypes['Object_mutation_response'] | undefined;
    /** delete single row from the table: "Object" */
    delete_Object_by_pk?: GraphQLTypes['Object'] | undefined;
    /** delete data from the table: "Organization" */
    delete_Organization?:
      | GraphQLTypes['Organization_mutation_response']
      | undefined;
    /** delete single row from the table: "Organization" */
    delete_Organization_by_pk?: GraphQLTypes['Organization'] | undefined;
    /** delete data from the table: "Package" */
    delete_Package?: GraphQLTypes['Package_mutation_response'] | undefined;
    /** delete data from the table: "PackageApplication" */
    delete_PackageApplication?:
      | GraphQLTypes['PackageApplication_mutation_response']
      | undefined;
    /** delete single row from the table: "PackageApplication" */
    delete_PackageApplication_by_pk?:
      | GraphQLTypes['PackageApplication']
      | undefined;
    /** delete single row from the table: "Package" */
    delete_Package_by_pk?: GraphQLTypes['Package'] | undefined;
    /** delete data from the table: "Product" */
    delete_Product?: GraphQLTypes['Product_mutation_response'] | undefined;
    /** delete data from the table: "ProductCategory" */
    delete_ProductCategory?:
      | GraphQLTypes['ProductCategory_mutation_response']
      | undefined;
    /** delete single row from the table: "ProductCategory" */
    delete_ProductCategory_by_pk?: GraphQLTypes['ProductCategory'] | undefined;
    /** delete data from the table: "ProductVersion" */
    delete_ProductVersion?:
      | GraphQLTypes['ProductVersion_mutation_response']
      | undefined;
    /** delete single row from the table: "ProductVersion" */
    delete_ProductVersion_by_pk?: GraphQLTypes['ProductVersion'] | undefined;
    /** delete single row from the table: "Product" */
    delete_Product_by_pk?: GraphQLTypes['Product'] | undefined;
    /** delete data from the table: "Role" */
    delete_Role?: GraphQLTypes['Role_mutation_response'] | undefined;
    /** delete single row from the table: "Role" */
    delete_Role_by_pk?: GraphQLTypes['Role'] | undefined;
    /** delete data from the table: "Status" */
    delete_Status?: GraphQLTypes['Status_mutation_response'] | undefined;
    /** delete single row from the table: "Status" */
    delete_Status_by_pk?: GraphQLTypes['Status'] | undefined;
    /** delete data from the table: "Task" */
    delete_Task?: GraphQLTypes['Task_mutation_response'] | undefined;
    /** delete single row from the table: "Task" */
    delete_Task_by_pk?: GraphQLTypes['Task'] | undefined;
    /** delete data from the table: "Tenant" */
    delete_Tenant?: GraphQLTypes['Tenant_mutation_response'] | undefined;
    /** delete data from the table: "TenantPackage" */
    delete_TenantPackage?:
      | GraphQLTypes['TenantPackage_mutation_response']
      | undefined;
    /** delete single row from the table: "TenantPackage" */
    delete_TenantPackage_by_pk?: GraphQLTypes['TenantPackage'] | undefined;
    /** delete single row from the table: "Tenant" */
    delete_Tenant_by_pk?: GraphQLTypes['Tenant'] | undefined;
    /** delete data from the table: "User" */
    delete_User?: GraphQLTypes['User_mutation_response'] | undefined;
    /** delete data from the table: "UserGroup" */
    delete_UserGroup?: GraphQLTypes['UserGroup_mutation_response'] | undefined;
    /** delete single row from the table: "UserGroup" */
    delete_UserGroup_by_pk?: GraphQLTypes['UserGroup'] | undefined;
    /** delete data from the table: "UserRole" */
    delete_UserRole?: GraphQLTypes['UserRole_mutation_response'] | undefined;
    /** delete single row from the table: "UserRole" */
    delete_UserRole_by_pk?: GraphQLTypes['UserRole'] | undefined;
    /** delete data from the table: "UserType" */
    delete_UserType?: GraphQLTypes['UserType_mutation_response'] | undefined;
    /** delete single row from the table: "UserType" */
    delete_UserType_by_pk?: GraphQLTypes['UserType'] | undefined;
    /** delete single row from the table: "User" */
    delete_User_by_pk?: GraphQLTypes['User'] | undefined;
    /** insert data into the table: "Application" */
    insert_Application?:
      | GraphQLTypes['Application_mutation_response']
      | undefined;
    /** insert data into the table: "ApplicationIntegration" */
    insert_ApplicationIntegration?:
      | GraphQLTypes['ApplicationIntegration_mutation_response']
      | undefined;
    /** insert a single row into the table: "ApplicationIntegration" */
    insert_ApplicationIntegration_one?:
      | GraphQLTypes['ApplicationIntegration']
      | undefined;
    /** insert a single row into the table: "Application" */
    insert_Application_one?: GraphQLTypes['Application'] | undefined;
    /** insert data into the table: "CaseSeverity" */
    insert_CaseSeverity?:
      | GraphQLTypes['CaseSeverity_mutation_response']
      | undefined;
    /** insert a single row into the table: "CaseSeverity" */
    insert_CaseSeverity_one?: GraphQLTypes['CaseSeverity'] | undefined;
    /** insert data into the table: "ClosureReason" */
    insert_ClosureReason?:
      | GraphQLTypes['ClosureReason_mutation_response']
      | undefined;
    /** insert a single row into the table: "ClosureReason" */
    insert_ClosureReason_one?: GraphQLTypes['ClosureReason'] | undefined;
    /** insert data into the table: "Currency" */
    insert_Currency?: GraphQLTypes['Currency_mutation_response'] | undefined;
    /** insert a single row into the table: "Currency" */
    insert_Currency_one?: GraphQLTypes['Currency'] | undefined;
    /** insert data into the table: "CustomRole" */
    insert_CustomRole?:
      | GraphQLTypes['CustomRole_mutation_response']
      | undefined;
    /** insert a single row into the table: "CustomRole" */
    insert_CustomRole_one?: GraphQLTypes['CustomRole'] | undefined;
    /** insert data into the table: "Group" */
    insert_Group?: GraphQLTypes['Group_mutation_response'] | undefined;
    /** insert data into the table: "GroupRole" */
    insert_GroupRole?: GraphQLTypes['GroupRole_mutation_response'] | undefined;
    /** insert a single row into the table: "GroupRole" */
    insert_GroupRole_one?: GraphQLTypes['GroupRole'] | undefined;
    /** insert a single row into the table: "Group" */
    insert_Group_one?: GraphQLTypes['Group'] | undefined;
    /** insert data into the table: "Industry" */
    insert_Industry?: GraphQLTypes['Industry_mutation_response'] | undefined;
    /** insert a single row into the table: "Industry" */
    insert_Industry_one?: GraphQLTypes['Industry'] | undefined;
    /** insert data into the table: "IssueCategory" */
    insert_IssueCategory?:
      | GraphQLTypes['IssueCategory_mutation_response']
      | undefined;
    /** insert a single row into the table: "IssueCategory" */
    insert_IssueCategory_one?: GraphQLTypes['IssueCategory'] | undefined;
    /** insert data into the table: "Object" */
    insert_Object?: GraphQLTypes['Object_mutation_response'] | undefined;
    /** insert a single row into the table: "Object" */
    insert_Object_one?: GraphQLTypes['Object'] | undefined;
    /** insert data into the table: "Organization" */
    insert_Organization?:
      | GraphQLTypes['Organization_mutation_response']
      | undefined;
    /** insert a single row into the table: "Organization" */
    insert_Organization_one?: GraphQLTypes['Organization'] | undefined;
    /** insert data into the table: "Package" */
    insert_Package?: GraphQLTypes['Package_mutation_response'] | undefined;
    /** insert data into the table: "PackageApplication" */
    insert_PackageApplication?:
      | GraphQLTypes['PackageApplication_mutation_response']
      | undefined;
    /** insert a single row into the table: "PackageApplication" */
    insert_PackageApplication_one?:
      | GraphQLTypes['PackageApplication']
      | undefined;
    /** insert a single row into the table: "Package" */
    insert_Package_one?: GraphQLTypes['Package'] | undefined;
    /** insert data into the table: "Product" */
    insert_Product?: GraphQLTypes['Product_mutation_response'] | undefined;
    /** insert data into the table: "ProductCategory" */
    insert_ProductCategory?:
      | GraphQLTypes['ProductCategory_mutation_response']
      | undefined;
    /** insert a single row into the table: "ProductCategory" */
    insert_ProductCategory_one?: GraphQLTypes['ProductCategory'] | undefined;
    /** insert data into the table: "ProductVersion" */
    insert_ProductVersion?:
      | GraphQLTypes['ProductVersion_mutation_response']
      | undefined;
    /** insert a single row into the table: "ProductVersion" */
    insert_ProductVersion_one?: GraphQLTypes['ProductVersion'] | undefined;
    /** insert a single row into the table: "Product" */
    insert_Product_one?: GraphQLTypes['Product'] | undefined;
    /** insert data into the table: "Role" */
    insert_Role?: GraphQLTypes['Role_mutation_response'] | undefined;
    /** insert a single row into the table: "Role" */
    insert_Role_one?: GraphQLTypes['Role'] | undefined;
    /** insert data into the table: "Status" */
    insert_Status?: GraphQLTypes['Status_mutation_response'] | undefined;
    /** insert a single row into the table: "Status" */
    insert_Status_one?: GraphQLTypes['Status'] | undefined;
    /** insert data into the table: "Task" */
    insert_Task?: GraphQLTypes['Task_mutation_response'] | undefined;
    /** insert a single row into the table: "Task" */
    insert_Task_one?: GraphQLTypes['Task'] | undefined;
    /** insert data into the table: "Tenant" */
    insert_Tenant?: GraphQLTypes['Tenant_mutation_response'] | undefined;
    /** insert data into the table: "TenantPackage" */
    insert_TenantPackage?:
      | GraphQLTypes['TenantPackage_mutation_response']
      | undefined;
    /** insert a single row into the table: "TenantPackage" */
    insert_TenantPackage_one?: GraphQLTypes['TenantPackage'] | undefined;
    /** insert a single row into the table: "Tenant" */
    insert_Tenant_one?: GraphQLTypes['Tenant'] | undefined;
    /** insert data into the table: "User" */
    insert_User?: GraphQLTypes['User_mutation_response'] | undefined;
    /** insert data into the table: "UserGroup" */
    insert_UserGroup?: GraphQLTypes['UserGroup_mutation_response'] | undefined;
    /** insert a single row into the table: "UserGroup" */
    insert_UserGroup_one?: GraphQLTypes['UserGroup'] | undefined;
    /** insert data into the table: "UserRole" */
    insert_UserRole?: GraphQLTypes['UserRole_mutation_response'] | undefined;
    /** insert a single row into the table: "UserRole" */
    insert_UserRole_one?: GraphQLTypes['UserRole'] | undefined;
    /** insert data into the table: "UserType" */
    insert_UserType?: GraphQLTypes['UserType_mutation_response'] | undefined;
    /** insert a single row into the table: "UserType" */
    insert_UserType_one?: GraphQLTypes['UserType'] | undefined;
    /** insert a single row into the table: "User" */
    insert_User_one?: GraphQLTypes['User'] | undefined;
    /** update data of the table: "Application" */
    update_Application?:
      | GraphQLTypes['Application_mutation_response']
      | undefined;
    /** update data of the table: "ApplicationIntegration" */
    update_ApplicationIntegration?:
      | GraphQLTypes['ApplicationIntegration_mutation_response']
      | undefined;
    /** update single row of the table: "ApplicationIntegration" */
    update_ApplicationIntegration_by_pk?:
      | GraphQLTypes['ApplicationIntegration']
      | undefined;
    /** update multiples rows of table: "ApplicationIntegration" */
    update_ApplicationIntegration_many?:
      | Array<
          GraphQLTypes['ApplicationIntegration_mutation_response'] | undefined
        >
      | undefined;
    /** update single row of the table: "Application" */
    update_Application_by_pk?: GraphQLTypes['Application'] | undefined;
    /** update multiples rows of table: "Application" */
    update_Application_many?:
      | Array<GraphQLTypes['Application_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "CaseSeverity" */
    update_CaseSeverity?:
      | GraphQLTypes['CaseSeverity_mutation_response']
      | undefined;
    /** update single row of the table: "CaseSeverity" */
    update_CaseSeverity_by_pk?: GraphQLTypes['CaseSeverity'] | undefined;
    /** update multiples rows of table: "CaseSeverity" */
    update_CaseSeverity_many?:
      | Array<GraphQLTypes['CaseSeverity_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "ClosureReason" */
    update_ClosureReason?:
      | GraphQLTypes['ClosureReason_mutation_response']
      | undefined;
    /** update single row of the table: "ClosureReason" */
    update_ClosureReason_by_pk?: GraphQLTypes['ClosureReason'] | undefined;
    /** update multiples rows of table: "ClosureReason" */
    update_ClosureReason_many?:
      | Array<GraphQLTypes['ClosureReason_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "Currency" */
    update_Currency?: GraphQLTypes['Currency_mutation_response'] | undefined;
    /** update single row of the table: "Currency" */
    update_Currency_by_pk?: GraphQLTypes['Currency'] | undefined;
    /** update multiples rows of table: "Currency" */
    update_Currency_many?:
      | Array<GraphQLTypes['Currency_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "CustomRole" */
    update_CustomRole?:
      | GraphQLTypes['CustomRole_mutation_response']
      | undefined;
    /** update single row of the table: "CustomRole" */
    update_CustomRole_by_pk?: GraphQLTypes['CustomRole'] | undefined;
    /** update multiples rows of table: "CustomRole" */
    update_CustomRole_many?:
      | Array<GraphQLTypes['CustomRole_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "Group" */
    update_Group?: GraphQLTypes['Group_mutation_response'] | undefined;
    /** update data of the table: "GroupRole" */
    update_GroupRole?: GraphQLTypes['GroupRole_mutation_response'] | undefined;
    /** update single row of the table: "GroupRole" */
    update_GroupRole_by_pk?: GraphQLTypes['GroupRole'] | undefined;
    /** update multiples rows of table: "GroupRole" */
    update_GroupRole_many?:
      | Array<GraphQLTypes['GroupRole_mutation_response'] | undefined>
      | undefined;
    /** update single row of the table: "Group" */
    update_Group_by_pk?: GraphQLTypes['Group'] | undefined;
    /** update multiples rows of table: "Group" */
    update_Group_many?:
      | Array<GraphQLTypes['Group_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "Industry" */
    update_Industry?: GraphQLTypes['Industry_mutation_response'] | undefined;
    /** update single row of the table: "Industry" */
    update_Industry_by_pk?: GraphQLTypes['Industry'] | undefined;
    /** update multiples rows of table: "Industry" */
    update_Industry_many?:
      | Array<GraphQLTypes['Industry_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "IssueCategory" */
    update_IssueCategory?:
      | GraphQLTypes['IssueCategory_mutation_response']
      | undefined;
    /** update single row of the table: "IssueCategory" */
    update_IssueCategory_by_pk?: GraphQLTypes['IssueCategory'] | undefined;
    /** update multiples rows of table: "IssueCategory" */
    update_IssueCategory_many?:
      | Array<GraphQLTypes['IssueCategory_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "Object" */
    update_Object?: GraphQLTypes['Object_mutation_response'] | undefined;
    /** update single row of the table: "Object" */
    update_Object_by_pk?: GraphQLTypes['Object'] | undefined;
    /** update multiples rows of table: "Object" */
    update_Object_many?:
      | Array<GraphQLTypes['Object_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "Organization" */
    update_Organization?:
      | GraphQLTypes['Organization_mutation_response']
      | undefined;
    /** update single row of the table: "Organization" */
    update_Organization_by_pk?: GraphQLTypes['Organization'] | undefined;
    /** update multiples rows of table: "Organization" */
    update_Organization_many?:
      | Array<GraphQLTypes['Organization_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "Package" */
    update_Package?: GraphQLTypes['Package_mutation_response'] | undefined;
    /** update data of the table: "PackageApplication" */
    update_PackageApplication?:
      | GraphQLTypes['PackageApplication_mutation_response']
      | undefined;
    /** update single row of the table: "PackageApplication" */
    update_PackageApplication_by_pk?:
      | GraphQLTypes['PackageApplication']
      | undefined;
    /** update multiples rows of table: "PackageApplication" */
    update_PackageApplication_many?:
      | Array<GraphQLTypes['PackageApplication_mutation_response'] | undefined>
      | undefined;
    /** update single row of the table: "Package" */
    update_Package_by_pk?: GraphQLTypes['Package'] | undefined;
    /** update multiples rows of table: "Package" */
    update_Package_many?:
      | Array<GraphQLTypes['Package_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "Product" */
    update_Product?: GraphQLTypes['Product_mutation_response'] | undefined;
    /** update data of the table: "ProductCategory" */
    update_ProductCategory?:
      | GraphQLTypes['ProductCategory_mutation_response']
      | undefined;
    /** update single row of the table: "ProductCategory" */
    update_ProductCategory_by_pk?: GraphQLTypes['ProductCategory'] | undefined;
    /** update multiples rows of table: "ProductCategory" */
    update_ProductCategory_many?:
      | Array<GraphQLTypes['ProductCategory_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "ProductVersion" */
    update_ProductVersion?:
      | GraphQLTypes['ProductVersion_mutation_response']
      | undefined;
    /** update single row of the table: "ProductVersion" */
    update_ProductVersion_by_pk?: GraphQLTypes['ProductVersion'] | undefined;
    /** update multiples rows of table: "ProductVersion" */
    update_ProductVersion_many?:
      | Array<GraphQLTypes['ProductVersion_mutation_response'] | undefined>
      | undefined;
    /** update single row of the table: "Product" */
    update_Product_by_pk?: GraphQLTypes['Product'] | undefined;
    /** update multiples rows of table: "Product" */
    update_Product_many?:
      | Array<GraphQLTypes['Product_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "Role" */
    update_Role?: GraphQLTypes['Role_mutation_response'] | undefined;
    /** update single row of the table: "Role" */
    update_Role_by_pk?: GraphQLTypes['Role'] | undefined;
    /** update multiples rows of table: "Role" */
    update_Role_many?:
      | Array<GraphQLTypes['Role_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "Status" */
    update_Status?: GraphQLTypes['Status_mutation_response'] | undefined;
    /** update single row of the table: "Status" */
    update_Status_by_pk?: GraphQLTypes['Status'] | undefined;
    /** update multiples rows of table: "Status" */
    update_Status_many?:
      | Array<GraphQLTypes['Status_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "Task" */
    update_Task?: GraphQLTypes['Task_mutation_response'] | undefined;
    /** update single row of the table: "Task" */
    update_Task_by_pk?: GraphQLTypes['Task'] | undefined;
    /** update multiples rows of table: "Task" */
    update_Task_many?:
      | Array<GraphQLTypes['Task_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "Tenant" */
    update_Tenant?: GraphQLTypes['Tenant_mutation_response'] | undefined;
    /** update data of the table: "TenantPackage" */
    update_TenantPackage?:
      | GraphQLTypes['TenantPackage_mutation_response']
      | undefined;
    /** update single row of the table: "TenantPackage" */
    update_TenantPackage_by_pk?: GraphQLTypes['TenantPackage'] | undefined;
    /** update multiples rows of table: "TenantPackage" */
    update_TenantPackage_many?:
      | Array<GraphQLTypes['TenantPackage_mutation_response'] | undefined>
      | undefined;
    /** update single row of the table: "Tenant" */
    update_Tenant_by_pk?: GraphQLTypes['Tenant'] | undefined;
    /** update multiples rows of table: "Tenant" */
    update_Tenant_many?:
      | Array<GraphQLTypes['Tenant_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "User" */
    update_User?: GraphQLTypes['User_mutation_response'] | undefined;
    /** update data of the table: "UserGroup" */
    update_UserGroup?: GraphQLTypes['UserGroup_mutation_response'] | undefined;
    /** update single row of the table: "UserGroup" */
    update_UserGroup_by_pk?: GraphQLTypes['UserGroup'] | undefined;
    /** update multiples rows of table: "UserGroup" */
    update_UserGroup_many?:
      | Array<GraphQLTypes['UserGroup_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "UserRole" */
    update_UserRole?: GraphQLTypes['UserRole_mutation_response'] | undefined;
    /** update single row of the table: "UserRole" */
    update_UserRole_by_pk?: GraphQLTypes['UserRole'] | undefined;
    /** update multiples rows of table: "UserRole" */
    update_UserRole_many?:
      | Array<GraphQLTypes['UserRole_mutation_response'] | undefined>
      | undefined;
    /** update data of the table: "UserType" */
    update_UserType?: GraphQLTypes['UserType_mutation_response'] | undefined;
    /** update single row of the table: "UserType" */
    update_UserType_by_pk?: GraphQLTypes['UserType'] | undefined;
    /** update multiples rows of table: "UserType" */
    update_UserType_many?:
      | Array<GraphQLTypes['UserType_mutation_response'] | undefined>
      | undefined;
    /** update single row of the table: "User" */
    update_User_by_pk?: GraphQLTypes['User'] | undefined;
    /** update multiples rows of table: "User" */
    update_User_many?:
      | Array<GraphQLTypes['User_mutation_response'] | undefined>
      | undefined;
  };
  /** column ordering options */
  ['order_by']: order_by;
  ['query_root']: {
    __typename: 'query_root';
    /** fetch data from the table: "Application" */
    Application: Array<GraphQLTypes['Application']>;
    /** fetch data from the table: "ApplicationIntegration" */
    ApplicationIntegration: Array<GraphQLTypes['ApplicationIntegration']>;
    /** fetch aggregated fields from the table: "ApplicationIntegration" */
    ApplicationIntegration_aggregate: GraphQLTypes['ApplicationIntegration_aggregate'];
    /** fetch data from the table: "ApplicationIntegration" using primary key columns */
    ApplicationIntegration_by_pk?:
      | GraphQLTypes['ApplicationIntegration']
      | undefined;
    /** fetch aggregated fields from the table: "Application" */
    Application_aggregate: GraphQLTypes['Application_aggregate'];
    /** fetch data from the table: "Application" using primary key columns */
    Application_by_pk?: GraphQLTypes['Application'] | undefined;
    /** fetch data from the table: "CaseSeverity" */
    CaseSeverity: Array<GraphQLTypes['CaseSeverity']>;
    /** fetch aggregated fields from the table: "CaseSeverity" */
    CaseSeverity_aggregate: GraphQLTypes['CaseSeverity_aggregate'];
    /** fetch data from the table: "CaseSeverity" using primary key columns */
    CaseSeverity_by_pk?: GraphQLTypes['CaseSeverity'] | undefined;
    /** fetch data from the table: "ClosureReason" */
    ClosureReason: Array<GraphQLTypes['ClosureReason']>;
    /** fetch aggregated fields from the table: "ClosureReason" */
    ClosureReason_aggregate: GraphQLTypes['ClosureReason_aggregate'];
    /** fetch data from the table: "ClosureReason" using primary key columns */
    ClosureReason_by_pk?: GraphQLTypes['ClosureReason'] | undefined;
    /** fetch data from the table: "Currency" */
    Currency: Array<GraphQLTypes['Currency']>;
    /** fetch aggregated fields from the table: "Currency" */
    Currency_aggregate: GraphQLTypes['Currency_aggregate'];
    /** fetch data from the table: "Currency" using primary key columns */
    Currency_by_pk?: GraphQLTypes['Currency'] | undefined;
    /** fetch data from the table: "CustomRole" */
    CustomRole: Array<GraphQLTypes['CustomRole']>;
    /** fetch aggregated fields from the table: "CustomRole" */
    CustomRole_aggregate: GraphQLTypes['CustomRole_aggregate'];
    /** fetch data from the table: "CustomRole" using primary key columns */
    CustomRole_by_pk?: GraphQLTypes['CustomRole'] | undefined;
    /** fetch data from the table: "Group" */
    Group: Array<GraphQLTypes['Group']>;
    /** fetch data from the table: "GroupRole" */
    GroupRole: Array<GraphQLTypes['GroupRole']>;
    /** fetch aggregated fields from the table: "GroupRole" */
    GroupRole_aggregate: GraphQLTypes['GroupRole_aggregate'];
    /** fetch data from the table: "GroupRole" using primary key columns */
    GroupRole_by_pk?: GraphQLTypes['GroupRole'] | undefined;
    /** fetch aggregated fields from the table: "Group" */
    Group_aggregate: GraphQLTypes['Group_aggregate'];
    /** fetch data from the table: "Group" using primary key columns */
    Group_by_pk?: GraphQLTypes['Group'] | undefined;
    /** fetch data from the table: "Industry" */
    Industry: Array<GraphQLTypes['Industry']>;
    /** fetch aggregated fields from the table: "Industry" */
    Industry_aggregate: GraphQLTypes['Industry_aggregate'];
    /** fetch data from the table: "Industry" using primary key columns */
    Industry_by_pk?: GraphQLTypes['Industry'] | undefined;
    /** fetch data from the table: "IssueCategory" */
    IssueCategory: Array<GraphQLTypes['IssueCategory']>;
    /** fetch aggregated fields from the table: "IssueCategory" */
    IssueCategory_aggregate: GraphQLTypes['IssueCategory_aggregate'];
    /** fetch data from the table: "IssueCategory" using primary key columns */
    IssueCategory_by_pk?: GraphQLTypes['IssueCategory'] | undefined;
    /** fetch data from the table: "Object" */
    Object: Array<GraphQLTypes['Object']>;
    /** fetch aggregated fields from the table: "Object" */
    Object_aggregate: GraphQLTypes['Object_aggregate'];
    /** fetch data from the table: "Object" using primary key columns */
    Object_by_pk?: GraphQLTypes['Object'] | undefined;
    /** fetch data from the table: "Organization" */
    Organization: Array<GraphQLTypes['Organization']>;
    /** fetch aggregated fields from the table: "Organization" */
    Organization_aggregate: GraphQLTypes['Organization_aggregate'];
    /** fetch data from the table: "Organization" using primary key columns */
    Organization_by_pk?: GraphQLTypes['Organization'] | undefined;
    /** fetch data from the table: "Package" */
    Package: Array<GraphQLTypes['Package']>;
    /** fetch data from the table: "PackageApplication" */
    PackageApplication: Array<GraphQLTypes['PackageApplication']>;
    /** fetch aggregated fields from the table: "PackageApplication" */
    PackageApplication_aggregate: GraphQLTypes['PackageApplication_aggregate'];
    /** fetch data from the table: "PackageApplication" using primary key columns */
    PackageApplication_by_pk?: GraphQLTypes['PackageApplication'] | undefined;
    /** fetch aggregated fields from the table: "Package" */
    Package_aggregate: GraphQLTypes['Package_aggregate'];
    /** fetch data from the table: "Package" using primary key columns */
    Package_by_pk?: GraphQLTypes['Package'] | undefined;
    /** fetch data from the table: "Product" */
    Product: Array<GraphQLTypes['Product']>;
    /** fetch data from the table: "ProductCategory" */
    ProductCategory: Array<GraphQLTypes['ProductCategory']>;
    /** fetch aggregated fields from the table: "ProductCategory" */
    ProductCategory_aggregate: GraphQLTypes['ProductCategory_aggregate'];
    /** fetch data from the table: "ProductCategory" using primary key columns */
    ProductCategory_by_pk?: GraphQLTypes['ProductCategory'] | undefined;
    /** fetch data from the table: "ProductVersion" */
    ProductVersion: Array<GraphQLTypes['ProductVersion']>;
    /** fetch aggregated fields from the table: "ProductVersion" */
    ProductVersion_aggregate: GraphQLTypes['ProductVersion_aggregate'];
    /** fetch data from the table: "ProductVersion" using primary key columns */
    ProductVersion_by_pk?: GraphQLTypes['ProductVersion'] | undefined;
    /** fetch aggregated fields from the table: "Product" */
    Product_aggregate: GraphQLTypes['Product_aggregate'];
    /** fetch data from the table: "Product" using primary key columns */
    Product_by_pk?: GraphQLTypes['Product'] | undefined;
    /** fetch data from the table: "Role" */
    Role: Array<GraphQLTypes['Role']>;
    /** fetch aggregated fields from the table: "Role" */
    Role_aggregate: GraphQLTypes['Role_aggregate'];
    /** fetch data from the table: "Role" using primary key columns */
    Role_by_pk?: GraphQLTypes['Role'] | undefined;
    /** fetch data from the table: "Status" */
    Status: Array<GraphQLTypes['Status']>;
    /** fetch aggregated fields from the table: "Status" */
    Status_aggregate: GraphQLTypes['Status_aggregate'];
    /** fetch data from the table: "Status" using primary key columns */
    Status_by_pk?: GraphQLTypes['Status'] | undefined;
    /** fetch data from the table: "Task" */
    Task: Array<GraphQLTypes['Task']>;
    /** fetch aggregated fields from the table: "Task" */
    Task_aggregate: GraphQLTypes['Task_aggregate'];
    /** fetch data from the table: "Task" using primary key columns */
    Task_by_pk?: GraphQLTypes['Task'] | undefined;
    /** fetch data from the table: "Tenant" */
    Tenant: Array<GraphQLTypes['Tenant']>;
    /** fetch data from the table: "TenantPackage" */
    TenantPackage: Array<GraphQLTypes['TenantPackage']>;
    /** fetch aggregated fields from the table: "TenantPackage" */
    TenantPackage_aggregate: GraphQLTypes['TenantPackage_aggregate'];
    /** fetch data from the table: "TenantPackage" using primary key columns */
    TenantPackage_by_pk?: GraphQLTypes['TenantPackage'] | undefined;
    /** fetch aggregated fields from the table: "Tenant" */
    Tenant_aggregate: GraphQLTypes['Tenant_aggregate'];
    /** fetch data from the table: "Tenant" using primary key columns */
    Tenant_by_pk?: GraphQLTypes['Tenant'] | undefined;
    /** fetch data from the table: "User" */
    User: Array<GraphQLTypes['User']>;
    /** fetch data from the table: "UserGroup" */
    UserGroup: Array<GraphQLTypes['UserGroup']>;
    /** fetch aggregated fields from the table: "UserGroup" */
    UserGroup_aggregate: GraphQLTypes['UserGroup_aggregate'];
    /** fetch data from the table: "UserGroup" using primary key columns */
    UserGroup_by_pk?: GraphQLTypes['UserGroup'] | undefined;
    /** fetch data from the table: "UserRole" */
    UserRole: Array<GraphQLTypes['UserRole']>;
    /** fetch aggregated fields from the table: "UserRole" */
    UserRole_aggregate: GraphQLTypes['UserRole_aggregate'];
    /** fetch data from the table: "UserRole" using primary key columns */
    UserRole_by_pk?: GraphQLTypes['UserRole'] | undefined;
    /** fetch data from the table: "UserType" */
    UserType: Array<GraphQLTypes['UserType']>;
    /** fetch aggregated fields from the table: "UserType" */
    UserType_aggregate: GraphQLTypes['UserType_aggregate'];
    /** fetch data from the table: "UserType" using primary key columns */
    UserType_by_pk?: GraphQLTypes['UserType'] | undefined;
    /** fetch aggregated fields from the table: "User" */
    User_aggregate: GraphQLTypes['User_aggregate'];
    /** fetch data from the table: "User" using primary key columns */
    User_by_pk?: GraphQLTypes['User'] | undefined;
  };
  ['subscription_root']: {
    __typename: 'subscription_root';
    /** fetch data from the table: "Application" */
    Application: Array<GraphQLTypes['Application']>;
    /** fetch data from the table: "ApplicationIntegration" */
    ApplicationIntegration: Array<GraphQLTypes['ApplicationIntegration']>;
    /** fetch aggregated fields from the table: "ApplicationIntegration" */
    ApplicationIntegration_aggregate: GraphQLTypes['ApplicationIntegration_aggregate'];
    /** fetch data from the table: "ApplicationIntegration" using primary key columns */
    ApplicationIntegration_by_pk?:
      | GraphQLTypes['ApplicationIntegration']
      | undefined;
    /** fetch data from the table in a streaming manner: "ApplicationIntegration" */
    ApplicationIntegration_stream: Array<
      GraphQLTypes['ApplicationIntegration']
    >;
    /** fetch aggregated fields from the table: "Application" */
    Application_aggregate: GraphQLTypes['Application_aggregate'];
    /** fetch data from the table: "Application" using primary key columns */
    Application_by_pk?: GraphQLTypes['Application'] | undefined;
    /** fetch data from the table in a streaming manner: "Application" */
    Application_stream: Array<GraphQLTypes['Application']>;
    /** fetch data from the table: "CaseSeverity" */
    CaseSeverity: Array<GraphQLTypes['CaseSeverity']>;
    /** fetch aggregated fields from the table: "CaseSeverity" */
    CaseSeverity_aggregate: GraphQLTypes['CaseSeverity_aggregate'];
    /** fetch data from the table: "CaseSeverity" using primary key columns */
    CaseSeverity_by_pk?: GraphQLTypes['CaseSeverity'] | undefined;
    /** fetch data from the table in a streaming manner: "CaseSeverity" */
    CaseSeverity_stream: Array<GraphQLTypes['CaseSeverity']>;
    /** fetch data from the table: "ClosureReason" */
    ClosureReason: Array<GraphQLTypes['ClosureReason']>;
    /** fetch aggregated fields from the table: "ClosureReason" */
    ClosureReason_aggregate: GraphQLTypes['ClosureReason_aggregate'];
    /** fetch data from the table: "ClosureReason" using primary key columns */
    ClosureReason_by_pk?: GraphQLTypes['ClosureReason'] | undefined;
    /** fetch data from the table in a streaming manner: "ClosureReason" */
    ClosureReason_stream: Array<GraphQLTypes['ClosureReason']>;
    /** fetch data from the table: "Currency" */
    Currency: Array<GraphQLTypes['Currency']>;
    /** fetch aggregated fields from the table: "Currency" */
    Currency_aggregate: GraphQLTypes['Currency_aggregate'];
    /** fetch data from the table: "Currency" using primary key columns */
    Currency_by_pk?: GraphQLTypes['Currency'] | undefined;
    /** fetch data from the table in a streaming manner: "Currency" */
    Currency_stream: Array<GraphQLTypes['Currency']>;
    /** fetch data from the table: "CustomRole" */
    CustomRole: Array<GraphQLTypes['CustomRole']>;
    /** fetch aggregated fields from the table: "CustomRole" */
    CustomRole_aggregate: GraphQLTypes['CustomRole_aggregate'];
    /** fetch data from the table: "CustomRole" using primary key columns */
    CustomRole_by_pk?: GraphQLTypes['CustomRole'] | undefined;
    /** fetch data from the table in a streaming manner: "CustomRole" */
    CustomRole_stream: Array<GraphQLTypes['CustomRole']>;
    /** fetch data from the table: "Group" */
    Group: Array<GraphQLTypes['Group']>;
    /** fetch data from the table: "GroupRole" */
    GroupRole: Array<GraphQLTypes['GroupRole']>;
    /** fetch aggregated fields from the table: "GroupRole" */
    GroupRole_aggregate: GraphQLTypes['GroupRole_aggregate'];
    /** fetch data from the table: "GroupRole" using primary key columns */
    GroupRole_by_pk?: GraphQLTypes['GroupRole'] | undefined;
    /** fetch data from the table in a streaming manner: "GroupRole" */
    GroupRole_stream: Array<GraphQLTypes['GroupRole']>;
    /** fetch aggregated fields from the table: "Group" */
    Group_aggregate: GraphQLTypes['Group_aggregate'];
    /** fetch data from the table: "Group" using primary key columns */
    Group_by_pk?: GraphQLTypes['Group'] | undefined;
    /** fetch data from the table in a streaming manner: "Group" */
    Group_stream: Array<GraphQLTypes['Group']>;
    /** fetch data from the table: "Industry" */
    Industry: Array<GraphQLTypes['Industry']>;
    /** fetch aggregated fields from the table: "Industry" */
    Industry_aggregate: GraphQLTypes['Industry_aggregate'];
    /** fetch data from the table: "Industry" using primary key columns */
    Industry_by_pk?: GraphQLTypes['Industry'] | undefined;
    /** fetch data from the table in a streaming manner: "Industry" */
    Industry_stream: Array<GraphQLTypes['Industry']>;
    /** fetch data from the table: "IssueCategory" */
    IssueCategory: Array<GraphQLTypes['IssueCategory']>;
    /** fetch aggregated fields from the table: "IssueCategory" */
    IssueCategory_aggregate: GraphQLTypes['IssueCategory_aggregate'];
    /** fetch data from the table: "IssueCategory" using primary key columns */
    IssueCategory_by_pk?: GraphQLTypes['IssueCategory'] | undefined;
    /** fetch data from the table in a streaming manner: "IssueCategory" */
    IssueCategory_stream: Array<GraphQLTypes['IssueCategory']>;
    /** fetch data from the table: "Object" */
    Object: Array<GraphQLTypes['Object']>;
    /** fetch aggregated fields from the table: "Object" */
    Object_aggregate: GraphQLTypes['Object_aggregate'];
    /** fetch data from the table: "Object" using primary key columns */
    Object_by_pk?: GraphQLTypes['Object'] | undefined;
    /** fetch data from the table in a streaming manner: "Object" */
    Object_stream: Array<GraphQLTypes['Object']>;
    /** fetch data from the table: "Organization" */
    Organization: Array<GraphQLTypes['Organization']>;
    /** fetch aggregated fields from the table: "Organization" */
    Organization_aggregate: GraphQLTypes['Organization_aggregate'];
    /** fetch data from the table: "Organization" using primary key columns */
    Organization_by_pk?: GraphQLTypes['Organization'] | undefined;
    /** fetch data from the table in a streaming manner: "Organization" */
    Organization_stream: Array<GraphQLTypes['Organization']>;
    /** fetch data from the table: "Package" */
    Package: Array<GraphQLTypes['Package']>;
    /** fetch data from the table: "PackageApplication" */
    PackageApplication: Array<GraphQLTypes['PackageApplication']>;
    /** fetch aggregated fields from the table: "PackageApplication" */
    PackageApplication_aggregate: GraphQLTypes['PackageApplication_aggregate'];
    /** fetch data from the table: "PackageApplication" using primary key columns */
    PackageApplication_by_pk?: GraphQLTypes['PackageApplication'] | undefined;
    /** fetch data from the table in a streaming manner: "PackageApplication" */
    PackageApplication_stream: Array<GraphQLTypes['PackageApplication']>;
    /** fetch aggregated fields from the table: "Package" */
    Package_aggregate: GraphQLTypes['Package_aggregate'];
    /** fetch data from the table: "Package" using primary key columns */
    Package_by_pk?: GraphQLTypes['Package'] | undefined;
    /** fetch data from the table in a streaming manner: "Package" */
    Package_stream: Array<GraphQLTypes['Package']>;
    /** fetch data from the table: "Product" */
    Product: Array<GraphQLTypes['Product']>;
    /** fetch data from the table: "ProductCategory" */
    ProductCategory: Array<GraphQLTypes['ProductCategory']>;
    /** fetch aggregated fields from the table: "ProductCategory" */
    ProductCategory_aggregate: GraphQLTypes['ProductCategory_aggregate'];
    /** fetch data from the table: "ProductCategory" using primary key columns */
    ProductCategory_by_pk?: GraphQLTypes['ProductCategory'] | undefined;
    /** fetch data from the table in a streaming manner: "ProductCategory" */
    ProductCategory_stream: Array<GraphQLTypes['ProductCategory']>;
    /** fetch data from the table: "ProductVersion" */
    ProductVersion: Array<GraphQLTypes['ProductVersion']>;
    /** fetch aggregated fields from the table: "ProductVersion" */
    ProductVersion_aggregate: GraphQLTypes['ProductVersion_aggregate'];
    /** fetch data from the table: "ProductVersion" using primary key columns */
    ProductVersion_by_pk?: GraphQLTypes['ProductVersion'] | undefined;
    /** fetch data from the table in a streaming manner: "ProductVersion" */
    ProductVersion_stream: Array<GraphQLTypes['ProductVersion']>;
    /** fetch aggregated fields from the table: "Product" */
    Product_aggregate: GraphQLTypes['Product_aggregate'];
    /** fetch data from the table: "Product" using primary key columns */
    Product_by_pk?: GraphQLTypes['Product'] | undefined;
    /** fetch data from the table in a streaming manner: "Product" */
    Product_stream: Array<GraphQLTypes['Product']>;
    /** fetch data from the table: "Role" */
    Role: Array<GraphQLTypes['Role']>;
    /** fetch aggregated fields from the table: "Role" */
    Role_aggregate: GraphQLTypes['Role_aggregate'];
    /** fetch data from the table: "Role" using primary key columns */
    Role_by_pk?: GraphQLTypes['Role'] | undefined;
    /** fetch data from the table in a streaming manner: "Role" */
    Role_stream: Array<GraphQLTypes['Role']>;
    /** fetch data from the table: "Status" */
    Status: Array<GraphQLTypes['Status']>;
    /** fetch aggregated fields from the table: "Status" */
    Status_aggregate: GraphQLTypes['Status_aggregate'];
    /** fetch data from the table: "Status" using primary key columns */
    Status_by_pk?: GraphQLTypes['Status'] | undefined;
    /** fetch data from the table in a streaming manner: "Status" */
    Status_stream: Array<GraphQLTypes['Status']>;
    /** fetch data from the table: "Task" */
    Task: Array<GraphQLTypes['Task']>;
    /** fetch aggregated fields from the table: "Task" */
    Task_aggregate: GraphQLTypes['Task_aggregate'];
    /** fetch data from the table: "Task" using primary key columns */
    Task_by_pk?: GraphQLTypes['Task'] | undefined;
    /** fetch data from the table in a streaming manner: "Task" */
    Task_stream: Array<GraphQLTypes['Task']>;
    /** fetch data from the table: "Tenant" */
    Tenant: Array<GraphQLTypes['Tenant']>;
    /** fetch data from the table: "TenantPackage" */
    TenantPackage: Array<GraphQLTypes['TenantPackage']>;
    /** fetch aggregated fields from the table: "TenantPackage" */
    TenantPackage_aggregate: GraphQLTypes['TenantPackage_aggregate'];
    /** fetch data from the table: "TenantPackage" using primary key columns */
    TenantPackage_by_pk?: GraphQLTypes['TenantPackage'] | undefined;
    /** fetch data from the table in a streaming manner: "TenantPackage" */
    TenantPackage_stream: Array<GraphQLTypes['TenantPackage']>;
    /** fetch aggregated fields from the table: "Tenant" */
    Tenant_aggregate: GraphQLTypes['Tenant_aggregate'];
    /** fetch data from the table: "Tenant" using primary key columns */
    Tenant_by_pk?: GraphQLTypes['Tenant'] | undefined;
    /** fetch data from the table in a streaming manner: "Tenant" */
    Tenant_stream: Array<GraphQLTypes['Tenant']>;
    /** fetch data from the table: "User" */
    User: Array<GraphQLTypes['User']>;
    /** fetch data from the table: "UserGroup" */
    UserGroup: Array<GraphQLTypes['UserGroup']>;
    /** fetch aggregated fields from the table: "UserGroup" */
    UserGroup_aggregate: GraphQLTypes['UserGroup_aggregate'];
    /** fetch data from the table: "UserGroup" using primary key columns */
    UserGroup_by_pk?: GraphQLTypes['UserGroup'] | undefined;
    /** fetch data from the table in a streaming manner: "UserGroup" */
    UserGroup_stream: Array<GraphQLTypes['UserGroup']>;
    /** fetch data from the table: "UserRole" */
    UserRole: Array<GraphQLTypes['UserRole']>;
    /** fetch aggregated fields from the table: "UserRole" */
    UserRole_aggregate: GraphQLTypes['UserRole_aggregate'];
    /** fetch data from the table: "UserRole" using primary key columns */
    UserRole_by_pk?: GraphQLTypes['UserRole'] | undefined;
    /** fetch data from the table in a streaming manner: "UserRole" */
    UserRole_stream: Array<GraphQLTypes['UserRole']>;
    /** fetch data from the table: "UserType" */
    UserType: Array<GraphQLTypes['UserType']>;
    /** fetch aggregated fields from the table: "UserType" */
    UserType_aggregate: GraphQLTypes['UserType_aggregate'];
    /** fetch data from the table: "UserType" using primary key columns */
    UserType_by_pk?: GraphQLTypes['UserType'] | undefined;
    /** fetch data from the table in a streaming manner: "UserType" */
    UserType_stream: Array<GraphQLTypes['UserType']>;
    /** fetch aggregated fields from the table: "User" */
    User_aggregate: GraphQLTypes['User_aggregate'];
    /** fetch data from the table: "User" using primary key columns */
    User_by_pk?: GraphQLTypes['User'] | undefined;
    /** fetch data from the table in a streaming manner: "User" */
    User_stream: Array<GraphQLTypes['User']>;
  };
  ['timestamp']: 'scalar' & { name: 'timestamp' };
  /** Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'. */
  ['timestamp_comparison_exp']: {
    _eq?: GraphQLTypes['timestamp'] | undefined;
    _gt?: GraphQLTypes['timestamp'] | undefined;
    _gte?: GraphQLTypes['timestamp'] | undefined;
    _in?: Array<GraphQLTypes['timestamp']> | undefined;
    _is_null?: boolean | undefined;
    _lt?: GraphQLTypes['timestamp'] | undefined;
    _lte?: GraphQLTypes['timestamp'] | undefined;
    _neq?: GraphQLTypes['timestamp'] | undefined;
    _nin?: Array<GraphQLTypes['timestamp']> | undefined;
  };
  ['timestamptz']: 'scalar' & { name: 'timestamptz' };
  /** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
  ['timestamptz_comparison_exp']: {
    _eq?: GraphQLTypes['timestamptz'] | undefined;
    _gt?: GraphQLTypes['timestamptz'] | undefined;
    _gte?: GraphQLTypes['timestamptz'] | undefined;
    _in?: Array<GraphQLTypes['timestamptz']> | undefined;
    _is_null?: boolean | undefined;
    _lt?: GraphQLTypes['timestamptz'] | undefined;
    _lte?: GraphQLTypes['timestamptz'] | undefined;
    _neq?: GraphQLTypes['timestamptz'] | undefined;
    _nin?: Array<GraphQLTypes['timestamptz']> | undefined;
  };
  ['uuid']: 'scalar' & { name: 'uuid' };
  /** Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'. */
  ['uuid_comparison_exp']: {
    _eq?: GraphQLTypes['uuid'] | undefined;
    _gt?: GraphQLTypes['uuid'] | undefined;
    _gte?: GraphQLTypes['uuid'] | undefined;
    _in?: Array<GraphQLTypes['uuid']> | undefined;
    _is_null?: boolean | undefined;
    _lt?: GraphQLTypes['uuid'] | undefined;
    _lte?: GraphQLTypes['uuid'] | undefined;
    _neq?: GraphQLTypes['uuid'] | undefined;
    _nin?: Array<GraphQLTypes['uuid']> | undefined;
  };
};
/** unique or primary key constraints on table "ApplicationIntegration" */
export const enum ApplicationIntegration_constraint {
  ApplicationIntegration_cursorId_key = 'ApplicationIntegration_cursorId_key',
  PreaccredApplicationIntegration_pkey = 'PreaccredApplicationIntegration_pkey',
}
/** select columns of table "ApplicationIntegration" */
export const enum ApplicationIntegration_select_column {
  applicationId = 'applicationId',
  cursorId = 'cursorId',
  description = 'description',
  id = 'id',
  menuName = 'menuName',
  menuURL = 'menuURL',
  name = 'name',
  subMenus = 'subMenus',
}
/** update columns of table "ApplicationIntegration" */
export const enum ApplicationIntegration_update_column {
  applicationId = 'applicationId',
  cursorId = 'cursorId',
  description = 'description',
  id = 'id',
  menuName = 'menuName',
  menuURL = 'menuURL',
  name = 'name',
  subMenus = 'subMenus',
}
/** unique or primary key constraints on table "Application" */
export const enum Application_constraint {
  Application_cursorId_key = 'Application_cursorId_key',
  PreaccredApplication_pkey = 'PreaccredApplication_pkey',
}
/** select columns of table "Application" */
export const enum Application_select_column {
  cursorId = 'cursorId',
  description = 'description',
  id = 'id',
  name = 'name',
  objects = 'objects',
  roles = 'roles',
}
/** update columns of table "Application" */
export const enum Application_update_column {
  cursorId = 'cursorId',
  description = 'description',
  id = 'id',
  name = 'name',
  objects = 'objects',
  roles = 'roles',
}
/** unique or primary key constraints on table "CaseSeverity" */
export const enum CaseSeverity_constraint {
  CaseSeverity_cursorId_key = 'CaseSeverity_cursorId_key',
  CaseSeverity_pkey = 'CaseSeverity_pkey',
}
/** select columns of table "CaseSeverity" */
export const enum CaseSeverity_select_column {
  createdAt = 'createdAt',
  createdById = 'createdById',
  cursorId = 'cursorId',
  description = 'description',
  id = 'id',
  name = 'name',
  status = 'status',
  tenantId = 'tenantId',
  updatedAt = 'updatedAt',
  updatedById = 'updatedById',
}
/** update columns of table "CaseSeverity" */
export const enum CaseSeverity_update_column {
  createdAt = 'createdAt',
  createdById = 'createdById',
  cursorId = 'cursorId',
  description = 'description',
  id = 'id',
  name = 'name',
  status = 'status',
  tenantId = 'tenantId',
  updatedAt = 'updatedAt',
  updatedById = 'updatedById',
}
/** unique or primary key constraints on table "ClosureReason" */
export const enum ClosureReason_constraint {
  ClosureReason_cursorId_key = 'ClosureReason_cursorId_key',
  ClosureReason_pkey = 'ClosureReason_pkey',
}
/** select columns of table "ClosureReason" */
export const enum ClosureReason_select_column {
  createdAt = 'createdAt',
  createdById = 'createdById',
  cursorId = 'cursorId',
  description = 'description',
  id = 'id',
  name = 'name',
  status = 'status',
  tenantId = 'tenantId',
  updatedAt = 'updatedAt',
  updatedById = 'updatedById',
}
/** update columns of table "ClosureReason" */
export const enum ClosureReason_update_column {
  createdAt = 'createdAt',
  createdById = 'createdById',
  cursorId = 'cursorId',
  description = 'description',
  id = 'id',
  name = 'name',
  status = 'status',
  tenantId = 'tenantId',
  updatedAt = 'updatedAt',
  updatedById = 'updatedById',
}
/** unique or primary key constraints on table "Currency" */
export const enum Currency_constraint {
  Currency_pkey = 'Currency_pkey',
}
/** select columns of table "Currency" */
export const enum Currency_select_column {
  code = 'code',
  country = 'country',
  createdAt = 'createdAt',
  exchangeRate = 'exchangeRate',
  id = 'id',
  name = 'name',
  status = 'status',
  tenantId = 'tenantId',
  updatedAt = 'updatedAt',
}
/** update columns of table "Currency" */
export const enum Currency_update_column {
  code = 'code',
  country = 'country',
  createdAt = 'createdAt',
  exchangeRate = 'exchangeRate',
  id = 'id',
  name = 'name',
  status = 'status',
  tenantId = 'tenantId',
  updatedAt = 'updatedAt',
}
/** unique or primary key constraints on table "CustomRole" */
export const enum CustomRole_constraint {
  CustomRole_cursorId_key = 'CustomRole_cursorId_key',
  CustomRole_pkey = 'CustomRole_pkey',
}
/** select columns of table "CustomRole" */
export const enum CustomRole_select_column {
  createdAt = 'createdAt',
  createdById = 'createdById',
  cursorId = 'cursorId',
  description = 'description',
  id = 'id',
  name = 'name',
  status = 'status',
  tenantId = 'tenantId',
  updatedAt = 'updatedAt',
  updatedById = 'updatedById',
}
/** update columns of table "CustomRole" */
export const enum CustomRole_update_column {
  createdAt = 'createdAt',
  createdById = 'createdById',
  cursorId = 'cursorId',
  description = 'description',
  id = 'id',
  name = 'name',
  status = 'status',
  tenantId = 'tenantId',
  updatedAt = 'updatedAt',
  updatedById = 'updatedById',
}
/** unique or primary key constraints on table "GroupRole" */
export const enum GroupRole_constraint {
  GroupRole_pkey = 'GroupRole_pkey',
}
/** select columns of table "GroupRole" */
export const enum GroupRole_select_column {
  groupId = 'groupId',
  id = 'id',
  roleId = 'roleId',
}
/** update columns of table "GroupRole" */
export const enum GroupRole_update_column {
  groupId = 'groupId',
  id = 'id',
  roleId = 'roleId',
}
/** unique or primary key constraints on table "Group" */
export const enum Group_constraint {
  Group_pkey = 'Group_pkey',
}
/** select columns of table "Group" */
export const enum Group_select_column {
  createdBy = 'createdBy',
  created_at = 'created_at',
  cursorId = 'cursorId',
  description = 'description',
  id = 'id',
  lastModifiedBy = 'lastModifiedBy',
  name = 'name',
  role = 'role',
  status = 'status',
  tenantId = 'tenantId',
  updated_at = 'updated_at',
}
/** update columns of table "Group" */
export const enum Group_update_column {
  createdBy = 'createdBy',
  created_at = 'created_at',
  cursorId = 'cursorId',
  description = 'description',
  id = 'id',
  lastModifiedBy = 'lastModifiedBy',
  name = 'name',
  role = 'role',
  status = 'status',
  tenantId = 'tenantId',
  updated_at = 'updated_at',
}
/** unique or primary key constraints on table "Industry" */
export const enum Industry_constraint {
  Industry_cursorId_key = 'Industry_cursorId_key',
  Industry_pkey = 'Industry_pkey',
}
/** select columns of table "Industry" */
export const enum Industry_select_column {
  createdAt = 'createdAt',
  createdById = 'createdById',
  cursorId = 'cursorId',
  description = 'description',
  id = 'id',
  name = 'name',
  status = 'status',
  tenantId = 'tenantId',
  updatedAt = 'updatedAt',
  updatedById = 'updatedById',
}
/** update columns of table "Industry" */
export const enum Industry_update_column {
  createdAt = 'createdAt',
  createdById = 'createdById',
  cursorId = 'cursorId',
  description = 'description',
  id = 'id',
  name = 'name',
  status = 'status',
  tenantId = 'tenantId',
  updatedAt = 'updatedAt',
  updatedById = 'updatedById',
}
/** unique or primary key constraints on table "IssueCategory" */
export const enum IssueCategory_constraint {
  IssueCategory_cursorId_key = 'IssueCategory_cursorId_key',
  IssueCategory_pkey = 'IssueCategory_pkey',
}
/** select columns of table "IssueCategory" */
export const enum IssueCategory_select_column {
  createdAt = 'createdAt',
  createdById = 'createdById',
  cursorId = 'cursorId',
  description = 'description',
  id = 'id',
  name = 'name',
  status = 'status',
  tenantId = 'tenantId',
  updatedAt = 'updatedAt',
  updatedById = 'updatedById',
}
/** update columns of table "IssueCategory" */
export const enum IssueCategory_update_column {
  createdAt = 'createdAt',
  createdById = 'createdById',
  cursorId = 'cursorId',
  description = 'description',
  id = 'id',
  name = 'name',
  status = 'status',
  tenantId = 'tenantId',
  updatedAt = 'updatedAt',
  updatedById = 'updatedById',
}
/** unique or primary key constraints on table "Object" */
export const enum Object_constraint {
  Object_pkey = 'Object_pkey',
}
/** select columns of table "Object" */
export const enum Object_select_column {
  applicationId = 'applicationId',
  description = 'description',
  id = 'id',
  name = 'name',
}
/** update columns of table "Object" */
export const enum Object_update_column {
  applicationId = 'applicationId',
  description = 'description',
  id = 'id',
  name = 'name',
}
/** unique or primary key constraints on table "Organization" */
export const enum Organization_constraint {
  Organization_pkey = 'Organization_pkey',
}
/** select columns of table "Organization" */
export const enum Organization_select_column {
  address = 'address',
  city = 'city',
  country = 'country',
  createdAt = 'createdAt',
  domain = 'domain',
  id = 'id',
  industry = 'industry',
  name = 'name',
  postalCode = 'postalCode',
  state = 'state',
  tenantId = 'tenantId',
  type = 'type',
  updatedAt = 'updatedAt',
  websiteUrl = 'websiteUrl',
}
/** update columns of table "Organization" */
export const enum Organization_update_column {
  address = 'address',
  city = 'city',
  country = 'country',
  createdAt = 'createdAt',
  domain = 'domain',
  id = 'id',
  industry = 'industry',
  name = 'name',
  postalCode = 'postalCode',
  state = 'state',
  tenantId = 'tenantId',
  type = 'type',
  updatedAt = 'updatedAt',
  websiteUrl = 'websiteUrl',
}
/** unique or primary key constraints on table "PackageApplication" */
export const enum PackageApplication_constraint {
  PackageApplication_pkey = 'PackageApplication_pkey',
}
/** select columns of table "PackageApplication" */
export const enum PackageApplication_select_column {
  applicationId = 'applicationId',
  id = 'id',
  packageId = 'packageId',
}
/** update columns of table "PackageApplication" */
export const enum PackageApplication_update_column {
  applicationId = 'applicationId',
  id = 'id',
  packageId = 'packageId',
}
/** unique or primary key constraints on table "Package" */
export const enum Package_constraint {
  Package_cursorId_key = 'Package_cursorId_key',
  PreaccredPackage_pkey = 'PreaccredPackage_pkey',
}
/** select columns of table "Package" */
export const enum Package_select_column {
  cursorId = 'cursorId',
  description = 'description',
  id = 'id',
  name = 'name',
  objects = 'objects',
  price = 'price',
  roles = 'roles',
}
/** update columns of table "Package" */
export const enum Package_update_column {
  cursorId = 'cursorId',
  description = 'description',
  id = 'id',
  name = 'name',
  objects = 'objects',
  price = 'price',
  roles = 'roles',
}
/** unique or primary key constraints on table "ProductCategory" */
export const enum ProductCategory_constraint {
  ProductCategory_cursorId_key = 'ProductCategory_cursorId_key',
  ProductCategory_pkey = 'ProductCategory_pkey',
}
/** select columns of table "ProductCategory" */
export const enum ProductCategory_select_column {
  createdAt = 'createdAt',
  createdById = 'createdById',
  cursorId = 'cursorId',
  id = 'id',
  name = 'name',
  productId = 'productId',
  status = 'status',
  tenantId = 'tenantId',
  updatedAt = 'updatedAt',
  updatedById = 'updatedById',
}
/** update columns of table "ProductCategory" */
export const enum ProductCategory_update_column {
  createdAt = 'createdAt',
  createdById = 'createdById',
  cursorId = 'cursorId',
  id = 'id',
  name = 'name',
  productId = 'productId',
  status = 'status',
  tenantId = 'tenantId',
  updatedAt = 'updatedAt',
  updatedById = 'updatedById',
}
/** unique or primary key constraints on table "ProductVersion" */
export const enum ProductVersion_constraint {
  ProductVersion_cursorId_key = 'ProductVersion_cursorId_key',
  ProductVersion_pkey = 'ProductVersion_pkey',
}
/** select columns of table "ProductVersion" */
export const enum ProductVersion_select_column {
  createdAt = 'createdAt',
  createdById = 'createdById',
  cursorId = 'cursorId',
  id = 'id',
  name = 'name',
  productId = 'productId',
  status = 'status',
  tenantId = 'tenantId',
  updatedAt = 'updatedAt',
  updatedById = 'updatedById',
  version = 'version',
}
/** update columns of table "ProductVersion" */
export const enum ProductVersion_update_column {
  createdAt = 'createdAt',
  createdById = 'createdById',
  cursorId = 'cursorId',
  id = 'id',
  name = 'name',
  productId = 'productId',
  status = 'status',
  tenantId = 'tenantId',
  updatedAt = 'updatedAt',
  updatedById = 'updatedById',
  version = 'version',
}
/** unique or primary key constraints on table "Product" */
export const enum Product_constraint {
  Product_cursorId_key = 'Product_cursorId_key',
  Product_pkey = 'Product_pkey',
}
/** select columns of table "Product" */
export const enum Product_select_column {
  code = 'code',
  createdAt = 'createdAt',
  createdById = 'createdById',
  cursorId = 'cursorId',
  description = 'description',
  id = 'id',
  metric = 'metric',
  name = 'name',
  status = 'status',
  tenantId = 'tenantId',
  updatedAt = 'updatedAt',
  updatedById = 'updatedById',
  version = 'version',
}
/** update columns of table "Product" */
export const enum Product_update_column {
  code = 'code',
  createdAt = 'createdAt',
  createdById = 'createdById',
  cursorId = 'cursorId',
  description = 'description',
  id = 'id',
  metric = 'metric',
  name = 'name',
  status = 'status',
  tenantId = 'tenantId',
  updatedAt = 'updatedAt',
  updatedById = 'updatedById',
  version = 'version',
}
/** unique or primary key constraints on table "Role" */
export const enum Role_constraint {
  Role_name_key = 'Role_name_key',
  Role_pkey = 'Role_pkey',
}
/** select columns of table "Role" */
export const enum Role_select_column {
  applicationId = 'applicationId',
  description = 'description',
  id = 'id',
  name = 'name',
}
/** update columns of table "Role" */
export const enum Role_update_column {
  applicationId = 'applicationId',
  description = 'description',
  id = 'id',
  name = 'name',
}
/** unique or primary key constraints on table "Status" */
export const enum Status_constraint {
  Status_pkey = 'Status_pkey',
}
export const enum Status_enum {
  ACTIVE = 'ACTIVE',
  ARCHIVED = 'ARCHIVED',
  DELETED = 'DELETED',
  INACTIVE = 'INACTIVE',
}
/** select columns of table "Status" */
export const enum Status_select_column {
  value = 'value',
}
/** update columns of table "Status" */
export const enum Status_update_column {
  value = 'value',
}
/** unique or primary key constraints on table "Task" */
export const enum Task_constraint {
  Task_pkey = 'Task_pkey',
}
/** select columns of table "Task" */
export const enum Task_select_column {
  closureReason = 'closureReason',
  description = 'description',
  hasSensitiveInfo = 'hasSensitiveInfo',
  id = 'id',
  isRejected = 'isRejected',
  isSupportEngineerIdentityHidden = 'isSupportEngineerIdentityHidden',
  issueCategory = 'issueCategory',
  linkedTickets = 'linkedTickets',
  name = 'name',
  organizationId = 'organizationId',
  productDocId = 'productDocId',
  productVersion = 'productVersion',
  requestForInformation = 'requestForInformation',
  requestedByUserId = 'requestedByUserId',
  reviewedByUserId = 'reviewedByUserId',
  rootChapterId = 'rootChapterId',
  rootChapterVersion = 'rootChapterVersion',
  salesForceTicketId = 'salesForceTicketId',
  severity = 'severity',
  severityUpdatedAt = 'severityUpdatedAt',
  status = 'status',
  subCategory = 'subCategory',
  tenantId = 'tenantId',
  ticketRef = 'ticketRef',
  type = 'type',
  usersToNotify = 'usersToNotify',
}
/** update columns of table "Task" */
export const enum Task_update_column {
  closureReason = 'closureReason',
  description = 'description',
  hasSensitiveInfo = 'hasSensitiveInfo',
  id = 'id',
  isRejected = 'isRejected',
  isSupportEngineerIdentityHidden = 'isSupportEngineerIdentityHidden',
  issueCategory = 'issueCategory',
  linkedTickets = 'linkedTickets',
  name = 'name',
  organizationId = 'organizationId',
  productDocId = 'productDocId',
  productVersion = 'productVersion',
  requestForInformation = 'requestForInformation',
  requestedByUserId = 'requestedByUserId',
  reviewedByUserId = 'reviewedByUserId',
  rootChapterId = 'rootChapterId',
  rootChapterVersion = 'rootChapterVersion',
  salesForceTicketId = 'salesForceTicketId',
  severity = 'severity',
  severityUpdatedAt = 'severityUpdatedAt',
  status = 'status',
  subCategory = 'subCategory',
  tenantId = 'tenantId',
  ticketRef = 'ticketRef',
  type = 'type',
  usersToNotify = 'usersToNotify',
}
/** unique or primary key constraints on table "TenantPackage" */
export const enum TenantPackage_constraint {
  TenantPackage_pkey = 'TenantPackage_pkey',
}
/** select columns of table "TenantPackage" */
export const enum TenantPackage_select_column {
  id = 'id',
  packageId = 'packageId',
  tenantId = 'tenantId',
}
/** update columns of table "TenantPackage" */
export const enum TenantPackage_update_column {
  id = 'id',
  packageId = 'packageId',
  tenantId = 'tenantId',
}
/** unique or primary key constraints on table "Tenant" */
export const enum Tenant_constraint {
  Tenant_cursorId_key = 'Tenant_cursorId_key',
  Tenant_pkey = 'Tenant_pkey',
}
/** select columns of table "Tenant" */
export const enum Tenant_select_column {
  address = 'address',
  contact = 'contact',
  createdAt = 'createdAt',
  createdById = 'createdById',
  cursorId = 'cursorId',
  emailId = 'emailId',
  firstName = 'firstName',
  id = 'id',
  lastName = 'lastName',
  name = 'name',
  organizationId = 'organizationId',
  sidebarLinkId = 'sidebarLinkId',
  status = 'status',
  tenantCustomizationId = 'tenantCustomizationId',
  totalSpaceForDoc = 'totalSpaceForDoc',
  updatedAt = 'updatedAt',
  updatedById = 'updatedById',
  usedSpaceByDoc = 'usedSpaceByDoc',
  verificationStatus = 'verificationStatus',
}
/** update columns of table "Tenant" */
export const enum Tenant_update_column {
  address = 'address',
  contact = 'contact',
  createdAt = 'createdAt',
  createdById = 'createdById',
  cursorId = 'cursorId',
  emailId = 'emailId',
  firstName = 'firstName',
  id = 'id',
  lastName = 'lastName',
  name = 'name',
  organizationId = 'organizationId',
  sidebarLinkId = 'sidebarLinkId',
  status = 'status',
  tenantCustomizationId = 'tenantCustomizationId',
  totalSpaceForDoc = 'totalSpaceForDoc',
  updatedAt = 'updatedAt',
  updatedById = 'updatedById',
  usedSpaceByDoc = 'usedSpaceByDoc',
  verificationStatus = 'verificationStatus',
}
/** unique or primary key constraints on table "UserGroup" */
export const enum UserGroup_constraint {
  UserGroup_pkey = 'UserGroup_pkey',
}
/** select columns of table "UserGroup" */
export const enum UserGroup_select_column {
  groupId = 'groupId',
  id = 'id',
  userId = 'userId',
}
/** update columns of table "UserGroup" */
export const enum UserGroup_update_column {
  groupId = 'groupId',
  id = 'id',
  userId = 'userId',
}
/** unique or primary key constraints on table "UserRole" */
export const enum UserRole_constraint {
  UserRole_pkey = 'UserRole_pkey',
}
/** select columns of table "UserRole" */
export const enum UserRole_select_column {
  id = 'id',
  roleId = 'roleId',
  userId = 'userId',
}
/** update columns of table "UserRole" */
export const enum UserRole_update_column {
  id = 'id',
  roleId = 'roleId',
  userId = 'userId',
}
/** unique or primary key constraints on table "UserType" */
export const enum UserType_constraint {
  UserType_pkey = 'UserType_pkey',
}
export const enum UserType_enum {
  EXTERNAL = 'EXTERNAL',
  INTERNAL = 'INTERNAL',
}
/** select columns of table "UserType" */
export const enum UserType_select_column {
  value = 'value',
}
/** update columns of table "UserType" */
export const enum UserType_update_column {
  value = 'value',
}
/** unique or primary key constraints on table "User" */
export const enum User_constraint {
  User_cursorId_key = 'User_cursorId_key',
  User_pkey = 'User_pkey',
}
/** select columns of table "User" */
export const enum User_select_column {
  address = 'address',
  city = 'city',
  country = 'country',
  createdAt = 'createdAt',
  createdById = 'createdById',
  cursorId = 'cursorId',
  displayName = 'displayName',
  email = 'email',
  firstName = 'firstName',
  id = 'id',
  isMigrated = 'isMigrated',
  isTenantAdmin = 'isTenantAdmin',
  jobTitle = 'jobTitle',
  lastName = 'lastName',
  organizationId = 'organizationId',
  postalCode = 'postalCode',
  preferredCurrency = 'preferredCurrency',
  profilePictureUrl = 'profilePictureUrl',
  role = 'role',
  secondaryEmail = 'secondaryEmail',
  state = 'state',
  status = 'status',
  tenantId = 'tenantId',
  updatedAt = 'updatedAt',
  updatedById = 'updatedById',
  userType = 'userType',
}
/** update columns of table "User" */
export const enum User_update_column {
  address = 'address',
  city = 'city',
  country = 'country',
  createdAt = 'createdAt',
  createdById = 'createdById',
  cursorId = 'cursorId',
  displayName = 'displayName',
  email = 'email',
  firstName = 'firstName',
  id = 'id',
  isMigrated = 'isMigrated',
  isTenantAdmin = 'isTenantAdmin',
  jobTitle = 'jobTitle',
  lastName = 'lastName',
  organizationId = 'organizationId',
  postalCode = 'postalCode',
  preferredCurrency = 'preferredCurrency',
  profilePictureUrl = 'profilePictureUrl',
  role = 'role',
  secondaryEmail = 'secondaryEmail',
  state = 'state',
  status = 'status',
  tenantId = 'tenantId',
  updatedAt = 'updatedAt',
  updatedById = 'updatedById',
  userType = 'userType',
}
/** ordering argument of a cursor */
export const enum cursor_ordering {
  ASC = 'ASC',
  DESC = 'DESC',
}
/** column ordering options */
export const enum order_by {
  asc = 'asc',
  asc_nulls_first = 'asc_nulls_first',
  asc_nulls_last = 'asc_nulls_last',
  desc = 'desc',
  desc_nulls_first = 'desc_nulls_first',
  desc_nulls_last = 'desc_nulls_last',
}

type ZEUS_VARIABLES = {
  ['ApplicationIntegration_aggregate_bool_exp']: ValueTypes['ApplicationIntegration_aggregate_bool_exp'];
  ['ApplicationIntegration_aggregate_bool_exp_count']: ValueTypes['ApplicationIntegration_aggregate_bool_exp_count'];
  ['ApplicationIntegration_aggregate_order_by']: ValueTypes['ApplicationIntegration_aggregate_order_by'];
  ['ApplicationIntegration_arr_rel_insert_input']: ValueTypes['ApplicationIntegration_arr_rel_insert_input'];
  ['ApplicationIntegration_avg_order_by']: ValueTypes['ApplicationIntegration_avg_order_by'];
  ['ApplicationIntegration_bool_exp']: ValueTypes['ApplicationIntegration_bool_exp'];
  ['ApplicationIntegration_constraint']: ValueTypes['ApplicationIntegration_constraint'];
  ['ApplicationIntegration_inc_input']: ValueTypes['ApplicationIntegration_inc_input'];
  ['ApplicationIntegration_insert_input']: ValueTypes['ApplicationIntegration_insert_input'];
  ['ApplicationIntegration_max_order_by']: ValueTypes['ApplicationIntegration_max_order_by'];
  ['ApplicationIntegration_min_order_by']: ValueTypes['ApplicationIntegration_min_order_by'];
  ['ApplicationIntegration_on_conflict']: ValueTypes['ApplicationIntegration_on_conflict'];
  ['ApplicationIntegration_order_by']: ValueTypes['ApplicationIntegration_order_by'];
  ['ApplicationIntegration_pk_columns_input']: ValueTypes['ApplicationIntegration_pk_columns_input'];
  ['ApplicationIntegration_select_column']: ValueTypes['ApplicationIntegration_select_column'];
  ['ApplicationIntegration_set_input']: ValueTypes['ApplicationIntegration_set_input'];
  ['ApplicationIntegration_stddev_order_by']: ValueTypes['ApplicationIntegration_stddev_order_by'];
  ['ApplicationIntegration_stddev_pop_order_by']: ValueTypes['ApplicationIntegration_stddev_pop_order_by'];
  ['ApplicationIntegration_stddev_samp_order_by']: ValueTypes['ApplicationIntegration_stddev_samp_order_by'];
  ['ApplicationIntegration_stream_cursor_input']: ValueTypes['ApplicationIntegration_stream_cursor_input'];
  ['ApplicationIntegration_stream_cursor_value_input']: ValueTypes['ApplicationIntegration_stream_cursor_value_input'];
  ['ApplicationIntegration_sum_order_by']: ValueTypes['ApplicationIntegration_sum_order_by'];
  ['ApplicationIntegration_update_column']: ValueTypes['ApplicationIntegration_update_column'];
  ['ApplicationIntegration_updates']: ValueTypes['ApplicationIntegration_updates'];
  ['ApplicationIntegration_var_pop_order_by']: ValueTypes['ApplicationIntegration_var_pop_order_by'];
  ['ApplicationIntegration_var_samp_order_by']: ValueTypes['ApplicationIntegration_var_samp_order_by'];
  ['ApplicationIntegration_variance_order_by']: ValueTypes['ApplicationIntegration_variance_order_by'];
  ['Application_bool_exp']: ValueTypes['Application_bool_exp'];
  ['Application_constraint']: ValueTypes['Application_constraint'];
  ['Application_inc_input']: ValueTypes['Application_inc_input'];
  ['Application_insert_input']: ValueTypes['Application_insert_input'];
  ['Application_obj_rel_insert_input']: ValueTypes['Application_obj_rel_insert_input'];
  ['Application_on_conflict']: ValueTypes['Application_on_conflict'];
  ['Application_order_by']: ValueTypes['Application_order_by'];
  ['Application_pk_columns_input']: ValueTypes['Application_pk_columns_input'];
  ['Application_select_column']: ValueTypes['Application_select_column'];
  ['Application_set_input']: ValueTypes['Application_set_input'];
  ['Application_stream_cursor_input']: ValueTypes['Application_stream_cursor_input'];
  ['Application_stream_cursor_value_input']: ValueTypes['Application_stream_cursor_value_input'];
  ['Application_update_column']: ValueTypes['Application_update_column'];
  ['Application_updates']: ValueTypes['Application_updates'];
  ['Boolean_comparison_exp']: ValueTypes['Boolean_comparison_exp'];
  ['CaseSeverity_bool_exp']: ValueTypes['CaseSeverity_bool_exp'];
  ['CaseSeverity_constraint']: ValueTypes['CaseSeverity_constraint'];
  ['CaseSeverity_inc_input']: ValueTypes['CaseSeverity_inc_input'];
  ['CaseSeverity_insert_input']: ValueTypes['CaseSeverity_insert_input'];
  ['CaseSeverity_on_conflict']: ValueTypes['CaseSeverity_on_conflict'];
  ['CaseSeverity_order_by']: ValueTypes['CaseSeverity_order_by'];
  ['CaseSeverity_pk_columns_input']: ValueTypes['CaseSeverity_pk_columns_input'];
  ['CaseSeverity_select_column']: ValueTypes['CaseSeverity_select_column'];
  ['CaseSeverity_set_input']: ValueTypes['CaseSeverity_set_input'];
  ['CaseSeverity_stream_cursor_input']: ValueTypes['CaseSeverity_stream_cursor_input'];
  ['CaseSeverity_stream_cursor_value_input']: ValueTypes['CaseSeverity_stream_cursor_value_input'];
  ['CaseSeverity_update_column']: ValueTypes['CaseSeverity_update_column'];
  ['CaseSeverity_updates']: ValueTypes['CaseSeverity_updates'];
  ['ClosureReason_bool_exp']: ValueTypes['ClosureReason_bool_exp'];
  ['ClosureReason_constraint']: ValueTypes['ClosureReason_constraint'];
  ['ClosureReason_inc_input']: ValueTypes['ClosureReason_inc_input'];
  ['ClosureReason_insert_input']: ValueTypes['ClosureReason_insert_input'];
  ['ClosureReason_on_conflict']: ValueTypes['ClosureReason_on_conflict'];
  ['ClosureReason_order_by']: ValueTypes['ClosureReason_order_by'];
  ['ClosureReason_pk_columns_input']: ValueTypes['ClosureReason_pk_columns_input'];
  ['ClosureReason_select_column']: ValueTypes['ClosureReason_select_column'];
  ['ClosureReason_set_input']: ValueTypes['ClosureReason_set_input'];
  ['ClosureReason_stream_cursor_input']: ValueTypes['ClosureReason_stream_cursor_input'];
  ['ClosureReason_stream_cursor_value_input']: ValueTypes['ClosureReason_stream_cursor_value_input'];
  ['ClosureReason_update_column']: ValueTypes['ClosureReason_update_column'];
  ['ClosureReason_updates']: ValueTypes['ClosureReason_updates'];
  ['Currency_bool_exp']: ValueTypes['Currency_bool_exp'];
  ['Currency_constraint']: ValueTypes['Currency_constraint'];
  ['Currency_insert_input']: ValueTypes['Currency_insert_input'];
  ['Currency_on_conflict']: ValueTypes['Currency_on_conflict'];
  ['Currency_order_by']: ValueTypes['Currency_order_by'];
  ['Currency_pk_columns_input']: ValueTypes['Currency_pk_columns_input'];
  ['Currency_select_column']: ValueTypes['Currency_select_column'];
  ['Currency_set_input']: ValueTypes['Currency_set_input'];
  ['Currency_stream_cursor_input']: ValueTypes['Currency_stream_cursor_input'];
  ['Currency_stream_cursor_value_input']: ValueTypes['Currency_stream_cursor_value_input'];
  ['Currency_update_column']: ValueTypes['Currency_update_column'];
  ['Currency_updates']: ValueTypes['Currency_updates'];
  ['CustomRole_bool_exp']: ValueTypes['CustomRole_bool_exp'];
  ['CustomRole_constraint']: ValueTypes['CustomRole_constraint'];
  ['CustomRole_inc_input']: ValueTypes['CustomRole_inc_input'];
  ['CustomRole_insert_input']: ValueTypes['CustomRole_insert_input'];
  ['CustomRole_on_conflict']: ValueTypes['CustomRole_on_conflict'];
  ['CustomRole_order_by']: ValueTypes['CustomRole_order_by'];
  ['CustomRole_pk_columns_input']: ValueTypes['CustomRole_pk_columns_input'];
  ['CustomRole_select_column']: ValueTypes['CustomRole_select_column'];
  ['CustomRole_set_input']: ValueTypes['CustomRole_set_input'];
  ['CustomRole_stream_cursor_input']: ValueTypes['CustomRole_stream_cursor_input'];
  ['CustomRole_stream_cursor_value_input']: ValueTypes['CustomRole_stream_cursor_value_input'];
  ['CustomRole_update_column']: ValueTypes['CustomRole_update_column'];
  ['CustomRole_updates']: ValueTypes['CustomRole_updates'];
  ['GroupRole_aggregate_bool_exp']: ValueTypes['GroupRole_aggregate_bool_exp'];
  ['GroupRole_aggregate_bool_exp_count']: ValueTypes['GroupRole_aggregate_bool_exp_count'];
  ['GroupRole_aggregate_order_by']: ValueTypes['GroupRole_aggregate_order_by'];
  ['GroupRole_arr_rel_insert_input']: ValueTypes['GroupRole_arr_rel_insert_input'];
  ['GroupRole_bool_exp']: ValueTypes['GroupRole_bool_exp'];
  ['GroupRole_constraint']: ValueTypes['GroupRole_constraint'];
  ['GroupRole_insert_input']: ValueTypes['GroupRole_insert_input'];
  ['GroupRole_max_order_by']: ValueTypes['GroupRole_max_order_by'];
  ['GroupRole_min_order_by']: ValueTypes['GroupRole_min_order_by'];
  ['GroupRole_on_conflict']: ValueTypes['GroupRole_on_conflict'];
  ['GroupRole_order_by']: ValueTypes['GroupRole_order_by'];
  ['GroupRole_pk_columns_input']: ValueTypes['GroupRole_pk_columns_input'];
  ['GroupRole_select_column']: ValueTypes['GroupRole_select_column'];
  ['GroupRole_set_input']: ValueTypes['GroupRole_set_input'];
  ['GroupRole_stream_cursor_input']: ValueTypes['GroupRole_stream_cursor_input'];
  ['GroupRole_stream_cursor_value_input']: ValueTypes['GroupRole_stream_cursor_value_input'];
  ['GroupRole_update_column']: ValueTypes['GroupRole_update_column'];
  ['GroupRole_updates']: ValueTypes['GroupRole_updates'];
  ['Group_bool_exp']: ValueTypes['Group_bool_exp'];
  ['Group_constraint']: ValueTypes['Group_constraint'];
  ['Group_inc_input']: ValueTypes['Group_inc_input'];
  ['Group_insert_input']: ValueTypes['Group_insert_input'];
  ['Group_obj_rel_insert_input']: ValueTypes['Group_obj_rel_insert_input'];
  ['Group_on_conflict']: ValueTypes['Group_on_conflict'];
  ['Group_order_by']: ValueTypes['Group_order_by'];
  ['Group_pk_columns_input']: ValueTypes['Group_pk_columns_input'];
  ['Group_select_column']: ValueTypes['Group_select_column'];
  ['Group_set_input']: ValueTypes['Group_set_input'];
  ['Group_stream_cursor_input']: ValueTypes['Group_stream_cursor_input'];
  ['Group_stream_cursor_value_input']: ValueTypes['Group_stream_cursor_value_input'];
  ['Group_update_column']: ValueTypes['Group_update_column'];
  ['Group_updates']: ValueTypes['Group_updates'];
  ['Industry_bool_exp']: ValueTypes['Industry_bool_exp'];
  ['Industry_constraint']: ValueTypes['Industry_constraint'];
  ['Industry_inc_input']: ValueTypes['Industry_inc_input'];
  ['Industry_insert_input']: ValueTypes['Industry_insert_input'];
  ['Industry_on_conflict']: ValueTypes['Industry_on_conflict'];
  ['Industry_order_by']: ValueTypes['Industry_order_by'];
  ['Industry_pk_columns_input']: ValueTypes['Industry_pk_columns_input'];
  ['Industry_select_column']: ValueTypes['Industry_select_column'];
  ['Industry_set_input']: ValueTypes['Industry_set_input'];
  ['Industry_stream_cursor_input']: ValueTypes['Industry_stream_cursor_input'];
  ['Industry_stream_cursor_value_input']: ValueTypes['Industry_stream_cursor_value_input'];
  ['Industry_update_column']: ValueTypes['Industry_update_column'];
  ['Industry_updates']: ValueTypes['Industry_updates'];
  ['Int_comparison_exp']: ValueTypes['Int_comparison_exp'];
  ['IssueCategory_bool_exp']: ValueTypes['IssueCategory_bool_exp'];
  ['IssueCategory_constraint']: ValueTypes['IssueCategory_constraint'];
  ['IssueCategory_inc_input']: ValueTypes['IssueCategory_inc_input'];
  ['IssueCategory_insert_input']: ValueTypes['IssueCategory_insert_input'];
  ['IssueCategory_on_conflict']: ValueTypes['IssueCategory_on_conflict'];
  ['IssueCategory_order_by']: ValueTypes['IssueCategory_order_by'];
  ['IssueCategory_pk_columns_input']: ValueTypes['IssueCategory_pk_columns_input'];
  ['IssueCategory_select_column']: ValueTypes['IssueCategory_select_column'];
  ['IssueCategory_set_input']: ValueTypes['IssueCategory_set_input'];
  ['IssueCategory_stream_cursor_input']: ValueTypes['IssueCategory_stream_cursor_input'];
  ['IssueCategory_stream_cursor_value_input']: ValueTypes['IssueCategory_stream_cursor_value_input'];
  ['IssueCategory_update_column']: ValueTypes['IssueCategory_update_column'];
  ['IssueCategory_updates']: ValueTypes['IssueCategory_updates'];
  ['Object_bool_exp']: ValueTypes['Object_bool_exp'];
  ['Object_constraint']: ValueTypes['Object_constraint'];
  ['Object_insert_input']: ValueTypes['Object_insert_input'];
  ['Object_on_conflict']: ValueTypes['Object_on_conflict'];
  ['Object_order_by']: ValueTypes['Object_order_by'];
  ['Object_pk_columns_input']: ValueTypes['Object_pk_columns_input'];
  ['Object_select_column']: ValueTypes['Object_select_column'];
  ['Object_set_input']: ValueTypes['Object_set_input'];
  ['Object_stream_cursor_input']: ValueTypes['Object_stream_cursor_input'];
  ['Object_stream_cursor_value_input']: ValueTypes['Object_stream_cursor_value_input'];
  ['Object_update_column']: ValueTypes['Object_update_column'];
  ['Object_updates']: ValueTypes['Object_updates'];
  ['Organization_bool_exp']: ValueTypes['Organization_bool_exp'];
  ['Organization_constraint']: ValueTypes['Organization_constraint'];
  ['Organization_insert_input']: ValueTypes['Organization_insert_input'];
  ['Organization_on_conflict']: ValueTypes['Organization_on_conflict'];
  ['Organization_order_by']: ValueTypes['Organization_order_by'];
  ['Organization_pk_columns_input']: ValueTypes['Organization_pk_columns_input'];
  ['Organization_select_column']: ValueTypes['Organization_select_column'];
  ['Organization_set_input']: ValueTypes['Organization_set_input'];
  ['Organization_stream_cursor_input']: ValueTypes['Organization_stream_cursor_input'];
  ['Organization_stream_cursor_value_input']: ValueTypes['Organization_stream_cursor_value_input'];
  ['Organization_update_column']: ValueTypes['Organization_update_column'];
  ['Organization_updates']: ValueTypes['Organization_updates'];
  ['PackageApplication_aggregate_bool_exp']: ValueTypes['PackageApplication_aggregate_bool_exp'];
  ['PackageApplication_aggregate_bool_exp_count']: ValueTypes['PackageApplication_aggregate_bool_exp_count'];
  ['PackageApplication_aggregate_order_by']: ValueTypes['PackageApplication_aggregate_order_by'];
  ['PackageApplication_arr_rel_insert_input']: ValueTypes['PackageApplication_arr_rel_insert_input'];
  ['PackageApplication_bool_exp']: ValueTypes['PackageApplication_bool_exp'];
  ['PackageApplication_constraint']: ValueTypes['PackageApplication_constraint'];
  ['PackageApplication_insert_input']: ValueTypes['PackageApplication_insert_input'];
  ['PackageApplication_max_order_by']: ValueTypes['PackageApplication_max_order_by'];
  ['PackageApplication_min_order_by']: ValueTypes['PackageApplication_min_order_by'];
  ['PackageApplication_on_conflict']: ValueTypes['PackageApplication_on_conflict'];
  ['PackageApplication_order_by']: ValueTypes['PackageApplication_order_by'];
  ['PackageApplication_pk_columns_input']: ValueTypes['PackageApplication_pk_columns_input'];
  ['PackageApplication_select_column']: ValueTypes['PackageApplication_select_column'];
  ['PackageApplication_set_input']: ValueTypes['PackageApplication_set_input'];
  ['PackageApplication_stream_cursor_input']: ValueTypes['PackageApplication_stream_cursor_input'];
  ['PackageApplication_stream_cursor_value_input']: ValueTypes['PackageApplication_stream_cursor_value_input'];
  ['PackageApplication_update_column']: ValueTypes['PackageApplication_update_column'];
  ['PackageApplication_updates']: ValueTypes['PackageApplication_updates'];
  ['Package_bool_exp']: ValueTypes['Package_bool_exp'];
  ['Package_constraint']: ValueTypes['Package_constraint'];
  ['Package_inc_input']: ValueTypes['Package_inc_input'];
  ['Package_insert_input']: ValueTypes['Package_insert_input'];
  ['Package_obj_rel_insert_input']: ValueTypes['Package_obj_rel_insert_input'];
  ['Package_on_conflict']: ValueTypes['Package_on_conflict'];
  ['Package_order_by']: ValueTypes['Package_order_by'];
  ['Package_pk_columns_input']: ValueTypes['Package_pk_columns_input'];
  ['Package_select_column']: ValueTypes['Package_select_column'];
  ['Package_set_input']: ValueTypes['Package_set_input'];
  ['Package_stream_cursor_input']: ValueTypes['Package_stream_cursor_input'];
  ['Package_stream_cursor_value_input']: ValueTypes['Package_stream_cursor_value_input'];
  ['Package_update_column']: ValueTypes['Package_update_column'];
  ['Package_updates']: ValueTypes['Package_updates'];
  ['ProductCategory_aggregate_bool_exp']: ValueTypes['ProductCategory_aggregate_bool_exp'];
  ['ProductCategory_aggregate_bool_exp_count']: ValueTypes['ProductCategory_aggregate_bool_exp_count'];
  ['ProductCategory_aggregate_order_by']: ValueTypes['ProductCategory_aggregate_order_by'];
  ['ProductCategory_arr_rel_insert_input']: ValueTypes['ProductCategory_arr_rel_insert_input'];
  ['ProductCategory_avg_order_by']: ValueTypes['ProductCategory_avg_order_by'];
  ['ProductCategory_bool_exp']: ValueTypes['ProductCategory_bool_exp'];
  ['ProductCategory_constraint']: ValueTypes['ProductCategory_constraint'];
  ['ProductCategory_inc_input']: ValueTypes['ProductCategory_inc_input'];
  ['ProductCategory_insert_input']: ValueTypes['ProductCategory_insert_input'];
  ['ProductCategory_max_order_by']: ValueTypes['ProductCategory_max_order_by'];
  ['ProductCategory_min_order_by']: ValueTypes['ProductCategory_min_order_by'];
  ['ProductCategory_on_conflict']: ValueTypes['ProductCategory_on_conflict'];
  ['ProductCategory_order_by']: ValueTypes['ProductCategory_order_by'];
  ['ProductCategory_pk_columns_input']: ValueTypes['ProductCategory_pk_columns_input'];
  ['ProductCategory_select_column']: ValueTypes['ProductCategory_select_column'];
  ['ProductCategory_set_input']: ValueTypes['ProductCategory_set_input'];
  ['ProductCategory_stddev_order_by']: ValueTypes['ProductCategory_stddev_order_by'];
  ['ProductCategory_stddev_pop_order_by']: ValueTypes['ProductCategory_stddev_pop_order_by'];
  ['ProductCategory_stddev_samp_order_by']: ValueTypes['ProductCategory_stddev_samp_order_by'];
  ['ProductCategory_stream_cursor_input']: ValueTypes['ProductCategory_stream_cursor_input'];
  ['ProductCategory_stream_cursor_value_input']: ValueTypes['ProductCategory_stream_cursor_value_input'];
  ['ProductCategory_sum_order_by']: ValueTypes['ProductCategory_sum_order_by'];
  ['ProductCategory_update_column']: ValueTypes['ProductCategory_update_column'];
  ['ProductCategory_updates']: ValueTypes['ProductCategory_updates'];
  ['ProductCategory_var_pop_order_by']: ValueTypes['ProductCategory_var_pop_order_by'];
  ['ProductCategory_var_samp_order_by']: ValueTypes['ProductCategory_var_samp_order_by'];
  ['ProductCategory_variance_order_by']: ValueTypes['ProductCategory_variance_order_by'];
  ['ProductVersion_aggregate_bool_exp']: ValueTypes['ProductVersion_aggregate_bool_exp'];
  ['ProductVersion_aggregate_bool_exp_count']: ValueTypes['ProductVersion_aggregate_bool_exp_count'];
  ['ProductVersion_aggregate_order_by']: ValueTypes['ProductVersion_aggregate_order_by'];
  ['ProductVersion_arr_rel_insert_input']: ValueTypes['ProductVersion_arr_rel_insert_input'];
  ['ProductVersion_avg_order_by']: ValueTypes['ProductVersion_avg_order_by'];
  ['ProductVersion_bool_exp']: ValueTypes['ProductVersion_bool_exp'];
  ['ProductVersion_constraint']: ValueTypes['ProductVersion_constraint'];
  ['ProductVersion_inc_input']: ValueTypes['ProductVersion_inc_input'];
  ['ProductVersion_insert_input']: ValueTypes['ProductVersion_insert_input'];
  ['ProductVersion_max_order_by']: ValueTypes['ProductVersion_max_order_by'];
  ['ProductVersion_min_order_by']: ValueTypes['ProductVersion_min_order_by'];
  ['ProductVersion_on_conflict']: ValueTypes['ProductVersion_on_conflict'];
  ['ProductVersion_order_by']: ValueTypes['ProductVersion_order_by'];
  ['ProductVersion_pk_columns_input']: ValueTypes['ProductVersion_pk_columns_input'];
  ['ProductVersion_select_column']: ValueTypes['ProductVersion_select_column'];
  ['ProductVersion_set_input']: ValueTypes['ProductVersion_set_input'];
  ['ProductVersion_stddev_order_by']: ValueTypes['ProductVersion_stddev_order_by'];
  ['ProductVersion_stddev_pop_order_by']: ValueTypes['ProductVersion_stddev_pop_order_by'];
  ['ProductVersion_stddev_samp_order_by']: ValueTypes['ProductVersion_stddev_samp_order_by'];
  ['ProductVersion_stream_cursor_input']: ValueTypes['ProductVersion_stream_cursor_input'];
  ['ProductVersion_stream_cursor_value_input']: ValueTypes['ProductVersion_stream_cursor_value_input'];
  ['ProductVersion_sum_order_by']: ValueTypes['ProductVersion_sum_order_by'];
  ['ProductVersion_update_column']: ValueTypes['ProductVersion_update_column'];
  ['ProductVersion_updates']: ValueTypes['ProductVersion_updates'];
  ['ProductVersion_var_pop_order_by']: ValueTypes['ProductVersion_var_pop_order_by'];
  ['ProductVersion_var_samp_order_by']: ValueTypes['ProductVersion_var_samp_order_by'];
  ['ProductVersion_variance_order_by']: ValueTypes['ProductVersion_variance_order_by'];
  ['Product_bool_exp']: ValueTypes['Product_bool_exp'];
  ['Product_constraint']: ValueTypes['Product_constraint'];
  ['Product_inc_input']: ValueTypes['Product_inc_input'];
  ['Product_insert_input']: ValueTypes['Product_insert_input'];
  ['Product_obj_rel_insert_input']: ValueTypes['Product_obj_rel_insert_input'];
  ['Product_on_conflict']: ValueTypes['Product_on_conflict'];
  ['Product_order_by']: ValueTypes['Product_order_by'];
  ['Product_pk_columns_input']: ValueTypes['Product_pk_columns_input'];
  ['Product_select_column']: ValueTypes['Product_select_column'];
  ['Product_set_input']: ValueTypes['Product_set_input'];
  ['Product_stream_cursor_input']: ValueTypes['Product_stream_cursor_input'];
  ['Product_stream_cursor_value_input']: ValueTypes['Product_stream_cursor_value_input'];
  ['Product_update_column']: ValueTypes['Product_update_column'];
  ['Product_updates']: ValueTypes['Product_updates'];
  ['Role_bool_exp']: ValueTypes['Role_bool_exp'];
  ['Role_constraint']: ValueTypes['Role_constraint'];
  ['Role_insert_input']: ValueTypes['Role_insert_input'];
  ['Role_obj_rel_insert_input']: ValueTypes['Role_obj_rel_insert_input'];
  ['Role_on_conflict']: ValueTypes['Role_on_conflict'];
  ['Role_order_by']: ValueTypes['Role_order_by'];
  ['Role_pk_columns_input']: ValueTypes['Role_pk_columns_input'];
  ['Role_select_column']: ValueTypes['Role_select_column'];
  ['Role_set_input']: ValueTypes['Role_set_input'];
  ['Role_stream_cursor_input']: ValueTypes['Role_stream_cursor_input'];
  ['Role_stream_cursor_value_input']: ValueTypes['Role_stream_cursor_value_input'];
  ['Role_update_column']: ValueTypes['Role_update_column'];
  ['Role_updates']: ValueTypes['Role_updates'];
  ['Status_bool_exp']: ValueTypes['Status_bool_exp'];
  ['Status_constraint']: ValueTypes['Status_constraint'];
  ['Status_enum']: ValueTypes['Status_enum'];
  ['Status_enum_comparison_exp']: ValueTypes['Status_enum_comparison_exp'];
  ['Status_insert_input']: ValueTypes['Status_insert_input'];
  ['Status_on_conflict']: ValueTypes['Status_on_conflict'];
  ['Status_order_by']: ValueTypes['Status_order_by'];
  ['Status_pk_columns_input']: ValueTypes['Status_pk_columns_input'];
  ['Status_select_column']: ValueTypes['Status_select_column'];
  ['Status_set_input']: ValueTypes['Status_set_input'];
  ['Status_stream_cursor_input']: ValueTypes['Status_stream_cursor_input'];
  ['Status_stream_cursor_value_input']: ValueTypes['Status_stream_cursor_value_input'];
  ['Status_update_column']: ValueTypes['Status_update_column'];
  ['Status_updates']: ValueTypes['Status_updates'];
  ['String_comparison_exp']: ValueTypes['String_comparison_exp'];
  ['Task_bool_exp']: ValueTypes['Task_bool_exp'];
  ['Task_constraint']: ValueTypes['Task_constraint'];
  ['Task_insert_input']: ValueTypes['Task_insert_input'];
  ['Task_on_conflict']: ValueTypes['Task_on_conflict'];
  ['Task_order_by']: ValueTypes['Task_order_by'];
  ['Task_pk_columns_input']: ValueTypes['Task_pk_columns_input'];
  ['Task_select_column']: ValueTypes['Task_select_column'];
  ['Task_set_input']: ValueTypes['Task_set_input'];
  ['Task_stream_cursor_input']: ValueTypes['Task_stream_cursor_input'];
  ['Task_stream_cursor_value_input']: ValueTypes['Task_stream_cursor_value_input'];
  ['Task_update_column']: ValueTypes['Task_update_column'];
  ['Task_updates']: ValueTypes['Task_updates'];
  ['TenantPackage_aggregate_bool_exp']: ValueTypes['TenantPackage_aggregate_bool_exp'];
  ['TenantPackage_aggregate_bool_exp_count']: ValueTypes['TenantPackage_aggregate_bool_exp_count'];
  ['TenantPackage_aggregate_order_by']: ValueTypes['TenantPackage_aggregate_order_by'];
  ['TenantPackage_arr_rel_insert_input']: ValueTypes['TenantPackage_arr_rel_insert_input'];
  ['TenantPackage_bool_exp']: ValueTypes['TenantPackage_bool_exp'];
  ['TenantPackage_constraint']: ValueTypes['TenantPackage_constraint'];
  ['TenantPackage_insert_input']: ValueTypes['TenantPackage_insert_input'];
  ['TenantPackage_max_order_by']: ValueTypes['TenantPackage_max_order_by'];
  ['TenantPackage_min_order_by']: ValueTypes['TenantPackage_min_order_by'];
  ['TenantPackage_on_conflict']: ValueTypes['TenantPackage_on_conflict'];
  ['TenantPackage_order_by']: ValueTypes['TenantPackage_order_by'];
  ['TenantPackage_pk_columns_input']: ValueTypes['TenantPackage_pk_columns_input'];
  ['TenantPackage_select_column']: ValueTypes['TenantPackage_select_column'];
  ['TenantPackage_set_input']: ValueTypes['TenantPackage_set_input'];
  ['TenantPackage_stream_cursor_input']: ValueTypes['TenantPackage_stream_cursor_input'];
  ['TenantPackage_stream_cursor_value_input']: ValueTypes['TenantPackage_stream_cursor_value_input'];
  ['TenantPackage_update_column']: ValueTypes['TenantPackage_update_column'];
  ['TenantPackage_updates']: ValueTypes['TenantPackage_updates'];
  ['Tenant_bool_exp']: ValueTypes['Tenant_bool_exp'];
  ['Tenant_constraint']: ValueTypes['Tenant_constraint'];
  ['Tenant_inc_input']: ValueTypes['Tenant_inc_input'];
  ['Tenant_insert_input']: ValueTypes['Tenant_insert_input'];
  ['Tenant_obj_rel_insert_input']: ValueTypes['Tenant_obj_rel_insert_input'];
  ['Tenant_on_conflict']: ValueTypes['Tenant_on_conflict'];
  ['Tenant_order_by']: ValueTypes['Tenant_order_by'];
  ['Tenant_pk_columns_input']: ValueTypes['Tenant_pk_columns_input'];
  ['Tenant_select_column']: ValueTypes['Tenant_select_column'];
  ['Tenant_set_input']: ValueTypes['Tenant_set_input'];
  ['Tenant_stream_cursor_input']: ValueTypes['Tenant_stream_cursor_input'];
  ['Tenant_stream_cursor_value_input']: ValueTypes['Tenant_stream_cursor_value_input'];
  ['Tenant_update_column']: ValueTypes['Tenant_update_column'];
  ['Tenant_updates']: ValueTypes['Tenant_updates'];
  ['UserGroup_aggregate_bool_exp']: ValueTypes['UserGroup_aggregate_bool_exp'];
  ['UserGroup_aggregate_bool_exp_count']: ValueTypes['UserGroup_aggregate_bool_exp_count'];
  ['UserGroup_aggregate_order_by']: ValueTypes['UserGroup_aggregate_order_by'];
  ['UserGroup_arr_rel_insert_input']: ValueTypes['UserGroup_arr_rel_insert_input'];
  ['UserGroup_bool_exp']: ValueTypes['UserGroup_bool_exp'];
  ['UserGroup_constraint']: ValueTypes['UserGroup_constraint'];
  ['UserGroup_insert_input']: ValueTypes['UserGroup_insert_input'];
  ['UserGroup_max_order_by']: ValueTypes['UserGroup_max_order_by'];
  ['UserGroup_min_order_by']: ValueTypes['UserGroup_min_order_by'];
  ['UserGroup_on_conflict']: ValueTypes['UserGroup_on_conflict'];
  ['UserGroup_order_by']: ValueTypes['UserGroup_order_by'];
  ['UserGroup_pk_columns_input']: ValueTypes['UserGroup_pk_columns_input'];
  ['UserGroup_select_column']: ValueTypes['UserGroup_select_column'];
  ['UserGroup_set_input']: ValueTypes['UserGroup_set_input'];
  ['UserGroup_stream_cursor_input']: ValueTypes['UserGroup_stream_cursor_input'];
  ['UserGroup_stream_cursor_value_input']: ValueTypes['UserGroup_stream_cursor_value_input'];
  ['UserGroup_update_column']: ValueTypes['UserGroup_update_column'];
  ['UserGroup_updates']: ValueTypes['UserGroup_updates'];
  ['UserRole_aggregate_bool_exp']: ValueTypes['UserRole_aggregate_bool_exp'];
  ['UserRole_aggregate_bool_exp_count']: ValueTypes['UserRole_aggregate_bool_exp_count'];
  ['UserRole_aggregate_order_by']: ValueTypes['UserRole_aggregate_order_by'];
  ['UserRole_arr_rel_insert_input']: ValueTypes['UserRole_arr_rel_insert_input'];
  ['UserRole_bool_exp']: ValueTypes['UserRole_bool_exp'];
  ['UserRole_constraint']: ValueTypes['UserRole_constraint'];
  ['UserRole_insert_input']: ValueTypes['UserRole_insert_input'];
  ['UserRole_max_order_by']: ValueTypes['UserRole_max_order_by'];
  ['UserRole_min_order_by']: ValueTypes['UserRole_min_order_by'];
  ['UserRole_on_conflict']: ValueTypes['UserRole_on_conflict'];
  ['UserRole_order_by']: ValueTypes['UserRole_order_by'];
  ['UserRole_pk_columns_input']: ValueTypes['UserRole_pk_columns_input'];
  ['UserRole_select_column']: ValueTypes['UserRole_select_column'];
  ['UserRole_set_input']: ValueTypes['UserRole_set_input'];
  ['UserRole_stream_cursor_input']: ValueTypes['UserRole_stream_cursor_input'];
  ['UserRole_stream_cursor_value_input']: ValueTypes['UserRole_stream_cursor_value_input'];
  ['UserRole_update_column']: ValueTypes['UserRole_update_column'];
  ['UserRole_updates']: ValueTypes['UserRole_updates'];
  ['UserType_bool_exp']: ValueTypes['UserType_bool_exp'];
  ['UserType_constraint']: ValueTypes['UserType_constraint'];
  ['UserType_enum']: ValueTypes['UserType_enum'];
  ['UserType_enum_comparison_exp']: ValueTypes['UserType_enum_comparison_exp'];
  ['UserType_insert_input']: ValueTypes['UserType_insert_input'];
  ['UserType_on_conflict']: ValueTypes['UserType_on_conflict'];
  ['UserType_order_by']: ValueTypes['UserType_order_by'];
  ['UserType_pk_columns_input']: ValueTypes['UserType_pk_columns_input'];
  ['UserType_select_column']: ValueTypes['UserType_select_column'];
  ['UserType_set_input']: ValueTypes['UserType_set_input'];
  ['UserType_stream_cursor_input']: ValueTypes['UserType_stream_cursor_input'];
  ['UserType_stream_cursor_value_input']: ValueTypes['UserType_stream_cursor_value_input'];
  ['UserType_update_column']: ValueTypes['UserType_update_column'];
  ['UserType_updates']: ValueTypes['UserType_updates'];
  ['User_bool_exp']: ValueTypes['User_bool_exp'];
  ['User_constraint']: ValueTypes['User_constraint'];
  ['User_inc_input']: ValueTypes['User_inc_input'];
  ['User_insert_input']: ValueTypes['User_insert_input'];
  ['User_obj_rel_insert_input']: ValueTypes['User_obj_rel_insert_input'];
  ['User_on_conflict']: ValueTypes['User_on_conflict'];
  ['User_order_by']: ValueTypes['User_order_by'];
  ['User_pk_columns_input']: ValueTypes['User_pk_columns_input'];
  ['User_select_column']: ValueTypes['User_select_column'];
  ['User_set_input']: ValueTypes['User_set_input'];
  ['User_stream_cursor_input']: ValueTypes['User_stream_cursor_input'];
  ['User_stream_cursor_value_input']: ValueTypes['User_stream_cursor_value_input'];
  ['User_update_column']: ValueTypes['User_update_column'];
  ['User_updates']: ValueTypes['User_updates'];
  ['bigint']: ValueTypes['bigint'];
  ['bigint_comparison_exp']: ValueTypes['bigint_comparison_exp'];
  ['cursor_ordering']: ValueTypes['cursor_ordering'];
  ['order_by']: ValueTypes['order_by'];
  ['timestamp']: ValueTypes['timestamp'];
  ['timestamp_comparison_exp']: ValueTypes['timestamp_comparison_exp'];
  ['timestamptz']: ValueTypes['timestamptz'];
  ['timestamptz_comparison_exp']: ValueTypes['timestamptz_comparison_exp'];
  ['uuid']: ValueTypes['uuid'];
  ['uuid_comparison_exp']: ValueTypes['uuid_comparison_exp'];
};
